[{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Visualization","text":"Spectral flow cytometry (SFC) ability resolve presence relative abundance highly similar fluorophores individual cells heavily dependent quality reference unmixing controls (single-color (SC) unstained (UC)). Despite critical role, resources tools (either open-source commercial) available evaluate quality unmixing controls. leads individual users becoming aware issues unmixing full-stained sample unmixed sample looks “”. subsequently left interpret tea leaves unmixed data, attempting parse may led outcome. Given unmixing issues can arise variety sources (multiple autofluorescences, tandem degradation, instrumental error) similarly can result loss resolution, way screen problematic unmixing controls quickly evaluate potential effect re-unmixing useful. Additionally, tools made purposes can utilized query individual fluorescent signatures brightness impact unmixing process. Luciernaga R package attempts address gaps. provides functionality implement tailor quality control checks unmixing controls, characterize normalized signatures present, evaluate effect unmixing. Using functional programming, can enable data exploration visualization entire data set. work individual experiment basis, can also combined visualize changes fluorescence across experimental run identify trends affecting single color quality. goal provide tools others can use develop quantitative methods monitor individual panels instrumental configurations. additionally leverage functional programming ability purrr enable data visualization markers present resulting unmixed samples, well samples present within GatingSet desired gating node. Luciernaga free open source software project started University Maryland, Baltimore active development. originally designed address issues around cytometry core’s Cytek Aurora instruments. love feedback. identify bugs, please open issue github repository. suggestions like participate extending functionality spectral cytometry instruments, please reach email listed description.","code":""},{"path":[]},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"installing-luciernaga","dir":"Articles","previous_headings":"Setup","what":"Installing Luciernaga","title":"Data Visualization","text":"process preparing Luciernaga submission Bioconductor later year. , available download via GitHub.","code":"if(!require(\"remotes\")) {install.packages(\"remotes\")}    if(!require(\"Luciernaga\")){   remotes::install_github(\"https://github.com/DavidRach/Luciernaga\") }    # install.packages(\"BiocManager\") # BiocManager::install(\"Luciernaga\")"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"loading-libraries","dir":"Articles","previous_headings":"Setup","what":"Loading Libraries","title":"Data Visualization","text":"Luciernaga works using infrastructure provided Bioconductor cytometry packages. also makes use tidyverse packages available via CRAN facilitate use target audience novice-intermediate R users. important make sure installed computer libraries loaded.","code":"library(Luciernaga) library(flowCore) library(flowWorkspace) library(openCyto) library(ggcyto)   library(data.table) library(dplyr) library(purrr)  library(stringr) library(ggplot2) library(gt) library(plotly) library(htmltools)"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"locating--fcs-files","dir":"Articles","previous_headings":"Setup","what":"Locating .fcs files","title":"Data Visualization","text":"get started, first need provide location computer .fcs files interest stored. example author computer provided can modified user desired computer folder. vignette, using -sampled .fcs files can found Luciernaga’s extdata folder example. original .fcs files, retained 10000 events cell unmixing controls, 3000 bead unmixing controls. Within extdata folder mix different files intended different vignettes. majority contents unmixing controls full-stained samples acquired process processing 29-color SFC panel Cord (CBMC) Peripheral Blood Mononuclear Cells (PBMCs), raw unmixed files. Additionally, samples correspond Cytek Aurora QC beads collected daily QC bead instrument monitoring. initial example, lets filter list keywords file name organize subsequent use elsewhere vignette. now, let’s subset desired files shown :","code":"File_Location <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\",                            \"TodaysExperiment\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) head(FCS_Files[20:30], 5) #> [1] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CCR7_BV650(Beads).fcs\"      #> [2] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CCR7_BV650(Cells).fcs\"      #> [3] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CD107a_APC-R700(Beads).fcs\" #> [4] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CD107a_APC-R700(Cells).fcs\" #> [5] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CD127_BV421(Beads).fcs\" QCBeads <- FCS_Files[grep(\"After|Before\", FCS_Files)]  Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)]  Raw_FullStained <- FCS_Files[-grep(   \"Cells|Beads|Unmixed|Unstained|After|Before\", FCS_Files)]  UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedBeads <- UnstainedFCSFiles[grep(\"Beads\", UnstainedFCSFiles)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)]  BeadFCSFiles <- FCS_Files[grep(\"Beads\", FCS_Files)] BeadSingleColors <- BeadFCSFiles[-grep(\"Unstained\", BeadFCSFiles)]  CellSingleColors <- FCS_Files[grep(\"Cells\", FCS_Files)] head(CellSingleColors, 5) #> [1] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CCR4_BUV615(Cells).fcs\"     #> [2] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CCR6_BV786(Cells).fcs\"      #> [3] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CCR7_BV650(Cells).fcs\"      #> [4] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CD107a_APC-R700(Cells).fcs\" #> [5] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/CD127_BV421(Cells).fcs\""},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"creating-a-gatingset","dir":"Articles","previous_headings":"Setup","what":"Creating a GatingSet","title":"Data Visualization","text":"list desired .fcs files, can use flowWorkspace bring individual .fcs files first CytoSet object, GatingSet object can add gates : example, use openCyto package automatically gate .fcs files lymphocyte population. , first read example .csv file containing desired gates (can found Luciernaga’s extdata folder) using data.table package experiments, individual gates can added, removed modified match requirements .fcs files, additional details, please refer openCyto packages vignettes. Alternatively, GatingSet objects can brought directly several commercial software formats using CytoML package. Now gating information .csv file, can convert GatingTemplate, append .fcs files contained within GatingSet","code":"MyCytoSet <- load_cytoset_from_fcs(UnstainedCells, truncate_max_range = FALSE,                                    transformation = FALSE) #MyCytoSet MyGatingSet <- GatingSet(MyCytoSet) MyGatingSet #> A GatingSet with 18 samples FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyGates <- fread(file.path(path = FileLocation, pattern = 'Gates.csv')) gt(MyGates) MyGatingTemplate <- gatingTemplate(MyGates) gt_gating(MyGatingTemplate, MyGatingSet) MyGatingSet[[1]] #> Sample:  INF071_Ctrl_Unstained.fcs  #> GatingHierarchy with  6  gates"},{"path":[]},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_gatingplots","dir":"Articles","previous_headings":"Visualizing Gates","what":"Utility_GatingPlots","title":"Data Visualization","text":"can visualize applied gates individual .fcs files using Luciernaga’s Utility_GatingPlots() function. can individually, iterate entire GatingSet using purrr purrr::map() function. , reference data.table imported gating information (MyGates) showcased , GatingSet object. Utility_GatingPlots() argument export = FALSE return patchwork grouped ggplot objects, return = TRUE returns output .pdf file designated output location.","code":"removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  IndividualPlot <- Utility_GatingPlots(x=MyGatingSet[[2]], sample.name = \"GUID\",                                       removestrings = removestrings,                                       gtFile = MyGates, DesiredGates = NULL,                                       outpath = StorageLocation,                                       returnType=\"patchwork\")    IteratedPlots <- map(.x = MyGatingSet[1:3], .f = Utility_GatingPlots,                      sample.name = \"GUID\", removestrings = removestrings,                      gtFile = MyGates, DesiredGates = NULL,                      outpath = StorageLocation, returnType=\"patchwork\") #> $`1` #>  #> $`2`"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_iterativegating","dir":"Articles","previous_headings":"Visualizing Gates","what":"Utility_IterativeGating","title":"Data Visualization","text":"absence existing gating template, Utility_IterativeGating() function can used visualize individual gate placements specimens found GatingSet object. figure necessary information, can use flowWorkspace flowWorkspace::plot() flowWorkspace::gs_pop_get_gate() find gate, respective X Y parameters.","code":"plot(MyGatingSet) gs_pop_get_gate(MyGatingSet[1], \"lymphocytes\") #> $INF071_Ctrl_Unstained.fcs #> Ellipsoid gate 'lymphocytes' in dimensions FSC-A and SSC-A  SingleSpecimen <- Utility_IterativeGating(x=MyGatingSet[1], sample.name = \"GUID\",                                           removestrings = removestrings,                                           subset = \"nonDebris\",                                           gate = \"lymphocytes\",                                           xValue = \"FSC-A\", yValue = \"SSC-A\",                                           bins = 270)   AllSpecimens <- Utility_IterativeGating(x=MyGatingSet[1:3], sample.name = \"GUID\",                                         removestrings = removestrings,                                         subset = \"nonDebris\", gate = \"lymphocytes\",                                         xValue = \"FSC-A\", yValue = \"SSC-A\", bins = 270) #> [[1]]"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_patchwork","dir":"Articles","previous_headings":"Visualizing Gates","what":"Utility_Patchwork","title":"Data Visualization","text":"previous example returned AllSpecimens, list ggplot objects. allows us showcase Utility_Patchwork(). wrapper patchwork used background Luciernaga’s data visualization functions generating .pdf files existing ggplot objects. Utility_Patchwork() take list ggplot objects, arrange based specified number columns rows individual pages designated width height, returntype = “pdf” save designated outfolder file.path desired file.name.","code":"StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  Utility_Patchwork(AllSpecimens, \"LymphocyteGates\", outfolder=StorageLocation,                   thecolumns=2, therows=2, width = 7, height = 9,                   returntype=\"patchwork\") #> $`1`"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"creating-a-gatingset-for-unmixed--fcs-files","dir":"Articles","previous_headings":"","what":"Creating a GatingSet for Unmixed .fcs files","title":"Data Visualization","text":"next couple functions designed primarily use unmixed full-stained samples. return earlier example select corresponding example .fcs files found within Luciernaga’s extdata folder bring GatingSet object. Now GatingSet object, identify markers/fluorophores present .fcs file, remove list markers don’t need transformed (example FSC, SSC, etc). bi-exponentially transform data using flowWorkspace flowWorkspace::flowjo_biexp_trans() applying gating template. verify successfully gated expected:   # Visualizing Data","code":"UnmixedFCSFiles <- Unmixed_FullStained[c(1:4)] UnmixedFCSFiles #> [1] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/INF071_Ctrl_Tetramer_Unmixed.fcs\"   #> [2] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/INF149_Ctrl_Tetramer_Unmixed.fcs\"   #> [3] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/INF179_Ctrl_Tetramer_Unmixed.fcs\"   #> [4] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/ND050_15_Ctrl_Tetramer_Unmixed.fcs\" UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles,                                         truncate_max_range = FALSE,                                         transform = FALSE)  UnmixedGatingSet <- GatingSet(UnmixedCytoSet) UnmixedGatingSet #> A GatingSet with 4 samples Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(   \"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)]  MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,                                                maxValue = 1000000,                                                pos = 4.5, neg = 0,                                                widthBasis = -1000)  TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- transform(UnmixedGatingSet, TransformList)  FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation,                                 pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) gt_gating(UnmixedGating, UnmixedGatingSet) UnmixedGatingSet[[4]] #> Sample:  ND050_15_Ctrl_Tetramer_Unmixed.fcs  #> GatingHierarchy with  7  gates plot(UnmixedGatingSet) StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") removestrings <- \".fcs\"  UnmixedIndividualPlot <- Utility_GatingPlots(x=UnmixedGatingSet[[2]],                                              sample.name = \"GUID\",                                              removestrings = removestrings,                                              gtFile = UnmixedGates,                                              DesiredGates = NULL,                                              outpath = StorageLocation,                                              returnType=\"patchwork\") #> $`1` #>  #> $`2`"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_nxnplots","dir":"Articles","previous_headings":"Creating a GatingSet for Unmixed .fcs files","what":"Utility_NxNPlots","title":"Data Visualization","text":"Utility_NxNPlots() convenient function visualize unmixed .fcs files every marker compared reference marker. particularly useful identifying cell populations, well unmixing errors. takes GatingSet object transformed gated. desired population cells can specified gatesubset argument. ycolumn specifies desired marker compare markers . Similar functions use Utility_Patchwork behind scenes, can send outputs specimen pdf file.   return given specimen markers vs. specified marker y-axis. Utility_NxNPlots() additionally accepts ycolumn = “” option directly iterate every marker ycolumn argument. However, warned, larger SFC panels many fluorophores, take time single specimen (marker pdf taking memory space!), even every specimen GatingSet!!!","code":"plot(UnmixedGatingSet) removethese <- c(\".fcs\", \"DTR_\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  colnames(UnmixedGatingSet)[11:39] #>  [1] \"BUV395-A\"          \"BUV496-A\"          \"BUV563-A\"          #>  [4] \"BUV615-A\"          \"BUV661-A\"          \"BUV737-A\"          #>  [7] \"BUV805-A\"          \"BV421-A\"           \"Pacific Blue-A\"    #> [10] \"BV480-A\"           \"BV510-A\"           \"BV605-A\"           #> [13] \"BV650-A\"           \"BV711-A\"           \"BV750-A\"           #> [16] \"BV786-A\"           \"Alexa Fluor 488-A\" \"Spark Blue 550-A\"  #> [19] \"PerCP-Cy5.5-A\"     \"PE-A\"              \"PE-Dazzle594-A\"    #> [22] \"PE-Cy5-A\"          \"PE-Vio770-A\"       \"APC-A\"             #> [25] \"Alexa Fluor 647-A\" \"APC-R700-A\"        \"Zombie NIR-A\"      #> [28] \"APC-Fire 750-A\"    \"APC-Fire 810-A\"  IndividualNxN <- Utility_NbyNPlots(x=UnmixedGatingSet[[4]],                                    sample.name = \"GROUPNAME\",                                     removestrings = removethese,                                    marginsubset = \"lymphocytes\",                                    gatesubset = \"live\",                                    ycolumn = \"Spark Blue 550-A\",                                    bins = 70, clearance = 0.2,                                    gatelines = FALSE, reference = NULL,                                    outpath = StorageLocation,                                    returntype=\"patchwork\")  MultipleNxN <- map(.x = UnmixedGatingSet[1:2], .f = Utility_NbyNPlots,                    sample.name = \"GROUPNAME\", removestrings = removethese,                    marginsubset = \"lymphocytes\", gatesubset = \"live\",                    ycolumn = \"Spark Blue 550-A\", bins = 70, clearance = 0.2,                    gatelines = FALSE, reference = NULL,                    outpath = StorageLocation, returntype=\"patchwork\") #> $`1` removethese <- c(\".fcs\", \"DTR_\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  All_IndividualNxN <- Utility_NbyNPlots(x=UnmixedGatingSet[[1]],                                        sample.name = \"GROUPNAME\",                                        removestrings = removethese,                                        marginsubset = \"lymphocytes\",                                        gatesubset = \"live\", ycolumn = \"ALL\",                                        bins = 120, clearance = 0.2,                                        gatelines = FALSE, reference = NULL,                                        outpath = StorageLocation,                                        returntype=\"pdf\")  ALL_MultipleNxN <- map(.x = UnmixedGatingSet, .f = Utility_NbyNPlots,                        sample.name = \"GROUPNAME\", removestrings = removethese,                        marginsubset = \"lymphocytes\", gatesubset = \"live\",                        ycolumn = \"ALL\", bins = 120, clearance = 0.2,                        gatelines = FALSE, reference = NULL,                        outpath = StorageLocation, returntype=\"pdf\")"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_parallelnxnplots","dir":"Articles","previous_headings":"Creating a GatingSet for Unmixed .fcs files","what":"Utility_ParallelNxNPlots","title":"Data Visualization","text":"Utitlity_ParallelNxNPlots extension Utility_NxNPlots, used compare two separate samples overlaid plot. can useful comparing different specimens, different treatment conditions, differences unmixing. usable remains development (notice colors different specimens don’t blend well). utilizes purrr purrr::map2() argument behind scenes determine order specimens compared .  Similar Utility_NxNPlots(), switching argument ycolumn = “” iterate marker combinations y-column vs x-marker combinations. warning run time memory space applies, double overlaying plots.","code":"gt(pData(UnmixedGatingSet)) OverlaidNxNPlots <- Utility_ParallelNbyNPlots(x=UnmixedGatingSet[1],                                               y = UnmixedGatingSet[4],                                               sample.name = \"GROUPNAME\",                                               removestrings = \".fcs\",                                               Override = FALSE,                                               marginsubset = \"lymphocytes\",                                               gatesubset = \"live\",                                               ycolumn = \"Spark Blue 550-A\",                                               bins = 120, clearance = 0.2,                                               colorX = \"lightblue\",                                               colorY = \"orange\",                                                gatelines = FALSE,                                                reference = NULL,                                                outpath = StorageLocation,                                               pdf = FALSE) #> $`1` #Currently bugged out for All Option  gt(pData(UnmixedGatingSet))  All_OverlaidNxNPlots <- Utility_ParallelNbyNPlots(x=UnmixedGatingSet[1],                                                   y = UnmixedGatingSet[2],                                                   sample.name = \"GROUPNAME\",                                                   removestrings = \".fcs\",                                                   Override = FALSE,                                                   marginsubset = \"lymphocytes\",                                                   gatesubset = \"live\",                                                   ycolumn = \"ALL\", bins = 120,                                                    clearance = 0.2,                                                    colorX = \"lightblue\",                                                    colorY = \"orange\",                                                   gatelines = FALSE,                                                    reference = NULL,                                                   outpath = StorageLocation,                                                   pdf = FALSE)  All_OverlaidNxNPlots[1]"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_unityplots","dir":"Articles","previous_headings":"Creating a GatingSet for Unmixed .fcs files","what":"Utility_UnityPlots","title":"Data Visualization","text":"Utility_NxNPlots() show marker combinations single specimen, Utility_UnityPlots() showcase single combination markers specimens present GatingSet. Given bringing data every specimen active memory way max ram, helpful break map calls chunks. example:","code":"SingleUnityPlot <- Utility_UnityPlot(x=\"Spark Blue 550-A\", y=\"BUV805-A\",                                      GatingSet=UnmixedGatingSet,                                      sample.name=\"GROUPNAME\", bins=100,                                      clearance=0.2,removestrings=removestrings,                                      marginsubset=\"lymphocytes\",                                      gatesubset=\"live\", gatelines=FALSE,                                      reference=NULL, returntype=\"patchwork\",                                      outpath=StorageLocation) SingleUnityPlot #> $`1` Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] KeptMarkers #>  [1] \"BUV395-A\"          \"BUV496-A\"          \"BUV563-A\"          #>  [4] \"BUV615-A\"          \"BUV661-A\"          \"BUV737-A\"          #>  [7] \"BUV805-A\"          \"BV421-A\"           \"Pacific Blue-A\"    #> [10] \"BV480-A\"           \"BV510-A\"           \"BV605-A\"           #> [13] \"BV650-A\"           \"BV711-A\"           \"BV750-A\"           #> [16] \"BV786-A\"           \"Alexa Fluor 488-A\" \"Spark Blue 550-A\"  #> [19] \"PerCP-Cy5.5-A\"     \"PE-A\"              \"PE-Dazzle594-A\"    #> [22] \"PE-Cy5-A\"          \"PE-Vio770-A\"       \"APC-A\"             #> [25] \"Alexa Fluor 647-A\" \"APC-R700-A\"        \"Zombie NIR-A\"      #> [28] \"APC-Fire 750-A\"    \"APC-Fire 810-A\" MultipleUnityPlots <- map(.x=KeptMarkers[c(1:6, 8:10)], .f=Utility_UnityPlot,                           y=\"BUV805-A\", GatingSet=UnmixedGatingSet,                           sample.name=\"GROUPNAME\", bins=100,clearance=0.2,                           removestrings=removestrings, marginsubset=\"lymphocytes\",                           gatesubset=\"live\", gatelines=FALSE, reference=NULL,                           returntype=\"patchwork\", outpath=StorageLocation) #> [[1]] #> [[1]]$`1` #>  #>  #> [[2]] #> [[2]]$`1`"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_thirdcolor","dir":"Articles","previous_headings":"Creating a GatingSet for Unmixed .fcs files","what":"Utility_ThirdColor","title":"Data Visualization","text":"Similar visualization functions, Utility_ThirdColor() plots data specified GatingSet subset given X Y axis-markers. overlay color additional marker, allowing identification cells. Utility_ThirdColor() three plotting modes called within splitpoint argument. “Continuous” specified, takes two colors forms color gradient lowest highest values specified parameter specified zaxis argument.  categorical column exist .fcs file specified zaxis, splitpoint = “Categorical” can specified. internally convert zaxis column factor. list equivalent name(s) given FactorNames. turn filtered assigned color.  third option “splitpoint” dichotomize continuous marker expression given value (either raw MFI biexponential transformed) positive negative cells. shade cells accordingly.  provide multiple filtering arguments Utility_ThirdColorPlots(), data.frame can provided splitpoint argument. composed two columns, “Fluorophore” “Splitpoint”, specified arguments present rows. data.frame detected, Utility_ThirdColorPlots() iterate rows find gating argument, returning remaining cells greater values listed marker.  Utility_ThirdColorPlots can also used combination Coereba packages GatingCutoff estimates allow specimen specific split-points specified markers, using GatingCutoff csv file. particularly useful non-normalized specimens batch effects present. provide flexibility analysis, Utility_ThirdColorPlots() returns ggplot objects. turn can edited, list passed arranged using Utility_Patchwork() .pdf desired layout.","code":"SinglePlot <-  Utility_ThirdColorPlots(x=UnmixedGatingSet[1], subset = \"live\",                                        xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",                                        zaxis =\"BUV805-A\", splitpoint = \"continuous\",                                        sample.name = \"GROUPNAME\",                                        removestrings = c(\"DTR\", \".fcs\"),                                        thecolor = \"blue\") #> Splitpoint is a continuous  AllPlot <- map(.x=UnmixedGatingSet, .f=Utility_ThirdColorPlots, subset = \"live\",                xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",  zaxis =\"BUV805-A\",                splitpoint = \"continuous\", sample.name = \"GROUPNAME\",                removestrings = c(\"DTR\", \".fcs\"), thecolor = \"blue\") #> Splitpoint is a continuous #> Splitpoint is a continuous #> Splitpoint is a continuous #> Splitpoint is a continuous  SinglePlot ColorTheseFactors <- c(\"1\", \"4\") #Due to how .fcs files often save factors as numeric values.  SinglePlot <-  Utility_ThirdColorPlots(x=UnmixedGatingSet[1], subset = \"live\",                                        xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",                                        zaxis =\"BUV805-A\", splitpoint = \"120\",                                        sample.name = \"GROUPNAME\",                                        removestrings = c(\"DTR\", \".fcs\"),                                        FactorNames = ColorTheseFactors,                                        thecolor = \"orange\")  AllPlot <- map(.x=UnmixedGatingSet, .f=Utility_ThirdColorPlots, subset = \"live\",                xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",  zaxis =\"BUV805-A\",                splitpoint = \"130\", sample.name = \"GROUPNAME\",                removestrings = c(\"DTR\", \".fcs\"), FactorNames = ColorTheseFactors,                thecolor = \"orange\")  SinglePlot SinglePlot <-  Utility_ThirdColorPlots(x=UnmixedGatingSet[1], subset = \"live\",                                        xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",                                        zaxis =\"BUV805-A\", splitpoint = \"120\",                                        sample.name = \"GROUPNAME\",                                        removestrings = c(\"DTR\", \".fcs\"),                                        thecolor = \"orange\")  SinglePlot AllPlot <- map(.x=UnmixedGatingSet, .f=Utility_ThirdColorPlots, subset = \"live\",                xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",  zaxis =\"BUV805-A\",                splitpoint = \"130\", sample.name = \"GROUPNAME\",                removestrings = c(\"DTR\", \".fcs\"), thecolor = \"orange\") FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") CSVLocation <- file.path(path = FileLocation, pattern = 'ThirdColorDataFrame.csv') ThirdColorArguments <- read.csv(CSVLocation) gt(ThirdColorArguments) SinglePlot <-  Utility_ThirdColorPlots(x=UnmixedGatingSet[1], subset = \"live\",                                        xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",                                        zaxis =NULL, splitpoint = ThirdColorArguments,                                        sample.name = \"GROUPNAME\",                                        removestrings = c(\"DTR\", \".fcs\"),                                        thecolor = \"orange\") #> Splitpoint is a Dataframe  MultiplePlot <- map(.x=UnmixedGatingSet, .f=Utility_ThirdColorPlots, subset = \"live\",                     xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",  zaxis =NULL,                     splitpoint = ThirdColorArguments, sample.name = \"GROUPNAME\",                     removestrings = c(\"DTR\", \".fcs\"), thecolor = \"orange\") #> Splitpoint is a Dataframe #> Splitpoint is a Dataframe #> Splitpoint is a Dataframe #> Splitpoint is a Dataframe  SinglePlot"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_densityoverlay","dir":"Articles","previous_headings":"Creating a GatingSet for Unmixed .fcs files","what":"Utility_DensityOverlay","title":"Data Visualization","text":"function Utility_DensityOverlay() wrapper function incorporating elements underlying ggplot2 geom_density() function. ’s use particularly useful working GatingSet multiple specimens comparing across individuals. use Utility_DensityOverlay() Utility_RidgePlots() fullest extent, need create additional factor variables specimen append GatingSet’s pData. can called use axis, color fill arguments function. can find examples local functions can edit particular data extract variables interest append pData. factor variables need, can bind columns together, assign back GatingSet.","code":"Metadata <- pData(UnmixedGatingSet) Metadata #>                                                                  name #> INF071_Ctrl_Tetramer_Unmixed.fcs     INF071_Ctrl_Tetramer_Unmixed.fcs #> INF149_Ctrl_Tetramer_Unmixed.fcs     INF149_Ctrl_Tetramer_Unmixed.fcs #> INF179_Ctrl_Tetramer_Unmixed.fcs     INF179_Ctrl_Tetramer_Unmixed.fcs #> ND050_15_Ctrl_Tetramer_Unmixed.fcs ND050_15_Ctrl_Tetramer_Unmixed.fcs  NameYoink <- function(x){ pattern <- \"(INF|ND)\\\\d{3}\" result <- stringr::str_extract(x, pattern) result <- data.frame(result) colnames(result)[1] <- \"specimen\" result$specimen <- factor(result$specimen) return(result) }  ConditionYoink <- function(x){ pattern <- \"Ctrl|PMA\" result <- stringr::str_extract(x, pattern) result <- data.frame(result) colnames(result)[1] <- \"condition\" result$condition <- factor(result$condition) return(result) }  NormalizedYoink <- function(x){ result <- stringr::str_detect(x, \"Norm\") result <- data.frame(result) colnames(result)[1] <- \"normalized\" result$normalized <- factor(result$normalized) return(result) } pd <- pData(UnmixedGatingSet) pa <- pd %>% select(`name`) %>% pull() Specimen <- map(pa, .f=NameYoink) %>% bind_rows() Specimen #>   specimen #> 1   INF071 #> 2   INF149 #> 3   INF179 #> 4    ND050 Condition <- map(pa, .f=ConditionYoink) %>% bind_rows Condition #>   condition #> 1      Ctrl #> 2      Ctrl #> 3      Ctrl #> 4      Ctrl pd <- cbind(pd, Specimen, Condition) pData(UnmixedGatingSet) <- pd pData(UnmixedGatingSet) #>                                                                  name specimen #> INF071_Ctrl_Tetramer_Unmixed.fcs     INF071_Ctrl_Tetramer_Unmixed.fcs   INF071 #> INF149_Ctrl_Tetramer_Unmixed.fcs     INF149_Ctrl_Tetramer_Unmixed.fcs   INF149 #> INF179_Ctrl_Tetramer_Unmixed.fcs     INF179_Ctrl_Tetramer_Unmixed.fcs   INF179 #> ND050_15_Ctrl_Tetramer_Unmixed.fcs ND050_15_Ctrl_Tetramer_Unmixed.fcs    ND050 #>                                    condition #> INF071_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> INF149_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> INF179_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> ND050_15_Ctrl_Tetramer_Unmixed.fcs      Ctrl StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  pData(UnmixedGatingSet) #>                                                                  name specimen #> INF071_Ctrl_Tetramer_Unmixed.fcs     INF071_Ctrl_Tetramer_Unmixed.fcs   INF071 #> INF149_Ctrl_Tetramer_Unmixed.fcs     INF149_Ctrl_Tetramer_Unmixed.fcs   INF149 #> INF179_Ctrl_Tetramer_Unmixed.fcs     INF179_Ctrl_Tetramer_Unmixed.fcs   INF179 #> ND050_15_Ctrl_Tetramer_Unmixed.fcs ND050_15_Ctrl_Tetramer_Unmixed.fcs    ND050 #>                                    condition #> INF071_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> INF149_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> INF179_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> ND050_15_Ctrl_Tetramer_Unmixed.fcs      Ctrl #colnames(UnmixedGatingSet) Plot <- Utility_DensityOverlay(gs=UnmixedGatingSet, subset=\"lymphocytes\", TheX=\"APC-Fire 810-A\",                                TheFill=\"specimen\", returntype=\"plots\",                                outpath=StorageLocation, filename=\"CD4_Expression\")  plotly::ggplotly(Plot[[1]])"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"utility_ridgeplots","dir":"Articles","previous_headings":"Creating a GatingSet for Unmixed .fcs files","what":"Utility_RidgePlots","title":"Data Visualization","text":"function Utility_RidgePlots() leverages ggplot2 ggridges packages evaluate marker expression across specimens, provides additional functionality compared Utility_DensityOverlay() can generate specific RidgePlot interest providing name particular fluorophore TheX argument. Alternatively, can leave generate RidgePlots markers. functions, uses Utility_Patchwork() take arguments layout.","code":"StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  pData(UnmixedGatingSet) #>                                                                  name specimen #> INF071_Ctrl_Tetramer_Unmixed.fcs     INF071_Ctrl_Tetramer_Unmixed.fcs   INF071 #> INF149_Ctrl_Tetramer_Unmixed.fcs     INF149_Ctrl_Tetramer_Unmixed.fcs   INF149 #> INF179_Ctrl_Tetramer_Unmixed.fcs     INF179_Ctrl_Tetramer_Unmixed.fcs   INF179 #> ND050_15_Ctrl_Tetramer_Unmixed.fcs ND050_15_Ctrl_Tetramer_Unmixed.fcs    ND050 #>                                    condition #> INF071_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> INF149_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> INF179_Ctrl_Tetramer_Unmixed.fcs        Ctrl #> ND050_15_Ctrl_Tetramer_Unmixed.fcs      Ctrl #colnames(UnmixedGatingSet)  SinglePlot <- Utility_RidgePlots(gs=UnmixedGatingSet, subset=\"live\", TheFill=\"condition\",                            TheX = \"APC-Fire 810-A\", TheY=\"specimen\", returntype=\"plots\",                            outpath=StorageLocation, filename=\"RidgePlot_Condition\")  SinglePlot[[1]] Plot <- Utility_RidgePlots(gs=UnmixedGatingSet, subset=\"live\", TheFill=\"condition\",                            TheY=\"specimen\", returntype=\"patchwork\",                            outpath=StorageLocation, filename=\"RidgePlot_Condition\") Plot[1:2] #> $`1` #>  #> $`2`"},{"path":"https://davidrach.github.io/Luciernaga/articles/DataVisualization.html","id":"future-development","dir":"Articles","previous_headings":"","what":"Future Development","title":"Data Visualization","text":"combination purrr package functions, ’s possible extend visualization capacity many scenarios similar Utility_UnityPlots Utility_NxNPlots. community usefulness demonstrated, become integrated later versions package. Reach via GitHub suggested improvements.","code":"#> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_United States.utf8  #> [2] LC_CTYPE=English_United States.utf8    #> [3] LC_MONETARY=English_United States.utf8 #> [4] LC_NUMERIC=C                           #> [5] LC_TIME=English_United States.utf8     #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] htmltools_0.5.8.1    plotly_4.10.4        gt_0.11.1            #>  [4] stringr_1.5.1        purrr_1.0.2          dplyr_1.1.4          #>  [7] data.table_1.16.2    ggcyto_1.32.0        ncdfFlow_2.50.0      #> [10] BH_1.84.0-0          ggplot2_3.5.1        openCyto_2.16.1      #> [13] flowWorkspace_4.16.0 flowCore_2.16.0      Luciernaga_0.99.2    #> [16] BiocStyle_2.32.1     #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1    viridisLite_0.4.2   farver_2.1.2        #>  [4] viridis_0.6.5       fastmap_1.2.0       lazyeval_0.2.2      #>  [7] XML_3.99-0.17       digest_0.6.37       timechange_0.3.0    #> [10] lifecycle_1.0.4     magrittr_2.0.3      compiler_4.4.1      #> [13] rlang_1.1.4         sass_0.4.9          tools_4.4.1         #> [16] utf8_1.2.4          yaml_2.3.10         figpatch_0.2        #> [19] knitr_1.48          labeling_0.4.3      htmlwidgets_1.6.4   #> [22] plyr_1.8.9          xml2_1.3.6          RColorBrewer_1.1-3  #> [25] Rtsne_0.17          withr_3.0.1         RProtoBufLib_2.16.0 #> [28] BiocGenerics_0.50.0 desc_1.4.3          grid_4.4.1          #> [31] stats4_4.4.1        fansi_1.0.6         colorspace_2.1-1    #> [34] progressr_0.15.1    scales_1.3.0        ggridges_0.5.6      #> [37] cli_3.6.3           rmarkdown_2.28      ragg_1.3.3          #> [40] generics_0.1.3      rstudioapi_0.17.0   httr_1.4.7          #> [43] reshape2_1.4.4      cachem_1.1.0        zlibbioc_1.50.0     #> [46] parallel_4.4.1      BiocManager_1.30.25 matrixStats_1.4.1   #> [49] vctrs_0.6.5         Matrix_1.7-0        jsonlite_1.8.9      #> [52] lsa_0.73.3          cytolib_2.16.0      bookdown_0.41       #> [55] patchwork_1.3.0     S4Vectors_0.42.1    RBGL_1.80.0         #> [58] Rgraphviz_2.48.0    crosstalk_1.2.1     systemfonts_1.1.0   #> [61] jquerylib_0.1.4     hexbin_1.28.4       tidyr_1.3.1         #> [64] glue_1.8.0          pkgdown_2.1.1       uwot_0.2.2          #> [67] stringi_1.8.4       lubridate_1.9.3     gtable_0.3.5        #> [70] munsell_0.5.1       tibble_3.2.1        pillar_1.9.0        #> [73] graph_1.82.0        R6_2.5.1            textshaping_0.4.0   #> [76] evaluate_1.0.1      lattice_0.22-6      Biobase_2.64.0      #> [79] highr_0.11          SnowballC_0.7.1     bslib_0.8.0         #> [82] Rcpp_1.0.13         flowClust_3.42.0    gridExtra_2.3       #> [85] xfun_0.48           zoo_1.8-12          fs_1.6.4            #> [88] pkgconfig_2.0.3"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Dimensionality Visualization","text":"Spectral Flow Cytometry data consist many acquired cellular events, increasing number markers. Many unsupervised analysis approaches rely clustering markers basis median fluorescent intensity. common workflow step project cells onto dimensionality visualized space using one various available algorithms. can provide useful information, agree Pachter labs points Specious Art Spatial Genomics paper highlighting ease overinterpreting may sheer artefact noise. Similarly, dimensionality visualization works unmixed files, well novel applications addressing unstained samples still raw form. enable characterization actually ends islands (whether brightness, unique signature, random noise) implemented dimensionality visualization frequently used algorithms facilitate exploration context paper. useful, like reiterate, wrappers exploratory/convenience purposes , please refer original packages specialized argument implementation. may modify , don’t build R package around implementation. Instead, take advantage copyleft license nature free open-source software, fork , modify include package.","code":""},{"path":[]},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"load-libraries","dir":"Articles","previous_headings":"Getting Started","what":"Load Libraries","title":"Dimensionality Visualization","text":"","code":"library(Luciernaga) library(flowCore) library(flowWorkspace) library(openCyto) library(ggcyto)   library(data.table) library(dplyr) library(purrr)  library(stringr) library(ggplot2) library(gt) library(plotly) library(htmltools)"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"create-a-gatingset","dir":"Articles","previous_headings":"Getting Started","what":"Create a GatingSet","title":"Dimensionality Visualization","text":"","code":"File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) head(FCS_Files[10:30], 5) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(   \"Beads\", UnstainedFCSFiles)] MyCytoSet <- load_cytoset_from_fcs(UnstainedCells,                                    truncate_max_range = FALSE,                                    transform = FALSE) MyCytoSet MyGatingSet <- GatingSet(MyCytoSet) MyGatingSet FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyGates <- fread(file.path(path = FileLocation,                            pattern = 'Gates.csv')) gt(MyGates) MyGatingTemplate <- gatingTemplate(MyGates) gt_gating(MyGatingTemplate, MyGatingSet) MyGatingSet[[1]]"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"creating-a-gating-set-unmixed","dir":"Articles","previous_headings":"Getting Started","what":"Creating a Gating Set Unmixed","title":"Dimensionality Visualization","text":"","code":"Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedCytoSet <- load_cytoset_from_fcs(Unmixed_FullStained,                                         truncate_max_range = FALSE,                                         transform = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) UnmixedGatingSet Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(   \"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)]  MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,                                                maxValue = 1000000,                                                pos = 4.5, neg = 0,                                                widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- transform(UnmixedGatingSet, TransformList)  FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation,                                 pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) gt_gating(UnmixedGating, UnmixedGatingSet)"},{"path":[]},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"utility_colappend","dir":"Articles","previous_headings":"Helper Functions","what":"Utility_ColAppend","title":"Dimensionality Visualization","text":"Originally internal function supporting dimensionality visualization functions, Utility_ColAppend() appends new data.frame columns .fcs file contains number rows new marker/parameter. , feed function cytoset object, data.frame flowframe exprs data, data.frame new data columns. Utility_ColAppend() adds appropriate parameters returns flowframe object new parameters added. Since highly useful us, mentioning case need append additional information/alternate dimensionality visualizations .fcs files. tried keep return .fcs file compliant ease use software applications, expect bugs arise outside internal function purpose, encounter bug function, please report via GitHub. anyone wanting continue create .fcs file flowframe, example code provided :","code":"ff <- gs_pop_get_data(UnmixedGatingSet[1], subsets=\"live\",                       inverse.transform = FALSE) BeforeParameters <- ff[[1, returnType = \"flowFrame\"]] BeforeParameters  # Main Expression Data From Original MainDataFrame <- as.data.frame(exprs(ff[[1]]), check.names = FALSE)  # Creating Artificial Data To Mimic Metadata to Append NewData <- MainDataFrame %>% mutate(   ExposureStatus = sample(1:3, n(), replace = TRUE))  NewData <- NewData %>% select(ExposureStatus)  AfterParameters <- Utility_ColAppend(ff=ff, DF=MainDataFrame,                                      columnframe = NewData) AfterParameters outpath <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") Name <- flowWorkspace::keyword(AfterParameters, \"GROUPNAME\") TheFileName <- paste0(Name, \"_Appended.fcs\") fileSpot <- file.path(outpath, TheFileName) fileSpot # flowCore::write.FCS(AfterParameters, filename = fileSpot, delimiter=\"#\")"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"utility_downsample","dir":"Articles","previous_headings":"Helper Functions","what":"Utility_Downsample","title":"Dimensionality Visualization","text":"many dimensionality visualization protocols, ’s recommended downsample specimen roughly similar representation final plot. can helpful specimens 10,000 cells, others million cells, encounters issues specimens millions samples just 200 cells. Consequently, deciding whether -sample decision need make justify. implemented Utility_Downsample() facilitate process.","code":"# plot(UnmixedGatingSet) CountData <- gs_pop_get_count_fast(UnmixedGatingSet) CountData %>% filter(Population %in% \"/singletsFSC/singletsSSC/singletsSSCB/nonDebris/lymphocytes/live\") %>%   select(name, Count) #Single Sample Returned as a data.frame  removestrings <- c(\"DTR_2023_ILT_15_Tetramers-\",                    \"-Ctrl_Tetramer_Unmixed\", \".fcs\") SingleSample <- Utility_Downsample(UnmixedGatingSet[1],                                    sample.name = \"GROUPNAME\",                                    removestrings=removestrings,                                    subsets = \"live\", subsample = 2500,                                    internal = FALSE, export = FALSE,                                    inverse.transform=TRUE) SingleSample # Multiple Samples  MultipleSamples <- map(.x=UnmixedGatingSet, .f=Utility_Downsample,                        sample.name =  \"GROUPNAME\", removestrings=removestrings,                        subsets = \"live\", subsample = 2500, internal = FALSE,                        export = FALSE, inverse.transform=TRUE) MultipleSamples"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"utility_concatinate","dir":"Articles","previous_headings":"Helper Functions","what":"Utility_Concatinate","title":"Dimensionality Visualization","text":"common feature dimensionality visualization approaches cytometry data concatenating different samples single file. sometimes includes first downsampling equivalent number cells particular cell subset, overly influence result basis single cell subset. Similarly, can done cells normalized using one various algorithms. facilitate process, implemented Utility_Concatinate() function. Unlike approaches, implemented GatingSet level, allowing merge cells gating node interest active memory. final file can saved ’s .fcs file. attempted retain FCS format, can used across software without issues. encounter issues, please reach !","code":"removestrings <- c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  #Return Types: \"data.frame\", \"flow.frame\", \"fcs\" ConcatinatedReturn <- Utility_Concatinate(gs=UnmixedGatingSet,                                           sample.name = \"GROUPNAME\",                                           removestrings=removestrings,                                           subsets=\"live\", subsample = 2000,                                           ReturnType = \"flow.frame\",                                           newName = \"MyConcatinatedFile\",                                           outpath = StorageLocation,                                           export = FALSE, inverse.transform=TRUE)  ConcatinatedReturn"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"utility_tsne","dir":"Articles","previous_headings":"Helper Functions","what":"Utility_tSNE","title":"Dimensionality Visualization","text":"Now GatingSet containing raw .fcs files, let’s figure markers/parameters present, save detectors “KeptMarkers”. , let’s identify unstained file within GatingSet. run tSNE provided data lymphocyte gating level, using Utility_tSNE() function. function ability return .fcs file (typically use). purpose vignette, returns FlowCore flowframe. use visualization functions work GatingSet objects, transform cytoframe, add new cytoset convert gating set. Finally visualize using Utility_ThirdColorPlots() can now repeat previous step, using Unmixed file GatingSet. process similar, identifying markers present .fcs file (fluorophores case), selecting markers interest, passing Utility_tSNE() function.","code":"Markers <- colnames(MyCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] KeptMarkers  pData(MyGatingSet[[3]]) %>% pull(name) nrow(MyGatingSet[[3]]) plot(MyGatingSet)  tSNE_Output <- Utility_tSNE(x=MyGatingSet[[3]], sample.name = \"GUID\",                             removestrings=c(\"_Cells\", \".fcs\"),                             subset = \"nonDebris\", columns=KeptMarkers,                             export=FALSE)  cf <- flowFrame_to_cytoframe(tSNE_Output) TheNewCS <- cytoset() cs_add_cytoframe(cs=TheNewCS, sn=\"Test\", cf=cf) NewGatingSet <- GatingSet(TheNewCS)  TSNEPlot <-  Utility_ThirdColorPlots(x=NewGatingSet[[1]], subset = \"root\",                                      xaxis=\"tSNE_1\", yaxis = \"tSNE_2\",                                      zaxis =\"B3-A\", splitpoint = \"continuous\",                                      sample.name = \"TUBENAME\",                                      removestrings = c(\"Dimensionality\", \".fcs\"),                                      thecolor = \"orange\", tilesize = 0.6)  TSNEPlot Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] SubsetMarkers <- c(\"BUV496-A\", \"BUV805-A\", \"Pacific Blue-A\", \"BV711-A\",                        \"BV786-A\", \"Spark Blue 550-A\", \"PE-A\", \"APC-Fire 750-A\")  pData(UnmixedGatingSet[[3]]) %>% pull(name) nrow(UnmixedGatingSet[[3]]) plot(UnmixedGatingSet)  removestrings <- c(\".fcs\")  tSNE_Output <- Utility_tSNE(x=UnmixedGatingSet[[3]], sample.name = \"TUBENAME\", removestrings=removestrings, subset = \"live\", columns=SubsetMarkers, export=FALSE)  #BUGGED: flowCore_$P42Rmax not contained in Text section!  cf <- flowFrame_to_cytoframe(tSNE_Output) TheNewCS <- cytoset() cs_add_cytoframe(cs=TheNewCS, sn=\"Test\", cf=cf) NewGatingSet <- GatingSet(TheNewCS)  Sample_TSNEPlot <-  Utility_ThirdColorPlots(x=NewGatingSet[[1]], subset = \"root\",                                             xaxis=\"tSNE_1\", yaxis = \"tSNE_2\",                                             zaxis =\"Spark Blue 550-A\",                                             splitpoint = \"continuous\",                                             sample.name = \"GROUPNAME\",                                             removestrings = removestrings,                                              thecolor = \"orange\", tilesize = 0.6)  Sample_TSNEPlot"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"utility_umap","dir":"Articles","previous_headings":"Helper Functions","what":"Utility_UMAP","title":"Dimensionality Visualization","text":"Now GatingSet containing raw .fcs files, let’s figure markers/parameters present, save detectors “KeptMarkers”. , let’s identify unstained file within GatingSet. run tSNE provided data lymphocyte gating level, using Utility_UMAP() function. function ability return .fcs file (typically use). purpose vignette, returns FlowCore flowframe. use visualization functions work GatingSet objects, transform cytoframe, add new cytoset convert gating set. Finally visualize using Utility_ThirdColorPlots() can now repeat previous step, using Unmixed file GatingSet. process similar, identifying markers present .fcs file (fluorophores case), selecting markers interest, passing Utility_UMAP() function.","code":"Markers <- colnames(MyCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] KeptMarkers  pData(MyGatingSet[[3]]) %>% pull(name) nrow(MyGatingSet[[3]]) plot(MyGatingSet)  UMAP_Output <- Utility_UMAP(x=MyGatingSet[[3]], sample.name=\"GUID\",                             removestrings=c(\"_Cells\", \".fcs\"),                              subset=\"nonDebris\", columns=KeptMarkers,                             export=FALSE)  cf <- flowFrame_to_cytoframe(UMAP_Output) TheNewCS <- cytoset() cs_add_cytoframe(cs=TheNewCS, sn=\"Test\", cf=cf) NewGatingSet <- GatingSet(TheNewCS)  UMAPPlot <-  Utility_ThirdColorPlots(x=NewGatingSet[[1]], subset = \"root\",                                      xaxis=\"UMAP_1\", yaxis = \"UMAP_2\",                                       zaxis =\"B3-A\", splitpoint = \"continuous\",                                      sample.name = \"TUBENAME\",                                      removestrings = c(\"Dimensionality\", \".fcs\"),                                      thecolor = \"orange\", tilesize = 0.3)  UMAPPlot Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] SubsetMarkers <- c(\"BUV496-A\", \"BUV805-A\", \"Pacific Blue-A\", \"BV711-A\",                        \"BV786-A\", \"Spark Blue 550-A\", \"PE-A\", \"APC-Fire 750-A\")  pData(UnmixedGatingSet[[3]]) %>% pull(name) nrow(UnmixedGatingSet[[3]]) plot(UnmixedGatingSet)  removestrings <- c(\".fcs\")  UMAP_Output <- Utility_UMAP(x=UnmixedGatingSet[[3]], sample.name=\"GUID\", removestrings=removestrings, subset=\"live\", columns=SubsetMarkers, export=FALSE)  cf <- flowFrame_to_cytoframe(UMAP_Output) TheNewCS <- cytoset() cs_add_cytoframe(cs=TheNewCS, sn=\"Test\", cf=cf) NewGatingSet <- GatingSet(TheNewCS)  Sample_UMAPPlot <-  Utility_ThirdColorPlots(x=NewGatingSet[[1]], subset = \"root\",                                             xaxis=\"UMAP_1\", yaxis = \"UMAP_2\",                                             zaxis =\"Spark Blue 550-A\",                                             splitpoint = \"continuous\",                                             sample.name = \"GROUPNAME\",                                             removestrings = c(\"Dimensionality\", \".fcs\"),                                             thecolor = \"orange\", tilesize = 0.3)  Sample_UMAPPlot"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"utility_pacmap","dir":"Articles","previous_headings":"Helper Functions","what":"Utility_PaCMAP","title":"Dimensionality Visualization","text":"Unlike dimensionality visualization algorithms implemented R, PaCMAP PHATE primarily implemented Python. Utilizing basilisk package, implement method facilitate plot generation isolated within Luciernaga environment. , need install either devel WithPython branches downloading GitHub. Repeating similar steps tSNE UMAP examples raw unmixed data:","code":"Markers <- colnames(MyCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] KeptMarkers  pData(MyGatingSet[[3]]) %>% pull(name) nrow(MyGatingSet[[3]]) plot(MyGatingSet)  PaCMAP_Output <- Utility_PaCMAP(x=MyGatingSet[[3]], sample.name=\"GUID\",                             removestrings=c(\"_Cells\", \".fcs\"),                              subset=\"nonDebris\", columns=KeptMarkers,                             export=FALSE)  cf <- flowFrame_to_cytoframe(PaCMAP_Output) TheNewCS <- cytoset() cs_add_cytoframe(cs=TheNewCS, sn=\"Test\", cf=cf) NewGatingSet <- GatingSet(TheNewCS)  PaCMAPPlot <-  Utility_ThirdColorPlots(x=NewGatingSet[[1]], subset = \"root\",                                      xaxis=\"PaCMAP_1\", yaxis = \"PaCMAP_2\",                                       zaxis =\"B3-A\", splitpoint = \"continuous\",                                      sample.name = \"TUBENAME\",                                      removestrings = c(\"Dimensionality\", \".fcs\"),                                      thecolor = \"orange\", tilesize = 0.3)  PaCMAPPlot Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] SubsetMarkers <- c(\"BUV496-A\", \"BUV805-A\", \"Pacific Blue-A\", \"BV711-A\",                        \"BV786-A\", \"Spark Blue 550-A\", \"PE-A\", \"APC-Fire 750-A\")  pData(UnmixedGatingSet[[3]]) %>% pull(name) nrow(UnmixedGatingSet[[3]]) plot(UnmixedGatingSet)  removestrings <- c(\".fcs\")  PaCMAP_Output <- Utility_PaCMAP(x=UnmixedGatingSet[[3]], sample.name=\"GUID\",                                removestrings=removestrings, subset=\"live\",                               columns=SubsetMarkers, export=FALSE)  cf <- flowFrame_to_cytoframe(PaCMAP_Output) TheNewCS <- cytoset() cs_add_cytoframe(cs=TheNewCS, sn=\"Test\", cf=cf) NewGatingSet <- GatingSet(TheNewCS)  Sample_PaCMAPPlot <-  Utility_ThirdColorPlots(x=NewGatingSet[[1]], subset = \"root\",                                             xaxis=\"PaCMAP_1\", yaxis = \"PaCMAP_2\",                                             zaxis =\"Spark Blue 550-A\",                                             splitpoint = \"continuous\",                                             sample.name = \"GROUPNAME\",                                             removestrings = c(\"Dimensionality\", \".fcs\"),                                             thecolor = \"orange\", tilesize = 0.3)  Sample_PaCMAPPlot"},{"path":"https://davidrach.github.io/Luciernaga/articles/DimensionalityVisualization.html","id":"utility_phate","dir":"Articles","previous_headings":"Helper Functions","what":"Utility_PHATE","title":"Dimensionality Visualization","text":"similarly PHATE, downsampling brevity:","code":"Markers <- colnames(MyCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] KeptMarkers  pData(MyGatingSet[[3]]) %>% pull(name) nrow(MyGatingSet[[3]]) plot(MyGatingSet)  Phate_Output <- Utility_Phate(x=MyGatingSet[[3]], sample.name=\"GUID\",                             removestrings=c(\"_Cells\", \".fcs\"),                              subset=\"nonDebris\", subsample=15000,                             columns=KeptMarkers,                             export=FALSE)  cf <- flowFrame_to_cytoframe(Phate_Output) TheNewCS <- cytoset() cs_add_cytoframe(cs=TheNewCS, sn=\"Test\", cf=cf) NewGatingSet <- GatingSet(TheNewCS)  PhatePlot <-  Utility_ThirdColorPlots(x=NewGatingSet[[1]], subset = \"root\",                                      xaxis=\"Phate_1\", yaxis = \"Phate_2\",                                       zaxis =\"B3-A\", splitpoint = \"continuous\",                                      sample.name = \"TUBENAME\",                                      removestrings = c(\"Dimensionality\", \".fcs\"),                                      thecolor = \"orange\", tilesize = 0.0001)  PhatePlot Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] SubsetMarkers <- c(\"BUV496-A\", \"BUV805-A\", \"Pacific Blue-A\", \"BV711-A\",                        \"BV786-A\", \"Spark Blue 550-A\", \"PE-A\", \"APC-Fire 750-A\")  pData(UnmixedGatingSet[[3]]) %>% pull(name) nrow(UnmixedGatingSet[[3]]) plot(UnmixedGatingSet)  removestrings <- c(\".fcs\")  Phate_Output <- Utility_Phate(x=UnmixedGatingSet[[3]], sample.name=\"GUID\",                                removestrings=removestrings, subset=\"live\",                               subsample=5000,                                columns=SubsetMarkers, export=FALSE)  cf <- flowFrame_to_cytoframe(Phate_Output) TheNewCS <- cytoset() cs_add_cytoframe(cs=TheNewCS, sn=\"Test\", cf=cf) NewGatingSet <- GatingSet(TheNewCS)  Sample_PhatePlot <-  Utility_ThirdColorPlots(x=NewGatingSet[[1]], subset = \"root\",                                             xaxis=\"Phate_1\", yaxis = \"Phate_2\",                                             zaxis =\"Spark Blue 550-A\",                                             splitpoint = \"continuous\",                                             sample.name = \"GROUPNAME\",                                             removestrings = c(\"Dimensionality\", \".fcs\"),                                             thecolor = \"orange\", tilesize = 0.0001)  Sample_PhatePlot"},{"path":[]},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fluorescence Signatures","text":"spectral flow cytometry (SFC), good quality unmixing controls (single color unstained) critical ability take full-stained sample able decipher individual cell basis fluorophore present relative amount. single color unmixing control combination staining fluorophore underlying autofluorescence. autofluorescence subtracted, leftover signal distinct enough differentiated fluorophores reference matrix unmixing using ordinary least squares effective. assumptions broken, end uncertainty calculation, becomes visible form unmixing errors. However, despite importance foundational final result, limited tools can address quality unmixing controls beyond trial errors. specific vignette addresses Luciernaga functions focused characterizing fluorescence signatures individual .fcs files. work unstained .fcs files subtraction takes place, well single color .fcs files, autofluorescent background (either internally externally-derived) first subtracted. outputs can either data.frame format can used report generation, purified .fcs made populations cells sharing normalized signature. vignette cover pre-processing report generation components process. Unmixing steps using resulting files, please refer unmixing vignette. hope allows better understanding fluorophore signature brightness impacts typically ordinal least squares methods used unmix full-stained samples.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Fluorescence Signatures","text":"use following Luciernaga functions, working raw .FCS files retain detector information (ex. UV7-, V7-, B3-, etc.). bring files GatingSets comprising unstained single color unmixing controls, divided whether reference controls cells beads ease explanation.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"install-required-packages-libraries","dir":"Articles","previous_headings":"Getting Started","what":"Install Required Packages Libraries","title":"Fluorescence Signatures","text":"Luciernaga relies infrastructure provided cytometry R packages like flowCore flowWorkspace available Bioconductor. also relies tidyverse packages available via CRAN. important make sure following packages installed computer beginning. new R, example provided : packages installed, make sure contents accessible calling via library:","code":"# To Install a CRAN Package: install.packages(\"dplyr\") install.packages(\"BiocManager\")  # To Install a Bioconductor Package: BiocManager::install(\"flowCore\") library(Luciernaga) library(flowCore) library(flowWorkspace) library(openCyto) library(ggcyto)   library(data.table) library(dplyr) library(purrr)  library(stringr) library(ggplot2) library(gt) library(plotly) library(htmltools)"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"locating--fcs-files","dir":"Articles","previous_headings":"Getting Started","what":"Locating .fcs files","title":"Fluorescence Signatures","text":"get started, first need provide location computer .fcs files interest stored. example author provided can modified user desired computer folder. vignette, using several small .fcs files stored Luciernaga’s extdata folder use examples. can see, lot different .fcs files used different examples different vignettes, selectively filtering list get specific files need.","code":"File_Location <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\",                            \"TodaysExperiment\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) head(FCS_Files[10:30], 5) #> [1] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/21_Before.fcs\" #> [2] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/22_After.fcs\"  #> [3] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/22_Before.fcs\" #> [4] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/23_After.fcs\"  #> [5] \"C:/Users/12692/AppData/Local/R/win-library/4.4/Luciernaga/extdata/23_Before.fcs\" UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedBeads <- UnstainedFCSFiles[grep(\"Beads\", UnstainedFCSFiles)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)]  BeadFCSFiles <- FCS_Files[grep(\"Beads\", FCS_Files)] BeadSingleColors <- BeadFCSFiles[-grep(\"Unstained\", BeadFCSFiles)]  CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)]"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"creating-a-gatingset-bead-single-colors","dir":"Articles","previous_headings":"Getting Started","what":"Creating a GatingSet Bead Single Colors","title":"Fluorescence Signatures","text":"bead single color controls part 29-color SFC panel. additionally cell single color equivalents compare separate GatingSet next section. Now filtered .fcs files smaller list, can use flowWorkspace bring individual .fcs files first CytoSet object, GatingSet object can add gates : example, use openCyto package automatically gate .fcs files bead singlets. , first read example .csv file containing desired gates (can found Luciernaga’s extdata folder) using data.table package experiments, individual gates can added, removed modified match requirements .fcs files, additional details, please refer openCyto packages vignettes. Alternatively, GatingSet objects can brought directly several commercial software formats using CytoML package. Now gating information .csv file, can convert GatingTemplate, append .fcs files contained within GatingSet  finally check gate placements using Utility_GatingPlots function:","code":"MyBeadsCytoSet <- load_cytoset_from_fcs(BeadSingleColors,                                         truncate_max_range = FALSE,                                         transform = FALSE) MyBeadsCytoSet #> A cytoset with 30 samples. #>  #>   column names: #>     Time, UV1-A, UV2-A, UV3-A, UV4-A, UV5-A, UV6-A, UV7-A, UV8-A, UV9-A, UV10-A, UV11-A, UV12-A, UV13-A, UV14-A, UV15-A, UV16-A, SSC-W, SSC-H, SSC-A, V1-A, V2-A, V3-A, V4-A, V5-A, V6-A, V7-A, V8-A, V9-A, V10-A, V11-A, V12-A, V13-A, V14-A, V15-A, V16-A, FSC-W, FSC-H, FSC-A, SSC-B-W, SSC-B-H, SSC-B-A, B1-A, B2-A, B3-A, B4-A, B5-A, B6-A, B7-A, B8-A, B9-A, B10-A, B11-A, B12-A, B13-A, B14-A, YG1-A, YG2-A, YG3-A, YG4-A, YG5-A, YG6-A, YG7-A, YG8-A, YG9-A, YG10-A, R1-A, R2-A, R3-A, R4-A, R5-A, R6-A, R7-A, R8-A MyBeadsGatingSet <- GatingSet(MyBeadsCytoSet) MyBeadsGatingSet #> A GatingSet with 30 samples FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyBeadsGates <- fread(file.path(path = FileLocation,                                  pattern = 'GatesBeads.csv')) gt(MyBeadsGates) MyBeadsGatingTemplate <- gatingTemplate(MyBeadsGates) gt_gating(MyBeadsGatingTemplate, MyBeadsGatingSet) MyBeadsGatingSet[[1]] #> Sample:  CCR4_BUV615(Beads).fcs  #> GatingHierarchy with  4  gates plot(MyBeadsGatingSet) removestrings <-  c(\"(Cells)\", \".fcs\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  IndividualBeadPlot <- Utility_GatingPlots(x=MyBeadsGatingSet[[1]],                                            sample.name = \"GUID\",                                           removestrings = removestrings,                                           gtFile = MyBeadsGates,                                            DesiredGates = NULL,                                           outpath = StorageLocation,                                           returnType=\"patchwork\")  IndividualBeadPlot #> $`1` IteratedBeadPlots <- map(.x = MyBeadsGatingSet[1:3], .f = Utility_GatingPlots,                          sample.name = \"GUID\", removestrings = removestrings,                          gtFile = MyBeadsGates, DesiredGates = NULL,                          outpath = StorageLocation, returnType=\"patchwork\") IteratedBeadPlots #> [[1]] #> [[1]]$`1` #>  #>  #> [[2]] #> [[2]]$`1` #>  #>  #> [[3]] #> [[3]]$`1` #gs_pop_get_count_fast(MyBeadsGatingSet)"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"creating-a-gatingset-cell-single-colors","dir":"Articles","previous_headings":"Getting Started","what":"Creating a GatingSet Cell Single Colors","title":"Fluorescence Signatures","text":"cell single color controls part 29-color SFC panel, cell counterparts bead reference controls worked prior section. isolated list desired .fcs files start vignette, can use flowWorkspace bring individual .fcs files first CytoSet object, GatingSet object can add gates : example, use openCyto package automatically gate .fcs files lymphocyte population. , first read example .csv file containing desired gates (can found Luciernaga’s extdata folder) using data.table package experiments, individual gates can added, removed modified match requirements .fcs files, additional details, please refer openCyto packages vignettes. Alternatively, GatingSet objects can brought directly several commercial software formats using CytoML package. Now gating information .csv file, can convert GatingTemplate, append .fcs files contained within GatingSet finally check gate placements using:","code":"MyCytoSet <- load_cytoset_from_fcs(CellSingleColors,                                     truncate_max_range = FALSE,                                     transform = FALSE) MyCytoSet #> A cytoset with 30 samples. #>  #>   column names: #>     Time, UV1-A, UV2-A, UV3-A, UV4-A, UV5-A, UV6-A, UV7-A, UV8-A, UV9-A, UV10-A, UV11-A, UV12-A, UV13-A, UV14-A, UV15-A, UV16-A, SSC-W, SSC-H, SSC-A, V1-A, V2-A, V3-A, V4-A, V5-A, V6-A, V7-A, V8-A, V9-A, V10-A, V11-A, V12-A, V13-A, V14-A, V15-A, V16-A, FSC-W, FSC-H, FSC-A, SSC-B-W, SSC-B-H, SSC-B-A, B1-A, B2-A, B3-A, B4-A, B5-A, B6-A, B7-A, B8-A, B9-A, B10-A, B11-A, B12-A, B13-A, B14-A, YG1-A, YG2-A, YG3-A, YG4-A, YG5-A, YG6-A, YG7-A, YG8-A, YG9-A, YG10-A, R1-A, R2-A, R3-A, R4-A, R5-A, R6-A, R7-A, R8-A MyGatingSet <- GatingSet(MyCytoSet) MyGatingSet #> A GatingSet with 30 samples FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyGates <- fread(file.path(path = FileLocation, pattern = 'Gates.csv')) gt(MyGates) MyGatingTemplate <- gatingTemplate(MyGates) gt_gating(MyGatingTemplate, MyGatingSet) MyGatingSet[[1]] #> Sample:  CCR4_BUV615(Cells).fcs  #> GatingHierarchy with  6  gates removestrings <-  c(\"(Cells)\", \".fcs\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  IndividualPlot <- Utility_GatingPlots(x=MyGatingSet[[2]],                                        sample.name = \"GUID\",                                        removestrings = removestrings,                                        gtFile = MyGates,                                        DesiredGates = NULL,                                        outpath = StorageLocation,                                        returnType=\"patchwork\")  #IndividualPlot    IteratedPlots <- map(.x = MyGatingSet[1:2], .f = Utility_GatingPlots,                       sample.name = \"GUID\", removestrings = removestrings,                      gtFile = MyGates, DesiredGates = NULL,                      outpath = StorageLocation, returnType=\"patchwork\")  IteratedPlots[[2]] #> $`1` #>  #> $`2`"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"creating-a-gatingset-bead-unstained","dir":"Articles","previous_headings":"Getting Started","what":"Creating a GatingSet Bead Unstained","title":"Fluorescence Signatures","text":"unstained Bead cell control included Bead Single Color Gating Set, including GatingSet ease--locating reasons . Now filtered .fcs file interest, can use flowWorkspace bring individual .fcs files first CytoSet object, GatingSet object can add gates : example, use openCyto package automatically gate .fcs files bead singlets. , first read example .csv file containing desired gates (can found Luciernaga’s extdata folder) using data.table package experiments, individual gates can added, removed modified match requirements .fcs files, additional details, please refer openCyto packages vignettes. Alternatively, GatingSet objects can brought directly several commercial software formats using CytoML package. Now gating information .csv file, can convert GatingTemplate, append .fcs files contained within GatingSet  finally check gate placements using Utility_GatingPlots function:","code":"MyUnstainedBeadsCytoSet <- load_cytoset_from_fcs(UnstainedBeads,                                         truncate_max_range = FALSE,                                         transform = FALSE) MyUnstainedBeadsCytoSet #> A cytoset with 1 samples. #>  #>   column names: #>     Time, UV1-A, UV2-A, UV3-A, UV4-A, UV5-A, UV6-A, UV7-A, UV8-A, UV9-A, UV10-A, UV11-A, UV12-A, UV13-A, UV14-A, UV15-A, UV16-A, SSC-W, SSC-H, SSC-A, V1-A, V2-A, V3-A, V4-A, V5-A, V6-A, V7-A, V8-A, V9-A, V10-A, V11-A, V12-A, V13-A, V14-A, V15-A, V16-A, FSC-W, FSC-H, FSC-A, SSC-B-W, SSC-B-H, SSC-B-A, B1-A, B2-A, B3-A, B4-A, B5-A, B6-A, B7-A, B8-A, B9-A, B10-A, B11-A, B12-A, B13-A, B14-A, YG1-A, YG2-A, YG3-A, YG4-A, YG5-A, YG6-A, YG7-A, YG8-A, YG9-A, YG10-A, R1-A, R2-A, R3-A, R4-A, R5-A, R6-A, R7-A, R8-A MyUnstainedBeadsGatingSet <- GatingSet(MyUnstainedBeadsCytoSet) MyUnstainedBeadsGatingSet #> A GatingSet with 1 samples # Failing here? FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyBeadsGates <- fread(file.path(path = FileLocation,                                  pattern = 'GatesBeads.csv')) gt(MyBeadsGates) MyBeadsGatingTemplate <- gatingTemplate(MyBeadsGates) gt_gating(MyBeadsGatingTemplate, MyUnstainedBeadsGatingSet) MyUnstainedBeadsGatingSet[[1]] #> Sample:  4BeadsUnstained(Beads).fcs  #> GatingHierarchy with  4  gates plot(MyBeadsGatingSet) removestrings <-  c(\"(Cells)\", \".fcs\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  IndividualBeadPlot <- Utility_GatingPlots(x=MyUnstainedBeadsGatingSet[[1]],                                            sample.name = \"GUID\",                                           removestrings = removestrings,                                           gtFile = MyBeadsGates,                                            DesiredGates = NULL,                                           outpath = StorageLocation,                                           returnType=\"patchwork\")  IndividualBeadPlot #> $`1`"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"creating-a-gatingset-cell-unstained-controls","dir":"Articles","previous_headings":"Getting Started","what":"Creating a GatingSet Cell Unstained Controls","title":"Fluorescence Signatures","text":"unstained cell controls collected CBMC PBMC specimens, stimulated either PMA-ionomycin control. useful evaluate heterogeneity present autofluorescence across donors treatment conditions. isolated list desired .fcs files start vignette, can use flowWorkspace bring individual .fcs files first CytoSet object, GatingSet object can add gates : example, use openCyto package automatically gate .fcs files lymphocyte population. , first read example .csv file containing desired gates (can found Luciernaga’s extdata folder) using data.table package experiments, individual gates can added, removed modified match requirements .fcs files, additional details, please refer openCyto packages vignettes. Alternatively, GatingSet objects can brought directly several commercial software formats using CytoML package. Now gating information .csv file, can convert GatingTemplate, append .fcs files contained within GatingSet finally check gate placements using:","code":"MyUnstainedCytoSet <- load_cytoset_from_fcs(UnstainedCells,                                     truncate_max_range = FALSE,                                     transform = FALSE) MyUnstainedCytoSet #> A cytoset with 18 samples. #>  #>   column names: #>     Time, UV1-A, UV2-A, UV3-A, UV4-A, UV5-A, UV6-A, UV7-A, UV8-A, UV9-A, UV10-A, UV11-A, UV12-A, UV13-A, UV14-A, UV15-A, UV16-A, SSC-W, SSC-H, SSC-A, V1-A, V2-A, V3-A, V4-A, V5-A, V6-A, V7-A, V8-A, V9-A, V10-A, V11-A, V12-A, V13-A, V14-A, V15-A, V16-A, FSC-W, FSC-H, FSC-A, SSC-B-W, SSC-B-H, SSC-B-A, B1-A, B2-A, B3-A, B4-A, B5-A, B6-A, B7-A, B8-A, B9-A, B10-A, B11-A, B12-A, B13-A, B14-A, YG1-A, YG2-A, YG3-A, YG4-A, YG5-A, YG6-A, YG7-A, YG8-A, YG9-A, YG10-A, R1-A, R2-A, R3-A, R4-A, R5-A, R6-A, R7-A, R8-A MyUnstainedGatingSet <- GatingSet(MyUnstainedCytoSet) MyUnstainedGatingSet #> A GatingSet with 18 samples FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyGates <- fread(file.path(path = FileLocation, pattern = 'Gates.csv')) gt(MyGates) MyGatingTemplate <- gatingTemplate(MyGates) gt_gating(MyGatingTemplate, MyUnstainedGatingSet) MyUnstainedGatingSet[[1]] #> Sample:  INF071_Ctrl_Unstained.fcs  #> GatingHierarchy with  6  gates removestrings <-  c(\"(Cells)\", \".fcs\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  IndividualPlot <- Utility_GatingPlots(x=MyUnstainedGatingSet[[2]],                                        sample.name = \"GUID\",                                        removestrings = removestrings,                                        gtFile = MyGates,                                        DesiredGates = NULL,                                        outpath = StorageLocation,                                        returnType=\"patchwork\")  #IndividualPlot    IteratedPlots <- map(.x = MyUnstainedGatingSet[1:2], .f = Utility_GatingPlots,                       sample.name = \"GUID\", removestrings = removestrings,                      gtFile = MyGates, DesiredGates = NULL,                      outpath = StorageLocation, returnType=\"patchwork\")  IteratedPlots[[1]] #> $`1` #>  #> $`2`"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"averagedsignature-and-qc_viewsignature","dir":"Articles","previous_headings":"","what":"AveragedSignature and QC_ViewSignature","title":"Fluorescence Signatures","text":"moving -automated functions, let’s demonstrate underlying building blocks use evaluate fluorescent signatures within .fcs files. Within .fcs file, information related individual cells measurements stored within exprs. Let’s demonstrate example retrieved. AveragedSignature() Luciernaga function takes data outputs detector summarizes given statistic given stats argument. main ones used “median” “mean”. can see, still non-signature information present form Time, FSC SSC columns. remove , can pass values corresponding signature QC_ViewSignature() Raw MFI: -normalizing peak detector. lot complicated Luciernaga functions build elements combination filtering decisions characterize signatures present within .fcs file. However, questions addressed directly one complicated functions, build answer question. ’s initially get started.","code":"PopulationInterest <- gs_pop_get_data(MyUnstainedGatingSet[1], subset=\"lymphocytes\") TheDataValues <- exprs(PopulationInterest[[1]]) TheDataValues <- data.frame(TheDataValues, check.names=FALSE) head(TheDataValues, 5) #>     Time    UV1-A     UV2-A     UV3-A     UV4-A     UV5-A    UV6-A    UV7-A #> 1 100991 287.0875  865.6507  330.3738  894.5082 1029.7963 1117.410 2144.380 #> 2 518430 797.0026   21.7175  310.1438  774.5413  620.4363 1101.345 2400.379 #> 3 363287 366.2225  816.4144  561.6057 1122.9882  514.0800 1031.061 1086.768 #> 4 128030 866.3944 1672.2476 1169.3982 1018.8632 1989.2339 2996.271 5853.759 #> 5 201752 377.4532  640.0713 -152.3200  759.2944  688.4894 1166.572 2252.224 #>      UV8-A    UV9-A    UV10-A    UV11-A    UV12-A    UV13-A    UV14-A    UV15-A #> 1 1890.613 1469.427  712.1407  395.3031 512.89001  79.20938 658.73938 470.57065 #> 2 2252.744 1558.603  365.1069  478.6031 -36.74125 360.12378 974.90753 682.24188 #> 3 1645.993 1502.375  692.5800  460.8275 827.19879 376.56064  26.10563 561.23376 #> 4 4622.258 4908.527 2213.4001 2142.3721 558.18439 690.42316 779.30127 832.62817 #> 5 1932.486 2221.953  731.1807  556.4738 207.06001  95.79501 341.67877  70.13563 #>      UV16-A    SSC-W   SSC-H     SSC-A     V1-A      V2-A     V3-A     V4-A #> 1  340.3400 658951.4 1100375 1208489.5  22.9625  815.7875 1472.144 1973.675 #> 2 -172.0294 663280.7 1027170 1135503.4 345.4000 1093.1250 1360.219 1895.506 #> 3  253.7675 637444.7  867507  921646.2 730.1938 1326.6688 1440.244 1610.675 #> 4  447.5888 834948.1 1027346 1429634.4 926.5438 3792.5938 5305.712 6203.244 #> 5 -226.6206 629706.4  641798  673573.9 270.3250  986.9750 2229.494 2461.250 #>        V5-A      V6-A      V7-A      V8-A      V9-A     V10-A     V11-A #> 1  3333.137  2550.419  3789.913  3033.387  2055.969  2121.969 1218.3876 #> 2  3019.500  2855.188  3932.294  2555.438  1841.056  2300.306  755.0125 #> 3  3323.856  2341.625  3614.394  3397.625  1903.825  2800.738 1258.3313 #> 4 10569.969 12557.257 19422.701 16951.000 11412.913 13348.706 7723.7876 #> 5  4007.644  4480.644  7203.006  5535.200  4504.844  4350.294 2635.3938 #>       V12-A     V13-A     V14-A     V15-A    V16-A    FSC-W   FSC-H     FSC-A #> 1  781.6188  915.5438  763.6063  387.2688 428.3125 650326.3 1277333 1384472.1 #> 2  737.2750  746.4188  478.1562   81.4000 478.9813 672487.3 1353167 1516646.0 #> 3  601.3563  514.2500  706.2000 -155.9250 739.6125 681057.6 1142994 1297407.9 #> 4 3604.2876 3363.9375 3308.4563 2351.1125 825.0000 855744.7  488498  696715.9 #> 5 1387.0312 1101.8563  926.2000  860.2688 612.7000 664640.4  322764  357536.7 #>    SSC-B-W SSC-B-H  SSC-B-A      B1-A      B2-A     B3-A      B4-A     B5-A #> 1 665813.2  653211 724860.8 1035.5363 1193.3193 1382.389  868.2256  559.290 #> 2 643891.6  771916 828383.8  665.0581  900.7994 1516.739  871.5087 1002.641 #> 3 636927.8  485970 515879.7 1696.0237 1306.6837 1446.635  727.8881 1036.244 #> 4 814962.2  564298 766469.2 3459.2549 4499.4263 6746.500 6100.3037 5927.199 #> 5 616127.5  434878 446567.2 1359.9219 1967.3644 2749.649 1878.0118 1274.496 #>        B6-A      B7-A      B8-A      B9-A     B10-A     B11-A     B12-A #> 1  429.4456  639.1150 -131.9044  237.9944   29.3550  324.6431  325.6731 #> 2  591.1556  343.9556  271.9200  328.4413  130.2306  557.4875  737.8019 #> 3  818.8500  940.7119  597.6575  435.0462  440.6469  282.4131  538.9475 #> 4 4646.1367 4256.9253 2672.2705 2430.0273 1379.2344 1110.1469 1117.3568 #> 5 1657.9780 1462.0206 1209.3488 1007.1469  758.9169  263.2294  262.6500 #>      B13-A     B14-A    YG1-A     YG2-A     YG3-A      YG4-A     YG5-A #> 1 159.3925  278.3575 481.6706 -197.5106  357.2812  835.41376  406.6069 #> 2 541.0718  201.4937 191.1975  377.8163  569.2219   54.73688 -166.6387 #> 3  26.5225  172.3319 207.7781  378.2325  899.3775  493.46439  761.1825 #> 4 269.8600 1497.0405 689.5875 1649.0438 1963.6594 1809.23059 1411.7119 #> 5 275.0100  663.3200 645.1181  855.1856  361.4438 1050.26819  824.9381 #>        YG6-A      YG7-A      YG8-A     YG9-A     YG10-A      R1-A      R2-A #> 1  544.94061  415.97250  372.19687 -444.4856 -415.00125 -139.5550  414.2863 #> 2  257.10376   46.20375  -64.51875   33.0225 -194.38875  106.4319 -182.4950 #> 3   38.78062  776.16748 -123.69563  183.7050   91.08938  271.9769  312.4450 #> 4 1519.86755 2322.88306  723.02625 1515.4969  675.92065  640.2863  672.3500 #> 5  557.91376 1073.99438   96.77813  367.8956  384.12939  294.2944  594.5919 #>        R3-A      R4-A       R5-A       R6-A       R7-A     R8-A #> 1 324.66312  418.5944   16.03188   65.11625  248.52937 316.1881 #> 2 188.92188  370.5694  154.66875 -104.24250 -227.27126 313.2925 #> 3 374.59500 -208.1319  258.48749  421.84311  -28.32063  37.0075 #> 4 932.10876  574.1106 1004.28748  792.20062  594.52124 258.0638 #> 5  16.45563  217.3837 -164.62688  813.59998  255.66251 360.3287 TotalLymphocytes <- nrow(TheDataValues) TotalLymphocytes #> [1] 10000 TheSummary <- AveragedSignature(x=TheDataValues, stats=\"median\") gt(TheSummary) TheData <- TheSummary[,-grep(\"Time|FS|SC|SS|Original|W$|H$\", names(TheSummary))] gt(TheData) TheData <- TheData %>% mutate(Sample=\"TestSignature\") %>% relocate(Sample, .before=1) Plot <- Luciernaga::QC_ViewSignature(x=\"TestSignature\", data=TheData, Normalize=FALSE) Plot Plot <- Luciernaga::QC_ViewSignature(x=\"TestSignature\", data=TheData, Normalize=TRUE) #> Normalizing Data for Signature Comparison Plot"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"luciernaga_qc","dir":"Articles","previous_headings":"","what":"Luciernaga_QC","title":"Fluorescence Signatures","text":"Luciernaga_QC() Luciernaga package workhorse function. ’s primary purpose take individual .fcs files, identify normalized signatures level individual cells, group cells similar signatures together export data purified signature .fcs file dataframe object use reports. Given various types unmixing controls can encounter (beads cells, single color unstained), coordinates various functions behind scenes, retaining similar processing arguments allow user-directed inputs. Luciernaga functions, Luciernaga_QC() starts GatingSet objects. workflow, overarching goal characterize signatures present within single color cell reference controls. , need lay groundwork vary depending individual panel experiment context.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"autofluorescent-overlaps","dir":"Articles","previous_headings":"Luciernaga_QC","what":"Autofluorescent Overlaps","title":"Fluorescence Signatures","text":"SFC panels, fluorophores (BUV496, BV510) peak signature detector overlaps directly main autofluorescent detector peaks (UV7-, V7-). Luciernaga_QC works basis filtering single stained cells unstained cells peak fluorescence detectors. handle situations identical, Luciernaga_QC() refers autofluorescent overlap list appropriately handle fluorophores case. Since vary panel cell type user-specific ways, appropriately extract background autofluorescence particular single colors, need provide information expect overlapping autofluorescent fluorophore signatures .csv file. can see example, provide Fluorophore “Unstained” location peak detectors autofluorescence (main autofluorescence (UV7-, V7-) rarer variants (V5-, V7-, V8-)) can found . rarer variants unknown, list main Autofluorescent detector system add exceptions .csv file encounter actual practice. second component individual fluorophores overlap mentioned Unstained detectors. can add/remove list, crucial part retain Unstained row. Now initial overlap .csv provided, initial steps workflow focus refining autofluorescence backgrounds working . important isolating signatures single-color controls, also handling overlap exceptions (mentioned ) well determining autofluorescence(s) might present within individual samples need treated individual fluorophores. without running Luciernaga_QC() extraction protocols, first set arguments SignatureReturnNow TRUE. can additionally set Verbose = TRUE get processing information can useful troubleshooting. Verbose = TRUE readouts, can see main peak detector autofluorescence unstained lymphocytes cells sample “V7” detector, cells respective peaks V8, V5, V6. samples provided R package, -sampled unstained files 10,000 event, depending total number cells inform whether minor autofluorescent peaks negligible important enough add AutofluorescentOverlap.csv. see also influence ratiopopcutoff argument (set 0.001 ). used determine minimal number cells peak detector need order returned significant autofluorescence detector. can see action making argument stringent argument (increase 0.1 ~ 10% total unstained cells share peak detector): SignatureReturnNow = TRUE, main peak detector present within sample, get averaged signature returned. average determined stats argument, typically either “median” “mean”. returned signature provide external autofluorescence argument either bead single-color controls. cases want return averaged signature specific autofluorescene one minor autofluorescent peak detectors (like V8, V5 V6) can add additional argument desiredAF set corresponding detector (“V8-”): averaged signature readouts can also combined functions covered QC vignette visualize normalized signature:  can also compare reference fluorophore spectras see single colors might overlap significantly impact: typically repeat workflow various unstained specimens within GatingSet, identify additional rare AF may present, update AFOverlap.csv account Unstained peak detectors, add fluorophores share peak detector. done, ready proceed. SignatureReturnNow = TRUE argument also work single-color unmixing controls bead cell reference controls, set Verbose = TRUE see peak detectors returned, set desiredAF detector interest explore different signatures. case , use BV786 single-color bead unstained control. staining beads use, bright signal fluorophore stained beads seen . Beyond , next occupied peak detector dictated often noise normalize signature reflects uncertainty, see set desiredAF retrieve “YG1-” instead.","code":"FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern,                         full.names = TRUE) AFOverlap_CSV <- read.csv(AFOverlap, check.names = FALSE) AFOverlap_CSV #>   Fluorophore         MainDetector #> 1   Unstained UV7-A,V7-A,V3-A,V5-A #> 2      BUV496                UV7-A #> 3       BV480                 V5-A #> 4       BV510                 V7-A #> 5       BV570                 V8-A FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern,                         full.names = TRUE)  removestrings <- \".fcs\"  UnstainedSignature <- Luciernaga_QC(x=MyUnstainedGatingSet[2],                                     subsets=\"lymphocytes\",                                      removestrings=removestrings,                                     sample.name=\"GUID\",                                     unmixingcontroltype = \"cells\",                                     Unstained = TRUE,                                      ratiopopcutoff = 0.001,                                     Verbose = TRUE,                                     AFOverlap = AFOverlap,                                     stats = \"median\",                                     ExportType = \"data.frame\",                                     SignatureReturnNow = TRUE,                                     outpath = NULL) #> 0.09 of all events were negative and will be rounded to 0 #> Normalizing Data for Signature Comparison UnstainedSignature <- Luciernaga_QC(x=MyUnstainedGatingSet[2],                                     subsets=\"lymphocytes\",                                      removestrings=removestrings,                                     sample.name=\"GUID\",                                     unmixingcontroltype = \"cells\",                                     Unstained = TRUE,                                      ratiopopcutoff = 0.1,                                     Verbose = TRUE,                                     AFOverlap = AFOverlap,                                     stats = \"median\",                                     ExportType = \"data.frame\",                                     SignatureReturnNow = TRUE,                                     outpath = NULL) #> 0.09 of all events were negative and will be rounded to 0 #> Normalizing Data for Signature Comparison UnstainedSignature #>     UV1-A    UV2-A    UV3-A    UV4-A    UV5-A    UV6-A    UV7-A    UV8-A #> 1 401.216 682.8741 544.5366 668.5197 922.0641 1473.294 2798.136 2067.067 #>      UV9-A   UV10-A   UV11-A   UV12-A   UV13-A   UV14-A   UV15-A   UV16-A #> 1 1938.659 729.0238 473.1738 282.4763 231.1575 289.2444 215.3528 190.4744 #>       V1-A     V2-A     V3-A     V4-A     V5-A     V6-A     V7-A     V8-A #> 1 465.5063 1445.744 2224.922 2513.191 3835.941 3698.578 5102.797 3820.334 #>       V9-A    V10-A    V11-A    V12-A    V13-A    V14-A    V15-A    V16-A #> 1 2592.081 2877.359 1541.306 875.6344 799.4938 704.0344 614.1437 344.5406 #>       B1-A     B2-A     B3-A     B4-A     B5-A     B6-A     B7-A     B8-A #> 1 1403.117 1631.713 2303.724 1569.205 1344.987 1071.586 778.7122 590.5762 #>       B9-A    B10-A    B11-A    B12-A    B13-A    B14-A    YG1-A    YG2-A #> 1 621.5084 400.5734 307.1331 287.9816 206.3541 265.9009 592.3237 513.6872 #>      YG3-A    YG4-A    YG5-A    YG6-A    YG7-A   YG8-A    YG9-A   YG10-A #> 1 507.6169 493.4644 389.5753 391.2056 497.0025 242.535 231.8166 174.7209 #>       R1-A   R2-A     R3-A     R4-A     R5-A     R6-A     R7-A   R8-A #> 1 199.2684 268.94 274.3781 305.5944 170.1709 156.3638 149.5838 105.09 V7 <- Luciernaga_QC(x=MyUnstainedGatingSet[2], desiredAF = \"V7-A\",                     subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\",                     Unstained = TRUE, ratiopopcutoff = 0.001, Verbose = FALSE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> Normalizing Data for Signature Comparison  V8 <- Luciernaga_QC(x=MyUnstainedGatingSet[2], desiredAF = \"V8-A\",                     subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\",                     Unstained = TRUE, ratiopopcutoff = 0.001, Verbose = FALSE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> Normalizing Data for Signature Comparison  V5 <- Luciernaga_QC(x=MyUnstainedGatingSet[2], desiredAF = \"V5-A\",                     subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\",                     Unstained = TRUE, ratiopopcutoff = 0.001, Verbose = FALSE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> Normalizing Data for Signature Comparison  Comparison <- rbind(V7, V8, V5) gt(Comparison) Fluorophore <- data.frame(Sample=c(\"V7\", \"V8\", \"V5\")) Data <- cbind(Fluorophore, Comparison)  SignatureOnly <- QC_WhatsThis(x=\"V7\", data=Data, NumberHits = 0, returnPlots = TRUE) #> Normalizing Data for Signature Comparison SignatureOnly[[2]] Comparison <- QC_WhatsThis(x=\"V7\", data=Data, NumberHits = 5, returnPlots = TRUE) #> Normalizing Data for Signature Comparison Comparison[[1]] #>         Fluorophore ID_V7 #> 1             BV510  0.88 #> 2    LIVE DEAD Aqua  0.86 #> 3             OC515  0.84 #> 4 Viobility 405-520  0.84 #> 5       Zombie Aqua  0.84 plotly::ggplotly(Comparison[[2]]) pData(MyBeadsGatingSet) #>                                                              name #> CCR4_BUV615(Beads).fcs                     CCR4_BUV615(Beads).fcs #> CCR6_BV786(Beads).fcs                       CCR6_BV786(Beads).fcs #> CCR7_BV650(Beads).fcs                       CCR7_BV650(Beads).fcs #> CD107a_APC-R700(Beads).fcs             CD107a_APC-R700(Beads).fcs #> CD127_BV421(Beads).fcs                     CD127_BV421(Beads).fcs #> CD16_APC(Beads).fcs                           CD16_APC(Beads).fcs #> CD161_BV480(Beads).fcs                     CD161_BV480(Beads).fcs #> CD25_PE-Cy5(Beads).fcs                     CD25_PE-Cy5(Beads).fcs #> CD26_PerCP-Cy5.5(Beads).fcs           CD26_PerCP-Cy5.5(Beads).fcs #> CD27_APC-Fire750(Beads).fcs           CD27_APC-Fire750(Beads).fcs #> CD3_AlexaFluor488(Beads).fcs         CD3_AlexaFluor488(Beads).fcs #> CD3_AlexaFluor647(Beads).fcs         CD3_AlexaFluor647(Beads).fcs #> CD3_SparkBlue550(Beads).fcs           CD3_SparkBlue550(Beads).fcs #> CD38_APC-Fire810(Beads).fcs           CD38_APC-Fire810(Beads).fcs #> CD4_BUV805(Beads).fcs                       CD4_BUV805(Beads).fcs #> CD45RA_BV510(Beads).fcs                   CD45RA_BV510(Beads).fcs #> CD56_BV605(Beads).fcs                       CD56_BV605(Beads).fcs #> CD62L_BUV395(Beads).fcs                   CD62L_BUV395(Beads).fcs #> CD69_BUV563(Beads).fcs                     CD69_BUV563(Beads).fcs #> CD7_BV711(Beads).fcs                         CD7_BV711(Beads).fcs #> CD8_BUV496(Beads).fcs                       CD8_BUV496(Beads).fcs #> CXCR3_BUV737(Beads).fcs                   CXCR3_BUV737(Beads).fcs #> Dump_CD14_PacificBlue(Beads).fcs Dump_CD14_PacificBlue(Beads).fcs #> Dump_CD19_PacificBlue(Beads).fcs Dump_CD19_PacificBlue(Beads).fcs #> IFNg_BV750(Beads).fcs                       IFNg_BV750(Beads).fcs #> NKG2D_PE(Beads).fcs                           NKG2D_PE(Beads).fcs #> PD1_PE-Vio770(Beads).fcs                 PD1_PE-Vio770(Beads).fcs #> TNFa_PE-Dazzle594(Beads).fcs         TNFa_PE-Dazzle594(Beads).fcs #> Va7.2_AlexaFluor647(Beads).fcs     Va7.2_AlexaFluor647(Beads).fcs #> VD2_BUV661(Beads).fcs                       VD2_BUV661(Beads).fcs  BV786 <- Luciernaga_QC(x=MyBeadsGatingSet[2], desiredAF = NULL,                     subsets=\"singlets\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"beads\",                     Unstained = FALSE, ratiopopcutoff = 0.001, Verbose = TRUE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> 0.19 of all events were negative and will be rounded to 0 #> Returning Peak Bead Detector Medians #> Normalizing Data for Signature Comparison pData(MyBeadsGatingSet) #>                                                              name #> CCR4_BUV615(Beads).fcs                     CCR4_BUV615(Beads).fcs #> CCR6_BV786(Beads).fcs                       CCR6_BV786(Beads).fcs #> CCR7_BV650(Beads).fcs                       CCR7_BV650(Beads).fcs #> CD107a_APC-R700(Beads).fcs             CD107a_APC-R700(Beads).fcs #> CD127_BV421(Beads).fcs                     CD127_BV421(Beads).fcs #> CD16_APC(Beads).fcs                           CD16_APC(Beads).fcs #> CD161_BV480(Beads).fcs                     CD161_BV480(Beads).fcs #> CD25_PE-Cy5(Beads).fcs                     CD25_PE-Cy5(Beads).fcs #> CD26_PerCP-Cy5.5(Beads).fcs           CD26_PerCP-Cy5.5(Beads).fcs #> CD27_APC-Fire750(Beads).fcs           CD27_APC-Fire750(Beads).fcs #> CD3_AlexaFluor488(Beads).fcs         CD3_AlexaFluor488(Beads).fcs #> CD3_AlexaFluor647(Beads).fcs         CD3_AlexaFluor647(Beads).fcs #> CD3_SparkBlue550(Beads).fcs           CD3_SparkBlue550(Beads).fcs #> CD38_APC-Fire810(Beads).fcs           CD38_APC-Fire810(Beads).fcs #> CD4_BUV805(Beads).fcs                       CD4_BUV805(Beads).fcs #> CD45RA_BV510(Beads).fcs                   CD45RA_BV510(Beads).fcs #> CD56_BV605(Beads).fcs                       CD56_BV605(Beads).fcs #> CD62L_BUV395(Beads).fcs                   CD62L_BUV395(Beads).fcs #> CD69_BUV563(Beads).fcs                     CD69_BUV563(Beads).fcs #> CD7_BV711(Beads).fcs                         CD7_BV711(Beads).fcs #> CD8_BUV496(Beads).fcs                       CD8_BUV496(Beads).fcs #> CXCR3_BUV737(Beads).fcs                   CXCR3_BUV737(Beads).fcs #> Dump_CD14_PacificBlue(Beads).fcs Dump_CD14_PacificBlue(Beads).fcs #> Dump_CD19_PacificBlue(Beads).fcs Dump_CD19_PacificBlue(Beads).fcs #> IFNg_BV750(Beads).fcs                       IFNg_BV750(Beads).fcs #> NKG2D_PE(Beads).fcs                           NKG2D_PE(Beads).fcs #> PD1_PE-Vio770(Beads).fcs                 PD1_PE-Vio770(Beads).fcs #> TNFa_PE-Dazzle594(Beads).fcs         TNFa_PE-Dazzle594(Beads).fcs #> Va7.2_AlexaFluor647(Beads).fcs     Va7.2_AlexaFluor647(Beads).fcs #> VD2_BUV661(Beads).fcs                       VD2_BUV661(Beads).fcs  NotBV786 <- Luciernaga_QC(x=MyBeadsGatingSet[2], desiredAF = \"YG1-A\",                     subsets=\"singlets\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"beads\",                     Unstained = FALSE, ratiopopcutoff = 0.001, Verbose = TRUE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> 0.19 of all events were negative and will be rounded to 0 #> Returning Peak Bead Detector Medians #> Normalizing Data for Signature Comparison"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"unstained-signatures","dir":"Articles","previous_headings":"Luciernaga_QC","what":"Unstained Signatures","title":"Fluorescence Signatures","text":"established autofluorescence background cells working (updated AFOverlaps csv), can now switch SignatureReturnNow = FALSE, allow Luciernaga_QC() continue processing pipeline. Let’s continue Unstained cell gating set, signatures require subtraction background like single color controls, easier demonstrate Luciernaga_QC() building blocks. example, used Luciernaga_QC() retrieve individual detectors passed ratiopopcutoff limit averaged signature cells shared respective peak detectors. can quickly visualize raw fluorescence normalized signatures using QC_ViewSignature() function: approach good quickly characterize average signature cells population level detector, can miss variation present cells, especially non-peak detector regions. example, passed original unstained file Luciernaga_LinearSlices(), see cut population “V7” detector 10% increments basis MFI, end variation normalized signatures secondary peaks. particularly pronounced context single-color unmixing controls, example, CD16 APC looks like filtered solely basis peak-detector: dimmest cells terms brightness (raw MFI), resulting normalized signatures retain significant portion autofluorescence signature contaminates final normalized signature. can compare different setting returntype “data” passing rows comparison interest QC_WhatsThis() case, cosine value signature APC single-color went near match reference signature, 0.76. ’s reasons, Luciernaga_QC initial peak detectors determined, filter cells share peak detector, determine additional signature peaks present. occurs using rolling local maxima approach identify additional peaks. fluorophore doesn’t additional peaks, Luciernaga_QC() enumerate first peak move . present, individual cells evaluated height retrieved detectors corresponding additional peaks vs main peak. Ie, additional peak 0.5 (50%) height, 0.1 (10%) height peak detector. process repeated individual cell, enumerations appended create subcluster designation. autofluorescence cells system, often resemble name similar V7_10-UV8_05-B3_04. primary peak coming first, ’s relative height equaling 10 (since R doesn’t like periods allow 1.0) [V7_10]. second highest peak ’s relative height compared peak detector [-UV7_05-], finally final peak fluorescent signature ’s height relative peak detector [-B3_04]. subcluster names formed, used group cells similar autofluorescence together exported/reported purified signatures. Let’s see looks like context original unstained sample. can see, Cluster column following peak naming format mentioned , well count number cells shared signature. also get back within data.frame normalized signature values respective detectors can used plot signatures. can seen, approach improves ability capture variation present within UV8 detector. Two important arguments mention Increments SecondaryPeaks. Increments default set 0.1, 10% increments. secondary peak 0.18 primary peak value, get rounded nearest 0.1 increment interval (0.2). Luciernaga’s current implementation, 0.1 lowest value verified work, can increased broadly 0.2. Similarly, SecondaryPeaks default set 2, allowing fluorescent 3 separate peaks characterized. works single-color unmixing controls, can also currently increased 8 peaks (used characterize QC bead raw full-stained signatures, described vignettes elsewhere). Let’s decrease 1 example: One challenge every additional peak, 0.1 increments, number potential combinations subcluster name can take increases, end number subclusters increase, fewer cells per subcluster result. time, get “Poisson” noise discussion territory people named David typically thread. certain point increasing points evaluating , every single autofluorescent cell eventually clusters typical number cells collected experiments. advice now set Increments SecondaryPeak arguments need achieve stable resolution/characterization/unmixing particular context.","code":"SignatureOnly <- QC_ViewSignature(x=c(\"V7\", \"V8\", \"V5\"), data=Data, Normalize = FALSE) plotly::ggplotly(SignatureOnly) SignatureOnly <- QC_ViewSignature(x=c(\"V7\", \"V8\", \"V5\"), data=Data, Normalize = TRUE) #> Normalizing Data for Signature Comparison plotly::ggplotly(SignatureOnly) RawSlices <- Luciernaga_LinearSlices(x=MyUnstainedGatingSet[2], subset=\"lymphocytes\",                                   sample.name=\"GUID\", removestrings=removestrings,                                   stats=\"median\", returntype=\"raw\",                                   probsratio=0.1, output=\"plot\", desiredAF=\"V7-A\")  plotly::ggplotly(RawSlices) NormalizedSlices <- Luciernaga_LinearSlices(x=MyUnstainedGatingSet[2], subset=\"lymphocytes\",                                   sample.name=\"GUID\", removestrings=removestrings,                                   stats=\"median\", returntype=\"normalized\",                                   probsratio=0.1, output=\"plot\", desiredAF=\"V7-A\")  plotly::ggplotly(NormalizedSlices) #pData(MyGatingSet[6])  APC_Example <- subset(MyGatingSet, str_detect(name, \"CD16_\"))  RawSlices <- Luciernaga_LinearSlices(x=APC_Example[1], subset=\"lymphocytes\",                                   sample.name=\"GUID\", removestrings=removestrings,                                   stats=\"median\", returntype=\"raw\",                                   probsratio=0.1, output=\"plot\", desiredAF=\"R1-A\")  plotly::ggplotly(RawSlices) #pData(MyGatingSet[6])  NormalizedSlices <- Luciernaga_LinearSlices(x=APC_Example[1], subset=\"lymphocytes\",                                   sample.name=\"GUID\", removestrings=removestrings,                                   stats=\"median\", returntype=\"normalized\",                                   probsratio=0.1, output=\"plot\", desiredAF=\"R1-A\")  plotly::ggplotly(NormalizedSlices) NormalizedSliceData <- Luciernaga_LinearSlices(x=APC_Example[1], subset=\"lymphocytes\",                                   sample.name=\"GUID\", removestrings=removestrings,                                   stats=\"median\", returntype=\"normalized\",                                   probsratio=0.1, output=\"data\", desiredAF=\"R1-A\")  APC_90to100 <- NormalizedSliceData %>% rename(Sample = Percentiles) %>% filter(Sample %in% \"90\") APC_10to20 <- NormalizedSliceData %>% rename(Sample = Percentiles) %>% filter(Sample %in% \"10\") MatchingSignature <- QC_WhatsThis(x=\"90\", data=APC_90to100, NumberHits = 10, returnPlots = TRUE) MatchingSignature[1] #> [[1]] #>          Fluorophore ID_90 #> 1                APC  1.00 #> 2        cFluor R659  1.00 #> 3              CF633  0.96 #> 4         iFluor 633  0.95 #> 5       ViaKrome 638  0.95 #> 6  CellTrace Far Red  0.94 #> 7             CF640R  0.94 #> 8          SYTOX Red  0.94 #> 9       Thiazole Red  0.94 #> 10   Vio Bright R667  0.94 plotly::ggplotly(MatchingSignature[[2]]) ContaminationSignature <- QC_WhatsThis(x=\"10\", data=APC_10to20, NumberHits = 10, returnPlots = TRUE) ContaminationSignature[1] #> [[1]] #>            Fluorophore ID_10 #> 1                  APC  0.73 #> 2          cFluor R659  0.73 #> 3               SBR670  0.72 #> 4                CF633  0.70 #> 5    CellTrace Far Red  0.69 #> 6               CF640R  0.68 #> 7           iFluor 633  0.68 #> 8  Live-or-Dye 640-662  0.67 #> 9  Northern Lights 637  0.67 #> 10   NovaFluor Red 660  0.67 plotly::ggplotly(ContaminationSignature[[2]]) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern,                         full.names = TRUE) removestrings <- c(\".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  Unstained_Signatures <- Luciernaga_QC(x=MyUnstainedGatingSet[2],                                       subsets=\"lymphocytes\",                                       removestrings=removestrings,                                       sample.name=\"GUID\",                                       unmixingcontroltype = \"cells\",                                       Unstained = TRUE,                                       ratiopopcutoff = 0.001,                                       Verbose = FALSE,                                       AFOverlap = AFOverlap,                                        stats = \"median\",                                       ExportType = \"data\",                                       SignatureReturnNow = FALSE,                                       outpath = NULL,                                       Increments=0.1,                                       experiment = \"UnstainedSignature\",                                       condition = \"Test\") gt(head(Unstained_Signatures, 5)) TheData <- Unstained_Signatures %>% select(-any_of(c(\"Sample\", \"Experiment\", \"Condition\", \"Count\"))) %>% rename(Sample=Cluster)  TheFluors <- TheData %>% pull(Sample) TheFluors <- TheFluors[1:10]  Luciernaga_Subpeaks <- QC_ViewSignature(x=TheFluors, data=TheData, Normalize = TRUE) #> Normalizing Data for Signature Comparison plotly::ggplotly(Luciernaga_Subpeaks) Unstained_Signatures <- Luciernaga_QC(x=MyUnstainedGatingSet[2],                                       subsets=\"lymphocytes\",                                       removestrings=removestrings,                                       sample.name=\"GUID\",                                       unmixingcontroltype = \"cells\",                                       Unstained = TRUE,                                       ratiopopcutoff = 0.001,                                       Verbose = FALSE,                                       AFOverlap = AFOverlap,                                        stats = \"median\",                                       ExportType = \"data\",                                       SignatureReturnNow = FALSE,                                       outpath = NULL,                                       Increments=0.2,                                       experiment = \"UnstainedSignature\",                                       condition = \"Test\") gt(head(Unstained_Signatures, 5)) TheData <- Unstained_Signatures %>% select(-any_of(c(\"Sample\", \"Experiment\", \"Condition\", \"Count\"))) %>% rename(Sample=Cluster)  TheFluors <- TheData %>% pull(Sample) TheFluors <- TheFluors[1:10]  Luciernaga_Subpeaks <- QC_ViewSignature(x=TheFluors, data=TheData, Normalize = TRUE) #> Normalizing Data for Signature Comparison plotly::ggplotly(Luciernaga_Subpeaks) Unstained_Signatures <- Luciernaga_QC(x=MyUnstainedGatingSet[2],                                       subsets=\"lymphocytes\",                                       removestrings=removestrings,                                       sample.name=\"GUID\",                                       unmixingcontroltype = \"cells\",                                       Unstained = TRUE,                                       ratiopopcutoff = 0.001,                                       Verbose = FALSE,                                       AFOverlap = AFOverlap,                                        stats = \"median\",                                       ExportType = \"data\",                                       SignatureReturnNow = FALSE,                                       outpath = NULL,                                       Increments=0.2,                                       SecondaryPeaks=1,                                       experiment = \"UnstainedSignature\",                                       condition = \"Test\") gt(head(Unstained_Signatures, 5))"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"data-export-arguments","dir":"Articles","previous_headings":"Luciernaga_QC > Unstained Signatures","what":"Data Export Arguments","title":"Fluorescence Signatures","text":", covered important arguments related Unstained cell unmixing controls. examples , specified returntype == “data”, returned summaries used reporting functions Luciernaga. Alternatively, export purified signatures .fcs files, setting returntype = “fcs”, providing file path desired storage location via outpath argument. files compatible flow cytometry software, can used assist unmixing. can useful single-color experiencing quality issues, want create tag specific certain subtype autofluorescence. context unstained unmixing controls, resemble following code (sending temporary folder example): visualize may look like return:  Additionally, providing argument Brightness = TRUE return .csv file report data. output used Luciernaga_Tree() couple report functions cover later. Similarly, combination purrr map function, can iterate GatingSet generate subcluster .fcs files Unstained samples one go.","code":"#StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") TemporaryStorage <- tempdir()   Unstained_Signatures <- Luciernaga_QC(x=MyUnstainedGatingSet[2],                                       subsets=\"lymphocytes\",                                       removestrings=removestrings,                                       sample.name=\"GUID\",                                       unmixingcontroltype = \"cells\",                                       Unstained = TRUE,                                       ratiopopcutoff = 0.001,                                       Verbose = FALSE,                                       AFOverlap = AFOverlap,                                        stats = \"median\",                                       ExportType = \"fcs\",                                       SignatureReturnNow = FALSE,                                       outpath = TemporaryStorage,                                       Increments=0.1,                                       SecondaryPeaks=2,                                       experiment = \"UnstainedSignature\",                                       condition = \"Test\")  TheFCSFileOutputs <- list.files(TemporaryStorage, pattern=\"fcs\") TheFCSFileOutputs #> [1] \"INF071_PMA_Unstained_V710UV803B305.fcs\" #> [2] \"INF071_PMA_Unstained_V710UV804B304.fcs\" #> [3] \"INF071_PMA_Unstained_V710UV804B305.fcs\" #> [4] \"INF071_PMA_Unstained_V710UV804B306.fcs\" #> [5] \"INF071_PMA_Unstained_V710UV805B304.fcs\" #> [6] \"INF071_PMA_Unstained_V710UV805B305.fcs\" #> [7] \"INF071_PMA_Unstained_V710UV805B306.fcs\" TheFCSFileOutputs <- list.files(TemporaryStorage, pattern=\"fcs\", full.names=TRUE) TheIsolatedFCS <- load_cytoset_from_fcs(TheFCSFileOutputs[1], truncate_max_range = FALSE, transformation = FALSE) TheIsolatedGS <- GatingSet(TheIsolatedFCS)  FCSView <- Utility_IterativeGating(x=TheIsolatedGS[1], subset=\"root\", gate = NULL, xValue=\"UV8-A\", yValue=\"B3-A\",                                    sample.name=\"GUID\", removestrings=\".fcs\", bins=100) FCSView #> [[1]] #StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") TemporaryStorage <- tempdir()  TheUnstaineds <- map(.x=MyUnstainedGatingSet[2], .f=Luciernaga_QC,                       subsets=\"lymphocytes\", removestrings=removestrings,                      sample.name=\"GUID\", unmixingcontroltype = \"cells\",                      Unstained = TRUE, ratiopopcutoff = 0.001,                      Verbose = FALSE, AFOverlap = AFOverlap,                       stats = \"median\", ExportType = \"fcs\",                      SignatureReturnNow = FALSE, outpath = TemporaryStorage,                      Increments=0.1, SecondaryPeaks=2,                      experiment = \"UnstainedSignature\",                      condition = \"Test\", Brightness = TRUE)  BrightnessCSV <- list.files(TemporaryStorage, pattern=\"csv\") BrightnessCSV #> [1] \"RelativeBrightnessINF071_PMA_Unstained.csv\" BrightnessCSV <- list.files(TemporaryStorage, pattern=\"csv\", full.names=TRUE) TheBrightnessInformation <- read.csv(BrightnessCSV[1], check.names = FALSE) head(TheBrightnessInformation, 5) #>              Cluster Brightness Detector1 Detector1Value Detector2 #> 1 V7_10-UV8_04-B3_05         19        V7             10       UV8 #> 2 V7_10-UV8_05-B3_05         20        V7             10       UV8 #> 3 V7_10-UV8_04-B3_04         18        V7             10       UV8 #> 4 V7_10-UV8_05-B3_04         19        V7             10       UV8 #> 5 V7_10-UV8_05-B3_06         21        V7             10       UV8 #>   Detector2Value Detector3 Detector3Value Detector1Raw Detector2Raw #> 1              4        B3              5     5572.359     1988.379 #> 2              5        B3              5     5049.207     2240.696 #> 3              4        B3              4     5381.337     1924.007 #> 4              5        B3              4     5008.231     2190.865 #> 5              5        B3              6     4722.747     2105.891 #>   Detector3Raw Count     Time      UV1      UV2      UV3      UV4       UV5 #> 1     2517.288   746 375075.5 425.2763 701.2447 526.6494 672.3500  926.2291 #> 2     2271.021   733 359993.0 450.5638 785.2513 614.5607 722.7763 1001.7569 #> 3     1968.330   373 370222.0 395.0056 728.1313 537.3594 682.3907  959.2888 #> 4     1820.461   335 380210.0 458.8194 791.7219 642.3026 779.1525 1005.4013 #> 5     2528.843   318 316452.0 414.3060 683.8781 547.5116 655.8016  911.5400 #>        UV6      UV7      UV8      UV9     UV10     UV11     UV12     UV13 #> 1 1487.798 2846.778 1988.379 1969.524 769.5953 511.3653 295.6035 237.9256 #> 2 1580.841 2923.979 2240.696 2021.736 748.2869 468.9344 281.6581 242.0906 #> 3 1536.439 2870.354 1924.007 1992.655 762.1950 468.7113 302.2600 269.3863 #> 4 1613.343 2879.280 2190.865 1928.693 710.6531 465.0669 256.7425 208.6219 #> 5 1450.015 2783.819 2105.891 1893.588 681.2379 422.1525 242.7228 174.8928 #>       UV14     UV15     UV16    SSC-W   SSC-H     SSC       V1       V2 #> 1 288.0172 227.9966 211.2250 683829.4 1107675 1261012 498.7125 1553.991 #> 2 278.0881 188.7638 175.4506 677780.6 1184736 1341172 470.5250 1465.956 #> 3 278.6831 202.4488 194.2675 679364.5 1091629 1250144 480.7000 1487.956 #> 4 289.9138 258.8250 169.9469 676423.9 1118851 1267046 433.8125 1438.731 #> 5 250.4206 198.6184 142.7628 674595.1 1153897 1301204 423.3969 1337.153 #>         V3       V4       V5       V6       V7       V8       V9      V10 #> 1 2389.991 2714.181 4178.934 4014.313 5572.359 4092.859 2830.163 3114.341 #> 2 2207.975 2498.512 3834.531 3721.919 5049.207 3793.763 2586.238 2864.744 #> 3 2245.031 2556.331 3892.694 3766.263 5381.337 3829.238 2562.519 2879.869 #> 4 2189.206 2489.575 3741.788 3533.888 5008.231 3657.500 2464.550 2757.219 #> 5 2084.809 2350.425 3551.556 3501.300 4722.747 3607.175 2461.009 2723.016 #>        V11      V12      V13      V14      V15      V16    FSC-W   FSC-H #> 1 1682.966 982.3000 864.8063 757.2812 662.9906 366.1969 675626.4 1318871 #> 2 1516.006 844.7313 740.5750 643.2250 566.6375 332.7500 676409.3 1406765 #> 3 1546.394 878.4875 816.6813 714.4500 661.9938 361.4875 673448.2 1348645 #> 4 1437.081 818.7438 704.1375 657.7313 543.6063 313.2250 674743.6 1397406 #> 5 1475.994 805.3031 713.9344 644.1531 563.3031 323.7438 675404.4 1393753 #>       FSC  SSC-B-W SSC-B-H    SSC-B       B1       B2       B3       B4 #> 1 1491917 669505.2  729827 821310.0 1572.070 1809.549 2517.288 1703.298 #> 2 1586855 665302.0  809745 886955.3 1349.236 1600.684 2271.021 1543.906 #> 3 1517825 668050.1  732468 819600.6 1363.656 1610.147 1968.330 1530.709 #> 4 1568460 663978.6  764488 842286.2 1246.429 1475.861 1820.461 1445.154 #> 5 1568841 662644.3  780609 861347.5 1404.952 1595.148 2528.843 1517.093 #>         B5        B6       B7       B8       B9      B10      B11      B12 #> 1 1449.693 1177.2256 858.7625 644.5869 671.5278 444.7990 324.1925 312.4119 #> 2 1330.696 1018.9275 756.2775 544.6769 600.4256 359.0194 292.7775 255.3756 #> 3 1349.944 1083.3668 789.4950 612.4637 613.1719 416.6994 302.3694 294.1938 #> 4 1166.926  966.7194 671.5600 522.9825 543.5825 351.1012 232.0719 255.9550 #> 5 1272.887 1025.2040 720.0987 535.5356 558.9037 386.8937 298.1206 246.3631 #>        B13      B14      YG1      YG2      YG3      YG4      YG5      YG6 #> 1 214.4653 304.5259 635.7178 572.4478 593.8847 539.6681 440.1844 462.8353 #> 2 201.4294 215.9781 601.3425 471.3338 471.9581 454.8919 345.9731 353.3269 #> 3 206.5794 269.2806 596.9719 499.1531 491.9381 512.5425 386.9738 433.6631 #> 4 173.8769 234.1962 545.8425 440.9475 443.7919 422.6325 312.8119 306.2906 #> 5 173.7803 253.5087 559.3359 454.3716 447.9197 446.1506 352.1128 327.8316 #>        YG7      YG8      YG9     YG10       R1       R2       R3       R4 #> 1 522.7753 281.9747 241.6678 174.5475 218.5491 275.8259 300.2622 311.2797 #> 2 448.9950 185.5781 191.8913 181.0688 170.0650 256.5806 248.8825 300.1562 #> 3 531.4125 265.2206 214.7850 172.3275 183.4131 286.9494 257.8519 306.5831 #> 4 433.8019 166.9856 198.6206 137.9869 181.5769 256.0156 235.8875 252.1313 #> 5 435.0853 181.0341 223.8037 115.7522 174.5144 218.6197 244.5038 264.4906 #>         R5       R6        R7       R8 #> 1 167.3459 169.2528 188.53343 102.6888 #> 2 156.7169 117.0963 137.93062 108.9744 #> 3 159.6125 180.9413 126.91312 105.8669 #> 4 177.5513 154.5981 136.16499  49.1550 #> 5 166.7809 110.4928  81.39531 109.6453 #StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") TemporaryStorage <- tempdir()  TheUnstaineds <- map(.x=MyUnstainedGatingSet[1:3], .f=Luciernaga_QC,                       subsets=\"lymphocytes\", removestrings=removestrings,                      sample.name=\"GUID\", unmixingcontroltype = \"cells\",                      Unstained = TRUE, ratiopopcutoff = 0.001,                      Verbose = FALSE, AFOverlap = AFOverlap,                       stats = \"median\", ExportType = \"fcs\",                      SignatureReturnNow = FALSE, outpath = StorageLocation,                      Increments=0.1, SecondaryPeaks=2,                      experiment = \"UnstainedSignature\",                      condition = \"Test\", Brightness = TRUE)"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"single-color-unmixing-controls","dir":"Articles","previous_headings":"Luciernaga_QC","what":"Single Color Unmixing Controls","title":"Fluorescence Signatures","text":"Now covered unstained unmixing controls, let’s look Luciernaga_QC() works single-color unmixing controls. Let’s set returnsignaturenow = TRUE done previously starting unstained samples. can see returned peak detectors, BV786 single-stained unmixing control, 4 detectors cells sample primary peaks . Looking signatures (referencing results Unstained samples looked previously) three unstained peak detectors (V7, UV7, V5). Consequently, remaining detector (V15) likely antibody-staining origin. particularly obvious look normalized signature. case Raw MFI plot, antibody-stained cells way brighter underlying autofluorescence cells didn’t get stained antibody (due antigen). Please note stage, autofluorescence background yet subtracted single-color unmixing control, can see ID_V15 residual autofluorescence present raw normalized signature. normalized signature, materializes minor peaks 0.2 UV7-V7-. ’s bit background need properly extract order provide good signature unmixing. Luciernaga_QC() carries process similar manner single-color unmixing controls, enumerating peak detectors, removing listed AFOverlap .csv unstained consideration, focusing likely antibody-stain origin detectors processing. advantage isolating peak detectors manner allows Luciernaga profile unusual fluorescence signals may present within single-color unmixing control. rarer autofluorescences, also indicators overall quality antibody-fluorophore conjugation. ’s can also see AFOverlap needed fluorophore shares ’s peak detector main autofluorescence peaks. Let’s take look happens BV510 specific case: case, function errors calls external autofluorescence signature provided ExternalAF argument. look Verbose = TRUE message, can see particular sample, V7 present. address deal shortly. just working peak detector works quite nicely bright fluorophores, always case. Brightness impacted fluorophore , also antigen density cell surfact fluorophore-conjugated antibodies latch . good highlighting example -complicated side PerCP-Cy5.5 CD26 unmixing control. panel, added fixation, issues degradatation non-specific/background staining: can see signatures, detectors reach peak detector status. However, unlike case BV786, peak-detectors corresponding antibody-staining much brighter underlying autofluorescence terms raw MFI. Consequently, without subtracting background signal, normalized signatures end introducing autofluorescence artefacts fluorophore specific peaks, fluorophore contributions purely autofluorescence detectors. Consequently, additional step process single-stained cells needed. One way can provisioning external autofluorescence signature. required autofluorescence overlap fluorophores, option can implemented fluorophores desired. can see, left signatures closely resembling PerCP-Cy5.5. can see, work well improved returned signature. alternative way, rely internal autofluorescence. case BV786, many single-color unmixing controls, quite cells remain unstained within sample potentially serve internal autofluorescence negative. particularly helpful cases mismatch ends occurring vs external unstained sample processing end mismatching autofluorescence. However, antibody lot non-specific background, can contaminate unstained peak detectors saw case PerCP-Cy5.5. way handling issue using Luciernaga_QC() internal negatives subtraction follows. set Subtraction = “Internal”, leave desiredAF = NULL (R equivalent empty). main autofluorescent overlap peak worked internally via AFOverlap csv count peak detectors. initial peaks characterized, cells sample initially grouped basis shared peak detectors. done, “likely” antibody detector, subclustered basis normalized values detector Main Autofluorescent detector. end , case , continuum clusters ranging antibody stain way brighter underlying autofluorescence (B9_10-V7_00) cells equal brightness antibody autofluorescence (B9_10-V7_10), way cells autofluorescence (V7_10-B9_00). continuum, bin least amount “antibody” detector selected “uncontaminated” autofluorescence, cells filtered , average autofluorescence signature extracted . turn subtracted initial subclustering cells removing background. point, cells subtracted values re-enumerated basis peak detector, passed onward function rolling local maxima step described unstained section vignette figure secondary peak detectors needed continue pipeline. complicated way work, worth hassle? Let’s compare external AF internal AF method : can see, main peaks similar methods (good considering .fcs file), better matching signature secondary peaks. testing, either approach provides good results, internal AF providing additional usefulness cases experiment required troubleshooting. aware possible scenarios picking least contaminated bin cause issues discussed unmixing vignette along broader discussion brightness role process. finally good measure, let’s generate signature BV510 using externalAF demonstrate AFOverlap cases well. , provision CellAF argument: Small rounding errors contribute plateau appearance 0.1 compared reference control remain fix-list.","code":"StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  pData(MyGatingSet[2]) #>                                        name #> CCR6_BV786(Cells).fcs CCR6_BV786(Cells).fcs  SingleStain_Signatures <- Luciernaga_QC(x=MyGatingSet[2],                                       subsets=\"lymphocytes\",                                       removestrings=removestrings,                                       sample.name=\"GUID\",                                       unmixingcontroltype = \"cells\",                                       Unstained = FALSE,                                       ratiopopcutoff = 0.01,                                       Verbose = TRUE,                                       AFOverlap = AFOverlap,                                        stats = \"median\",                                       ExportType = \"data\",                                       SignatureReturnNow = TRUE,                                       outpath = NULL) #> 0.09 of all events were negative and will be rounded to 0 #> Normalizing Data for Signature Comparison V7 <- Luciernaga_QC(x=MyGatingSet[2], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"V7-A\") #> Normalizing Data for Signature Comparison  V15 <- Luciernaga_QC(x=MyGatingSet[2], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"V15-A\") #> Normalizing Data for Signature Comparison  UV7 <- Luciernaga_QC(x=MyGatingSet[2], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"UV7-A\") #> Normalizing Data for Signature Comparison  V5 <- Luciernaga_QC(x=MyGatingSet[2], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"V5-A\") #> Normalizing Data for Signature Comparison  data <- rbind(V7, V15, UV7, V5) Sample <- data.frame(Sample=c(\"V7\", \"V15\", \"UV7\", \"V5\")) Data <- cbind(Sample, data)  Fluors <- Data %>% pull(Sample) Raw_Results <- QC_ViewSignature(x=Fluors, data=Data, Normalize = FALSE) plotly::ggplotly(Raw_Results) Normalized_Results <- QC_ViewSignature(x=Fluors, data=Data)  #> Normalizing Data for Signature Comparison plotly::ggplotly(Normalized_Results) StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  #pData(MyGatingSet)  SingleStain_Signatures <- Luciernaga_QC(x=MyGatingSet[16],                                       subsets=\"lymphocytes\",                                       removestrings=removestrings,                                       sample.name=\"GUID\",                                       unmixingcontroltype = \"cells\",                                       Unstained = FALSE,                                       ratiopopcutoff = 0.01,                                       Verbose = TRUE,                                       AFOverlap = AFOverlap,                                        stats = \"median\",                                       ExportType = \"data\",                                       SignatureReturnNow = TRUE,                                       outpath = NULL) #> 0.08 of all events were negative and will be rounded to 0 #> Only a single detector present. If this was not an autofluorescence overlap #>               fluourophore, it would suggest there was no antibody staining, or everything #>               was overstained. Please investigate further. #> Error in Luciernaga_QC(x = MyGatingSet[16], subsets = \"lymphocytes\", removestrings = removestrings, : Only one detector present and no external cell autofluorescence signature was provided #>            for subtraction. Please provision the CellAF argument. StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  #pData(MyGatingSet)  SingleStain_Signatures <- Luciernaga_QC(x=MyGatingSet[9],                                       subsets=\"lymphocytes\",                                       removestrings=removestrings,                                       sample.name=\"GUID\",                                       unmixingcontroltype = \"cells\",                                       Unstained = FALSE,                                       ratiopopcutoff = 0.01,                                       Verbose = TRUE,                                       AFOverlap = AFOverlap,                                        stats = \"median\",                                       ExportType = \"data\",                                       SignatureReturnNow = TRUE,                                       outpath = NULL) #> 0.02 of all events were negative and will be rounded to 0 #> Normalizing Data for Signature Comparison V7 <- Luciernaga_QC(x=MyGatingSet[9], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"V7-A\") #> Normalizing Data for Signature Comparison  B9 <- Luciernaga_QC(x=MyGatingSet[9], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"B9-A\") #> Normalizing Data for Signature Comparison  UV7 <- Luciernaga_QC(x=MyGatingSet[9], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"UV7-A\") #> Normalizing Data for Signature Comparison  B14 <- Luciernaga_QC(x=MyGatingSet[9], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"B14-A\") #> Normalizing Data for Signature Comparison  R3 <- Luciernaga_QC(x=MyGatingSet[9], subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                     ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data\", SignatureReturnNow = TRUE, outpath = NULL,                     desiredAF=\"R3-A\") #> Normalizing Data for Signature Comparison  data <- rbind(V7, B9, UV7, B14, R3) Sample <- data.frame(Sample=c(\"V7\", \"B9\", \"UV7\", \"B14\", \"R3\")) Data <- cbind(Sample, data)  Fluors <- Data %>% pull(Sample) Results <- QC_ViewSignature(x=Fluors, data=Data, Normalize = FALSE)  plotly::ggplotly(Results) Results <- QC_ViewSignature(x=Fluors, data=Data)  #> Normalizing Data for Signature Comparison plotly::ggplotly(Results) # pData(MyUnstainedGatingSet[1])  V7_Signature <- Luciernaga_QC(x=MyUnstainedGatingSet[1], desiredAF = \"V7-A\",                     subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\",                     Unstained = TRUE, ratiopopcutoff = 0.001, Verbose = FALSE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> Normalizing Data for Signature Comparison  PerCPCy55_Signatures <- Luciernaga_QC(x=MyGatingSet[9], subsets=\"lymphocytes\", removestrings=removestrings,                         sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                         ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                         ExportType = \"data\", SignatureReturnNow = FALSE, outpath = NULL,                         experiment = \"PerCP\", condition = \"Test\", Increments=0.1, Subtraction = \"External\",                          CellAF=V7_Signature)  Data <- PerCPCy55_Signatures %>% filter(Count > 60) %>% select(-Sample, -Experiment, -Condition, -Count) %>%   rename(Sample = Cluster)  Fluorophores <- Data %>% pull(Sample)  AfterSubtraction <- QC_ViewSignature(x=Fluorophores, data=Data) #> Normalizing Data for Signature Comparison  plotly::ggplotly(AfterSubtraction) PerCPCy5.5_Sample <- Data[1,]  x <- PerCPCy5.5_Sample %>% pull(Sample)  ThePerCPCy5.5 <- QC_WhatsThis(x=x, data=PerCPCy5.5_Sample, NumberHits = 5, returnPlots = TRUE) #> Normalizing Data for Signature Comparison ThePerCPCy5.5[1] #> [[1]] #>     Fluorophore ID_B9_10-V13_07-YG6_05 #> 1   cFluor B690                   0.96 #> 2   PerCP-Cy5.5                   0.96 #> 3 PerCP-Vio 700                   0.95 #> 4        SBB700                   0.93 #> 5         BB700                   0.91 plotly::ggplotly(ThePerCPCy5.5[[2]]) InternalPerCPCy55_Signatures <- Luciernaga_QC(x=MyGatingSet[9], subsets=\"lymphocytes\", removestrings=removestrings,                         sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                         ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                         ExportType = \"data\", SignatureReturnNow = FALSE, outpath = NULL,                         experiment = \"PerCP\", condition = \"Test\", Increments=0.1, Subtraction = \"Internal\")  Data <- InternalPerCPCy55_Signatures %>% filter(Count > 60) %>% select(-Sample, -Experiment, -Condition, -Count) %>%   rename(Sample = Cluster)  Fluorophores <- Data %>% pull(Sample)  AfterSubtraction <- QC_ViewSignature(x=Fluorophores, data=Data) #> Normalizing Data for Signature Comparison  plotly::ggplotly(AfterSubtraction) InternalPerCPCy5.5_Sample <- Data[1,]  x <- InternalPerCPCy5.5_Sample %>% pull(Sample)  TheInternalPerCPCy5.5 <- QC_WhatsThis(x=x, data=InternalPerCPCy5.5_Sample, NumberHits = 5, returnPlots = TRUE) #> Normalizing Data for Signature Comparison TheInternalPerCPCy5.5[1] #> [[1]] #>     Fluorophore ID_B9_10-YG6_06-V13_06 #> 1   cFluor B690                   0.99 #> 2   PerCP-Cy5.5                   0.99 #> 3 PerCP-Vio 700                   0.94 #> 4        SBB700                   0.94 #> 5         BB700                   0.90 plotly::ggplotly(TheInternalPerCPCy5.5[[2]]) pData(MyGatingSet[16]) #>                                            name #> CD45RA_BV510(Cells).fcs CD45RA_BV510(Cells).fcs  V7_Signature <- Luciernaga_QC(x=MyUnstainedGatingSet[1], desiredAF = \"V7-A\",                     subsets=\"lymphocytes\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"cells\",                     Unstained = TRUE, ratiopopcutoff = 0.001, Verbose = FALSE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> Normalizing Data for Signature Comparison  BV510 <- Luciernaga_QC(x=MyGatingSet[16], subsets=\"lymphocytes\", removestrings=removestrings,                         sample.name=\"GUID\", unmixingcontroltype = \"cells\", Unstained = FALSE,                         ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\",                         ExportType = \"data\", SignatureReturnNow = FALSE, outpath = NULL,                         experiment = \"PerCP\", condition = \"Test\", Increments=0.1, Subtraction=\"Internal\",                         CellAF=V7_Signature) #> Only a single detector present. If this was not an autofluorescence overlap #>               fluourophore, it would suggest there was no antibody staining, or everything #>               was overstained. Please investigate further.  Data <- BV510 %>% filter(Count > 60) %>% select(-Sample, -Experiment, -Condition, -Count) %>%   rename(Sample = Cluster)  Fluorophores <- Data %>% pull(Sample)  AfterSubtraction <- QC_WhatsThis(x=Fluorophores, data=Data, NumberHits=5, returnPlots = TRUE) #> Normalizing Data for Signature Comparison  AfterSubtraction[1] #> [[1]] #>         Fluorophore ID_V7_10-V6_08-UV8_04 #> 1             BV510                  1.00 #> 2    LIVE DEAD Aqua                  0.99 #> 3 Viobility 405-520                  0.97 #> 4       Zombie Aqua                  0.97 #> 5          VioGreen                  0.96 plotly::ggplotly(AfterSubtraction[[2]])"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"data-export","dir":"Articles","previous_headings":"Luciernaga_QC > Single Color Unmixing Controls","what":"Data Export","title":"Fluorescence Signatures","text":"examples, ExportType set “data”. case Unstained unmixing controls, can also export “.fcs” files storage use flow cytometry software. Unlike Unstained controls nothing subtracted, single color unmixing controls values subtracted derive signatures used clustering, require additional arguments. SCData can set either “subtracted” “raw”. dictates whether values within new “.fcs” file ones background subtraction, original raw MFI values need subtracted . Please note, time, “raw” works Subtracted = “Internal_General” “External”. still process designing way “Internal” return raw values rather subtraction ones. choice select SCData partly depends plan .fcs files afterwards. bringing software (let’s use Cytek’s SpectroFlo current example) want avoid software subtract background autofluorescence Luciernaga .fcs output already background subtracted returned SCData = “subtracted”. need either export SCData set “raw”, provision file workaround get around subtraction step. One way done development provide NegativeType argument, comes arguments “default”, “artificial” “samples”. Default doesn’t add anything .fcs file. Artificial adds certain number events MFI values detectors set 0. Samples returns certain number events MFI values corresponding autofluorescence signature used subtract background (currently restricted Subtraction = “Internal_Generalized” “External”). using single-color unmixed .fcs file Luciernaga within SpectroFlo, set single color controls adding use internal background subtraction within software, 1) SCData set “subtracted” use NegativeType “artifical” provision internal negative consisting entirely 0 MFI values can set internal negative gate . Consequently, MFI values altered, single color unmixing control retains ’s signature unmixing. Alternatively, 2) SCData set return “raw” MFI values (original values), provision NegativeType “samples” provide background AF signature events set internal negative gate extract final signature within software. finally, bringing files software try extract additional background, can leave SCData = “subtractd” NegativeType = “default” retain data format returned Luciernaga_QC() can tell, coding decisions/bugs/consideration portion workflow remain automated time paper need graduate submitted can justify yet optimizing code multiple moving parts. , hang , reach questions. always, combination purrr map function, can iterate entire GatingSet, returning isolated signatures single-color unmixing controls.","code":"StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") SingleStain_Signatures <- Luciernaga_QC(x=MyGatingSet[2], subsets=\"lymphocytes\",                                         removestrings=removestrings, sample.name=\"GUID\",                                         unmixingcontroltype = \"cells\", Unstained = FALSE,                                         ratiopopcutoff = 0.001, Verbose = FALSE,                                         AFOverlap = AFOverlap, stats = \"median\",                                         ExportType = \"fcs\", SignatureReturnNow = FALSE,                                         outpath = StorageLocation, Increments=0.1,                                         SecondaryPeaks=2, experiment = \"UnstainedSignature\",                                         condition = \"Test\", SCData=\"subtracted\",NegativeType=\"artificial\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") SingleStain_Signatures <- Luciernaga_QC(x=MyGatingSet[2], subsets=\"lymphocytes\",                                         removestrings=removestrings, sample.name=\"GUID\",                                         unmixingcontroltype = \"cells\", Unstained = FALSE,                                         ratiopopcutoff = 0.001, Verbose = FALSE,                                         AFOverlap = AFOverlap, stats = \"median\",                                         ExportType = \"fcs\", SignatureReturnNow = FALSE,                                         outpath = StorageLocation, Increments=0.1,                                         SecondaryPeaks=2, experiment = \"UnstainedSignature\",                                         condition = \"Test\", SCData=\"subtracted\",NegativeType=\"samples\") TemporaryFolder <- tempdir()  SingleStain_Signatures <- Luciernaga_QC(x=MyGatingSet[2], subsets=\"lymphocytes\",                                         removestrings=removestrings, sample.name=\"GUID\",                                         unmixingcontroltype = \"cells\", Unstained = FALSE,                                         ratiopopcutoff = 0.001, Verbose = FALSE,                                         AFOverlap = AFOverlap, stats = \"median\",                                         ExportType = \"fcs\", SignatureReturnNow = FALSE,                                         outpath = TemporaryFolder, Increments=0.1,                                         SecondaryPeaks=2, experiment = \"UnstainedSignature\",                                         condition = \"Test\", SCData=\"subtracted\", NegativeType=\"default\")  ExportedFCSFiles <- list.files(TemporaryFolder, pattern=\"fcs\") ExportedFCSFiles StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") SingleStain_Signatures <- map(.x=MyGatingSet, .f=Luciernaga_QC, subsets=\"lymphocytes\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = FALSE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"fcs\", SignatureReturnNow = FALSE,                               outpath = TemporaryFolder, Increments=0.1,                               SecondaryPeaks=2, experiment = \"UnstainedSignature\",                               condition = \"Test\", SCData=\"subtracted\",                               NegativeType=\"default\"))"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"bead-single-color-signatures","dir":"Articles","previous_headings":"Luciernaga_QC","what":"Bead Single-Color Signatures","title":"Fluorescence Signatures","text":"covered basic functionality Luciernaga_QC() examples, briefly cover adjustments running unmixing controls derived beads. recovering main fluorescence peak stained beads rather simple due ’s substantially brighter MFI, experience Invitrogen’s UltraComp eBeads Plus(TM) difficult differentiate unstained bead peaks degrading antibody peaks. unlike unstained cells, one single bead autofluorescence peak, rather due low levels MFI background, detector ends characterized peak detector resembles noisy distribution across detectors. staining beads use, bright signal fluorophore stained beads seen . Beyond , next occupied peak detector dictated often noise normalize signature reflects uncertainty, see set desiredAF retrieve “YG1-” instead. noisy background signatures completely different (unlike case cells) need provision Luciernaga_QC() general unstained bead autofluorescence signature BeadAF signature Luciernaga_QC() enable external autofluorescence subtraction bead controls. Examples shown : now provisioned, can run single-color bead unmixing controls Luciernaga_QC() similar manner cell single-color unmixing controls. also need provide stand-argument main autofluorescence detector (BeadMainAF=“UV1-”) even though detector used (something update going forward) Beads subject AFOverlap.csv, set use Subtraction=“External” default. Consequently, accept SCData “raw” “subtracted”, NegativeType = “default”, “artificial”, “sample” similar manner described detail single-color cell unmixing controls export arguments.","code":"pData(MyBeadsGatingSet) #>                                                              name #> CCR4_BUV615(Beads).fcs                     CCR4_BUV615(Beads).fcs #> CCR6_BV786(Beads).fcs                       CCR6_BV786(Beads).fcs #> CCR7_BV650(Beads).fcs                       CCR7_BV650(Beads).fcs #> CD107a_APC-R700(Beads).fcs             CD107a_APC-R700(Beads).fcs #> CD127_BV421(Beads).fcs                     CD127_BV421(Beads).fcs #> CD16_APC(Beads).fcs                           CD16_APC(Beads).fcs #> CD161_BV480(Beads).fcs                     CD161_BV480(Beads).fcs #> CD25_PE-Cy5(Beads).fcs                     CD25_PE-Cy5(Beads).fcs #> CD26_PerCP-Cy5.5(Beads).fcs           CD26_PerCP-Cy5.5(Beads).fcs #> CD27_APC-Fire750(Beads).fcs           CD27_APC-Fire750(Beads).fcs #> CD3_AlexaFluor488(Beads).fcs         CD3_AlexaFluor488(Beads).fcs #> CD3_AlexaFluor647(Beads).fcs         CD3_AlexaFluor647(Beads).fcs #> CD3_SparkBlue550(Beads).fcs           CD3_SparkBlue550(Beads).fcs #> CD38_APC-Fire810(Beads).fcs           CD38_APC-Fire810(Beads).fcs #> CD4_BUV805(Beads).fcs                       CD4_BUV805(Beads).fcs #> CD45RA_BV510(Beads).fcs                   CD45RA_BV510(Beads).fcs #> CD56_BV605(Beads).fcs                       CD56_BV605(Beads).fcs #> CD62L_BUV395(Beads).fcs                   CD62L_BUV395(Beads).fcs #> CD69_BUV563(Beads).fcs                     CD69_BUV563(Beads).fcs #> CD7_BV711(Beads).fcs                         CD7_BV711(Beads).fcs #> CD8_BUV496(Beads).fcs                       CD8_BUV496(Beads).fcs #> CXCR3_BUV737(Beads).fcs                   CXCR3_BUV737(Beads).fcs #> Dump_CD14_PacificBlue(Beads).fcs Dump_CD14_PacificBlue(Beads).fcs #> Dump_CD19_PacificBlue(Beads).fcs Dump_CD19_PacificBlue(Beads).fcs #> IFNg_BV750(Beads).fcs                       IFNg_BV750(Beads).fcs #> NKG2D_PE(Beads).fcs                           NKG2D_PE(Beads).fcs #> PD1_PE-Vio770(Beads).fcs                 PD1_PE-Vio770(Beads).fcs #> TNFa_PE-Dazzle594(Beads).fcs         TNFa_PE-Dazzle594(Beads).fcs #> Va7.2_AlexaFluor647(Beads).fcs     Va7.2_AlexaFluor647(Beads).fcs #> VD2_BUV661(Beads).fcs                       VD2_BUV661(Beads).fcs  BV786 <- Luciernaga_QC(x=MyBeadsGatingSet[2], desiredAF = NULL,                     subsets=\"singlets\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"beads\",                     Unstained = FALSE, ratiopopcutoff = 0.001, Verbose = TRUE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> 0.19 of all events were negative and will be rounded to 0 #> Returning Peak Bead Detector Medians #> Normalizing Data for Signature Comparison pData(MyBeadsGatingSet) #>                                                              name #> CCR4_BUV615(Beads).fcs                     CCR4_BUV615(Beads).fcs #> CCR6_BV786(Beads).fcs                       CCR6_BV786(Beads).fcs #> CCR7_BV650(Beads).fcs                       CCR7_BV650(Beads).fcs #> CD107a_APC-R700(Beads).fcs             CD107a_APC-R700(Beads).fcs #> CD127_BV421(Beads).fcs                     CD127_BV421(Beads).fcs #> CD16_APC(Beads).fcs                           CD16_APC(Beads).fcs #> CD161_BV480(Beads).fcs                     CD161_BV480(Beads).fcs #> CD25_PE-Cy5(Beads).fcs                     CD25_PE-Cy5(Beads).fcs #> CD26_PerCP-Cy5.5(Beads).fcs           CD26_PerCP-Cy5.5(Beads).fcs #> CD27_APC-Fire750(Beads).fcs           CD27_APC-Fire750(Beads).fcs #> CD3_AlexaFluor488(Beads).fcs         CD3_AlexaFluor488(Beads).fcs #> CD3_AlexaFluor647(Beads).fcs         CD3_AlexaFluor647(Beads).fcs #> CD3_SparkBlue550(Beads).fcs           CD3_SparkBlue550(Beads).fcs #> CD38_APC-Fire810(Beads).fcs           CD38_APC-Fire810(Beads).fcs #> CD4_BUV805(Beads).fcs                       CD4_BUV805(Beads).fcs #> CD45RA_BV510(Beads).fcs                   CD45RA_BV510(Beads).fcs #> CD56_BV605(Beads).fcs                       CD56_BV605(Beads).fcs #> CD62L_BUV395(Beads).fcs                   CD62L_BUV395(Beads).fcs #> CD69_BUV563(Beads).fcs                     CD69_BUV563(Beads).fcs #> CD7_BV711(Beads).fcs                         CD7_BV711(Beads).fcs #> CD8_BUV496(Beads).fcs                       CD8_BUV496(Beads).fcs #> CXCR3_BUV737(Beads).fcs                   CXCR3_BUV737(Beads).fcs #> Dump_CD14_PacificBlue(Beads).fcs Dump_CD14_PacificBlue(Beads).fcs #> Dump_CD19_PacificBlue(Beads).fcs Dump_CD19_PacificBlue(Beads).fcs #> IFNg_BV750(Beads).fcs                       IFNg_BV750(Beads).fcs #> NKG2D_PE(Beads).fcs                           NKG2D_PE(Beads).fcs #> PD1_PE-Vio770(Beads).fcs                 PD1_PE-Vio770(Beads).fcs #> TNFa_PE-Dazzle594(Beads).fcs         TNFa_PE-Dazzle594(Beads).fcs #> Va7.2_AlexaFluor647(Beads).fcs     Va7.2_AlexaFluor647(Beads).fcs #> VD2_BUV661(Beads).fcs                       VD2_BUV661(Beads).fcs  NotBV786 <- Luciernaga_QC(x=MyBeadsGatingSet[2], desiredAF = \"YG1-A\",                     subsets=\"singlets\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"beads\",                     Unstained = FALSE, ratiopopcutoff = 0.001, Verbose = TRUE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> 0.19 of all events were negative and will be rounded to 0 #> Returning Peak Bead Detector Medians #> Normalizing Data for Signature Comparison pData(MyBeadsGatingSet) #>                                                              name #> CCR4_BUV615(Beads).fcs                     CCR4_BUV615(Beads).fcs #> CCR6_BV786(Beads).fcs                       CCR6_BV786(Beads).fcs #> CCR7_BV650(Beads).fcs                       CCR7_BV650(Beads).fcs #> CD107a_APC-R700(Beads).fcs             CD107a_APC-R700(Beads).fcs #> CD127_BV421(Beads).fcs                     CD127_BV421(Beads).fcs #> CD16_APC(Beads).fcs                           CD16_APC(Beads).fcs #> CD161_BV480(Beads).fcs                     CD161_BV480(Beads).fcs #> CD25_PE-Cy5(Beads).fcs                     CD25_PE-Cy5(Beads).fcs #> CD26_PerCP-Cy5.5(Beads).fcs           CD26_PerCP-Cy5.5(Beads).fcs #> CD27_APC-Fire750(Beads).fcs           CD27_APC-Fire750(Beads).fcs #> CD3_AlexaFluor488(Beads).fcs         CD3_AlexaFluor488(Beads).fcs #> CD3_AlexaFluor647(Beads).fcs         CD3_AlexaFluor647(Beads).fcs #> CD3_SparkBlue550(Beads).fcs           CD3_SparkBlue550(Beads).fcs #> CD38_APC-Fire810(Beads).fcs           CD38_APC-Fire810(Beads).fcs #> CD4_BUV805(Beads).fcs                       CD4_BUV805(Beads).fcs #> CD45RA_BV510(Beads).fcs                   CD45RA_BV510(Beads).fcs #> CD56_BV605(Beads).fcs                       CD56_BV605(Beads).fcs #> CD62L_BUV395(Beads).fcs                   CD62L_BUV395(Beads).fcs #> CD69_BUV563(Beads).fcs                     CD69_BUV563(Beads).fcs #> CD7_BV711(Beads).fcs                         CD7_BV711(Beads).fcs #> CD8_BUV496(Beads).fcs                       CD8_BUV496(Beads).fcs #> CXCR3_BUV737(Beads).fcs                   CXCR3_BUV737(Beads).fcs #> Dump_CD14_PacificBlue(Beads).fcs Dump_CD14_PacificBlue(Beads).fcs #> Dump_CD19_PacificBlue(Beads).fcs Dump_CD19_PacificBlue(Beads).fcs #> IFNg_BV750(Beads).fcs                       IFNg_BV750(Beads).fcs #> NKG2D_PE(Beads).fcs                           NKG2D_PE(Beads).fcs #> PD1_PE-Vio770(Beads).fcs                 PD1_PE-Vio770(Beads).fcs #> TNFa_PE-Dazzle594(Beads).fcs         TNFa_PE-Dazzle594(Beads).fcs #> Va7.2_AlexaFluor647(Beads).fcs     Va7.2_AlexaFluor647(Beads).fcs #> VD2_BUV661(Beads).fcs                       VD2_BUV661(Beads).fcs  NotBV786 <- Luciernaga_QC(x=MyBeadsGatingSet[2], desiredAF = \"V7-A\",                     subsets=\"singlets\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"beads\",                     Unstained = FALSE, ratiopopcutoff = 0.001, Verbose = TRUE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> 0.19 of all events were negative and will be rounded to 0 #> Returning Peak Bead Detector Medians #> Normalizing Data for Signature Comparison MyUnstainedBeadsGatingSet #> A GatingSet with 1 samples UnstainedBeads <- Luciernaga_QC(x=MyUnstainedBeadsGatingSet[1], desiredAF = NULL,                     subsets=\"singlets\", removestrings=removestrings,                     sample.name=\"GUID\", unmixingcontroltype = \"beads\",                     Unstained = TRUE, ratiopopcutoff = 0.001, Verbose = TRUE,                     AFOverlap = AFOverlap, stats = \"median\",                     ExportType = \"data.frame\", SignatureReturnNow = TRUE,                     outpath = NULL) #> 0.32 of all events were negative and will be rounded to 0 #> Returning Peak Bead Detector Medians #> Normalizing Data for Signature Comparison #> Returning designated stats values for Beads_Unstained, please return #>     to LuciernagaQC as BeadsAF for subtraction for single color unmixing controls UnstainedBeads #>      UV1-A    UV2-A   UV3-A    UV4-A   UV5-A    UV6-A    UV7-A    UV8-A #> 1 87.05594 113.8309 65.1525 98.58407 108.885 152.8406 214.1628 153.3984 #>      UV9-A   UV10-A   UV11-A   UV12-A   UV13-A   UV14-A   UV15-A   UV16-A #> 1 317.5441 18.70531 84.89907 25.17594 21.97781 30.41938 20.04406 46.07532 #>       V1-A     V2-A     V3-A     V4-A V5-A     V6-A     V7-A     V8-A  V9-A #> 1 135.1281 226.9438 339.5563 296.7594  363 323.6406 419.6844 295.8313 191.4 #>      V10-A   V11-A    V12-A    V13-A    V14-A    V15-A    V16-A    B1-A    B2-A #> 1 230.3469 121.825 69.50625 69.19688 61.94375 64.69375 11.20625 220.545 136.175 #>       B3-A     B4-A     B5-A     B6-A  B7-A    B8-A    B9-A  B10-A B11-A  B12-A #> 1 174.2325 124.9625 135.3625 107.5425 95.94 34.2875 73.9375 52.325 41.34 32.695 #>   B13-A  B14-A   YG1-A YG2-A  YG3-A  YG4-A YG5-A  YG6-A YG7-A YG8-A  YG9-A #> 1 39.65 35.035 486.465 163.1 125.37 100.24 36.68 48.125 69.58 30.38 56.525 #>   YG10-A   R1-A    R2-A   R3-A    R4-A  R5-A  R6-A   R7-A   R8-A #> 1      0 149.24 120.855 138.25 157.815 70.84 53.48 74.935 59.115 StorageLocation <- file.path(\"C:\", \"Users\", \"12692\", \"Desktop\")  SingleStain_Signatures <- map(.x=MyBeadsGatingSet[2], .f=Luciernaga_QC, subsets=\"singlets\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = FALSE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"data\", SignatureReturnNow = FALSE,                               outpath = StorageLocation, Increments=0.1,                               SecondaryPeaks=2, experiment = \"UnstainedSignature\",                               condition = \"Test\", SCData=\"subtracted\",                               NegativeType=\"default\", BeadAF=UnstainedBeads,                               BeadMainAF=\"UV1-A\")  gt(SingleStain_Signatures[[1]]) StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  SingleStain_Signatures <- map(.x=MyBeadsGatingSet[2], .f=Luciernaga_QC, subsets=\"singlets\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = FALSE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"fcs\", SignatureReturnNow = FALSE,                               outpath = StorageLocation, Increments=0.1,                               SecondaryPeaks=2, experiment = \"UnstainedSignature\",                               condition = \"Test\", SCData=\"subtracted\",                               NegativeType=\"default\", BeadAF=UnstainedBeads,                               BeadMainAF=\"UV1-A\")"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescenceSignatures.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Fluorescence Signatures","text":"made complicated Luciernaga package functions. hope helps explain function makes next two vignettes possible scaled process specimens within GatingSet. Congratulations!","code":"#> R version 4.4.1 (2024-06-14 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_United States.utf8  #> [2] LC_CTYPE=English_United States.utf8    #> [3] LC_MONETARY=English_United States.utf8 #> [4] LC_NUMERIC=C                           #> [5] LC_TIME=English_United States.utf8     #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] htmltools_0.5.8.1    plotly_4.10.4        gt_0.11.1            #>  [4] stringr_1.5.1        purrr_1.0.2          dplyr_1.1.4          #>  [7] data.table_1.16.2    ggcyto_1.32.0        ncdfFlow_2.50.0      #> [10] BH_1.84.0-0          ggplot2_3.5.1        openCyto_2.16.1      #> [13] flowWorkspace_4.16.0 flowCore_2.16.0      Luciernaga_0.99.2    #> [16] BiocStyle_2.32.1     #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1    viridisLite_0.4.2   farver_2.1.2        #>  [4] viridis_0.6.5       fastmap_1.2.0       lazyeval_0.2.2      #>  [7] XML_3.99-0.17       digest_0.6.37       timechange_0.3.0    #> [10] lifecycle_1.0.4     magrittr_2.0.3      compiler_4.4.1      #> [13] rlang_1.1.4         sass_0.4.9          tools_4.4.1         #> [16] utf8_1.2.4          yaml_2.3.10         figpatch_0.2        #> [19] knitr_1.48          labeling_0.4.3      htmlwidgets_1.6.4   #> [22] plyr_1.8.9          xml2_1.3.6          RColorBrewer_1.1-3  #> [25] Rtsne_0.17          withr_3.0.1         RProtoBufLib_2.16.0 #> [28] BiocGenerics_0.50.0 desc_1.4.3          grid_4.4.1          #> [31] stats4_4.4.1        fansi_1.0.6         colorspace_2.1-1    #> [34] progressr_0.15.1    scales_1.3.0        ggridges_0.5.6      #> [37] cli_3.6.3           rmarkdown_2.28      ragg_1.3.3          #> [40] generics_0.1.3      rstudioapi_0.17.0   httr_1.4.7          #> [43] reshape2_1.4.4      cachem_1.1.0        zlibbioc_1.50.0     #> [46] parallel_4.4.1      BiocManager_1.30.25 matrixStats_1.4.1   #> [49] vctrs_0.6.5         Matrix_1.7-0        jsonlite_1.8.9      #> [52] lsa_0.73.3          cytolib_2.16.0      bookdown_0.41       #> [55] patchwork_1.3.0     S4Vectors_0.42.1    RBGL_1.80.0         #> [58] Rgraphviz_2.48.0    crosstalk_1.2.1     systemfonts_1.1.0   #> [61] jquerylib_0.1.4     hexbin_1.28.4       tidyr_1.3.1         #> [64] glue_1.8.0          pkgdown_2.1.1       uwot_0.2.2          #> [67] stringi_1.8.4       lubridate_1.9.3     gtable_0.3.5        #> [70] munsell_0.5.1       tibble_3.2.1        pillar_1.9.0        #> [73] graph_1.82.0        R6_2.5.1            textshaping_0.4.0   #> [76] evaluate_1.0.1      lattice_0.22-6      Biobase_2.64.0      #> [79] highr_0.11          SnowballC_0.7.1     bslib_0.8.0         #> [82] Rcpp_1.0.13         flowClust_3.42.0    gridExtra_2.3       #> [85] xfun_0.48           zoo_1.8-12          fs_1.6.4            #> [88] pkgconfig_2.0.3"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fluorescent Reports","text":"vignette builds can done outputs Luciernaga_QC() function main focus vignette 04_FluorescenceSignatures. Please read vignette details regarding function processes .fcs files individual signatures. following vignette covers different functions take Luciernaga_QC() outputs, either “data” “fcs” format, process useful reports gain insight fluorescence signatures present within unmixing controls (single-color unstained). end vignette, discuss can extend reports visualize changes signature across time monitor changes antibody-vial quality instrument health. functions cover vignette also resurface look Luciernaga unmixing functions covered Vignette_06.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set Up","title":"Fluorescent Reports","text":"vignette, focus characterizing cell unmixing controls. following setup code repeat previous vignettes, used provide Luciernaga_QC() outputs needed functions covering. Let’s first load required packages calling library. can find .fcs files stored within Luciernaga packages extdata folder sort respective type Now lets create GatingSet single-color cell unmixing controls Now lets create GatingSet unstained cell unmixing controls","code":"library(Luciernaga) library(flowCore) library(flowWorkspace) library(openCyto) library(ggcyto)   library(data.table) library(dplyr) library(purrr)  library(stringr) library(ggplot2) library(gt) library(plotly) library(htmltools) File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) head(FCS_Files[10:30], 20) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedBeads <- UnstainedFCSFiles[grep(\"Beads\", UnstainedFCSFiles)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)]  BeadFCSFiles <- FCS_Files[grep(\"Beads\", FCS_Files)] BeadSingleColors <- BeadFCSFiles[-grep(\"Unstained\", BeadFCSFiles)]  CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)] MyCytoSet <- load_cytoset_from_fcs(CellSingleColors,                                     truncate_max_range = FALSE,                                     transform = FALSE) MyCytoSet MyGatingSet <- GatingSet(MyCytoSet) MyGatingSet FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyGates <- fread(file.path(path = FileLocation, pattern = 'Gates.csv')) gt(MyGates) MyGatingTemplate <- gatingTemplate(MyGates) gt_gating(MyGatingTemplate, MyGatingSet) MyGatingSet[[1]] MyUnstainedCytoSet <- load_cytoset_from_fcs(UnstainedCells,                                     truncate_max_range = FALSE,                                     transform = FALSE) MyUnstainedCytoSet MyUnstainedGatingSet <- GatingSet(MyUnstainedCytoSet) MyUnstainedGatingSet FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyGates <- fread(file.path(path = FileLocation, pattern = 'Gates.csv')) gt(MyGates) MyGatingTemplate <- gatingTemplate(MyGates) gt_gating(MyGatingTemplate, MyUnstainedGatingSet) MyUnstainedGatingSet[[1]]"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"generate-luciernaga_qc-outputs","dir":"Articles","previous_headings":"","what":"Generate Luciernaga_QC Outputs","title":"Fluorescent Reports","text":"Now GatingSets re-established, let’s continue last vignette left processing fcs files Luciernaga_QC characterize fluorescent signatures within. Let’s first provision AFOverlap csv handle conflicts. next generate CellAF unstained signature can used fluorophore-autofluorescence overlap files encountered: start ExportType = “data” return now cell Single-Color Unstained Unmixing controls. Let’s now repeat process Unstained GatingSet.","code":"FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern,                         full.names = TRUE) AFOverlap_CSV <- read.csv(AFOverlap, check.names = FALSE) AFOverlap_CSV # pData(MyUnstainedGatingSet[1]) removestrings <- c(\".fcs\")  TheCellAF <- map(.x=MyUnstainedGatingSet[1], .f=Luciernaga_QC, subsets=\"lymphocytes\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = TRUE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"data\", SignatureReturnNow = TRUE,                               outpath = TemporaryFolder, Increments=0.1,                               SecondaryPeaks=2, experiment = \"FirstExperiment\",                               condition = \"ILTPanel\", SCData=\"subtracted\",                               NegativeType=\"default\")  TheCellAF <- TheCellAF[[1]] #Removes list caused by map  gt(TheCellAF) SingleColor_Data <- map(.x=MyGatingSet, .f=Luciernaga_QC, subsets=\"lymphocytes\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = FALSE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"data\", SignatureReturnNow = FALSE,                               outpath = TemporaryFolder, Increments=0.1,                               SecondaryPeaks=2, experiment = \"FirstExperiment\",                               condition = \"ILTPanel\", Subtraction = \"Internal\",                                CellAF=TheCellAF, SCData=\"subtracted\",                               NegativeType=\"default\") %>% bind_rows() nrow(SingleColor_Data) gt(head(SingleColor_Data, 5)) # pData(MyUnstainedGatingSet)  Unstained_Data <- map(.x=MyUnstainedGatingSet, .f=Luciernaga_QC, subsets=\"lymphocytes\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = TRUE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"data\", SignatureReturnNow = FALSE,                               outpath = TemporaryFolder, Increments=0.1,                               SecondaryPeaks=2, experiment = \"FirstExperiment\",                               condition = \"ILTPanel\", Subtraction = \"Internal\",                                CellAF=TheCellAF, SCData=\"subtracted\",                               NegativeType=\"default\") %>% bind_rows() nrow(Unstained_Data) gt(head(Unstained_Data, 5))"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"luciernaga_plots","dir":"Articles","previous_headings":"","what":"Luciernaga_Plots","title":"Fluorescent Reports","text":"Luciernaga_Plots() function works directly Luciernaga_QC() output ExportType = “data”. Let’s start exploring can . first provide file.path panel information, used Luciernaga_Plots() arrange plots/report order fluorophores listed panel. mismatch fluorophore data panel, rearrange proceed output. SingleColor_Data output currently contains information every single fluorophore .fcs file processed. can pass entire object Luciernaga_Plots() process report , can also tailor output using dplyr target particular fluorophores interest want find information specific fluorophore. can tell, processed Luciernaga_QC() increments set 0.1 lot splitting specific Clusters fluorophore. can overwhelming Luciernaga_Plots() default arguments individual circumstances, example : work around , data.frame handed Luciernaga_Plot(), can filter CellPopRatio dictate percentage total outputed cells Cluster needs visualized. clusters excluded, gathered function classified Cluster “”. Let’s see action setting CellPopRatio 0.05 (cluster retained makes 5% stained cells): can see basic available formats Luciernaga_Plots() outputs. Namely, Luciernaga_QC() output can visualize LinePlots (showing visualized signatures), CosinePlots (showing cosine similarity matrix values individual signatures relative ), StackedBarPlots HeatmapPlots (different ways show relative abundance cluster signatures). example, using returntype=“patchwork” argument. Luciernaga packages, takes arguments passed Utility_Patchwork() function dictate layout. Similarly, can set returntype = “pdf” generate .pdf file report contents sent location specified outfolder filename. cases , report returned four plots. can turned desired. example, want retrieve individual plot elements, leave desired plot value TRUE, set plot arguments FALSE. Additionally, switch returntype = “patchwork” “plots” retrieve actual ggplot2 object interest. returned objects still list format, use rCRANpkg(\"purrr\") flatten function get rid list, allowing ggplot2 object handed rCRANpkg(\"plotly\") ggplotly function allow interactive elements. Since returned plots ggplot2 objects, can additionally modify using ggplot2 arguments change respective elements appearance aesthetics however see fit. Please refer rCRANpkg(\"ggplot2\") vignettes tutorials , ’s outside scope vignette. characterized pieces Luciernaga_Plots() single fluorophore, let’s quickly see behaves without initial filtering entire SC_Data can seen, automatically processed data individual fluorophore. , arguments can altered turn /individual plot elements, change orientation, alter return type examples . examples relied LuciernagaQC() ExportType = “data” output generate desired reports plots. can saved individual users .csv can retrieved later use.","code":"FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"^Panel.csv\" CSV <- list.files(path=FileLocation, pattern=pattern, full.names=TRUE) TheFluorophoreOrder <- read.csv(CSV, check.names = FALSE) BUV615 <- SingleColor_Data %>% filter(str_detect(Sample, \"BUV615\")) nrow(BUV615) head(BUV615) TheFluorophoreOrder <- read.csv(CSV, check.names = FALSE) TheFluorophore <- TheFluorophoreOrder %>% filter(Fluorophore %in% \"BUV615\")  ThePlotReport <- Luciernaga_Plots(data=BUV615, RetainedType=\"normalized\", CellPopRatio=0.001,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"patchwork\",                                   LinePlots=TRUE, CosinePlots=TRUE, StackedBarPlots = TRUE,                                   HeatmapPlots = TRUE, reference = TheFluorophore) ThePlotReport[[1]] TheFluorophoreOrder <- read.csv(CSV, check.names = FALSE) TheFluorophore <- TheFluorophoreOrder %>% filter(Fluorophore %in% \"BUV615\")  ThePlotReport <- Luciernaga_Plots(data=BUV615, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"patchwork\",                                   LinePlots=TRUE, CosinePlots=TRUE, StackedBarPlots = TRUE,                                   HeatmapPlots = TRUE, reference = TheFluorophore) ThePlotReport[[1]] ThePlotReport <- Luciernaga_Plots(data=BUV615, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"patchwork\",                                   LinePlots=TRUE, CosinePlots=TRUE, StackedBarPlots = TRUE,                                   HeatmapPlots = TRUE, reference = TheFluorophore, thecolumns=2,                                   therows=2, width=7, height=9) ThePlotReport[[1]] ThePlotReport <- Luciernaga_Plots(data=BUV615, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"patchwork\",                                   LinePlots=TRUE, CosinePlots=FALSE, StackedBarPlots = FALSE,                                   HeatmapPlots = TRUE, reference = TheFluorophore, thecolumns=2,                                   therows=2, width=7, height=9) ThePlotReport[[1]] ThePlotReport <- Luciernaga_Plots(data=BUV615, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"plots\",                                   LinePlots=TRUE, CosinePlots=FALSE, StackedBarPlots = FALSE,                                   HeatmapPlots = FALSE, reference = TheFluorophore)  ThePlotReport <- purrr::flatten(ThePlotReport) plotly::ggplotly(ThePlotReport[[1]]) ThePlotReport <- Luciernaga_Plots(data=BUV615, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"plots\",                                   LinePlots=FALSE, CosinePlots=TRUE, StackedBarPlots = FALSE,                                   HeatmapPlots = FALSE, reference = TheFluorophore)  ThePlotReport <- purrr::flatten(ThePlotReport) plotly::ggplotly(ThePlotReport[[1]]) ThePlotReport <- Luciernaga_Plots(data=BUV615, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"plots\",                                   LinePlots=FALSE, CosinePlots=FALSE, StackedBarPlots = TRUE,                                   HeatmapPlots = FALSE, reference = TheFluorophore)  ThePlotReport <- purrr::flatten(ThePlotReport) plotly::ggplotly(ThePlotReport[[1]]) ThePlotReport <- Luciernaga_Plots(data=BUV615, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"plots\",                                   LinePlots=FALSE, CosinePlots=FALSE, StackedBarPlots = FALSE,                                   HeatmapPlots = TRUE, reference = TheFluorophore)  ThePlotReport <- purrr::flatten(ThePlotReport) plotly::ggplotly(ThePlotReport[[1]]) TheFluorophoreOrder <- read.csv(CSV, check.names = FALSE)  ThePlotReport <- Luciernaga_Plots(data=SingleColor_Data, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"patchwork\",                                   LinePlots=TRUE, CosinePlots=TRUE, StackedBarPlots = TRUE,                                   HeatmapPlots = TRUE, reference = TheFluorophore) ThePlotReport[1:4] TheFluorophoreOrder <- read.csv(CSV, check.names = FALSE)  ThePlotReport <- Luciernaga_Plots(data=SingleColor_Data, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"plots\",                                   LinePlots=FALSE, CosinePlots=FALSE, StackedBarPlots = FALSE,                                   HeatmapPlots = TRUE, reference = TheFluorophore) ThePlotReport[1:4] # Saving Elsewhere StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") TheName <- \"SingleColorData.csv\" TheFinalLocation <- file.path(StorageLocation, TheName) write.csv(SingleColor_Data, TheFinalLocation, row.names=FALSE)  # Reading in Later TheRetrievedData <- read.csv(TheFinalLocation, check.names=FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"luciernaga_fcstoreport","dir":"Articles","previous_headings":"","what":"Luciernaga_FCSToReport","title":"Fluorescent Reports","text":"Luciernaga_FCSToReport() function handles cases LuciernagaQC() ExportType = “data” allow generation plots reports, instead, need take LuciernagaQC() ExportType = “fcs” outputs storage folder re-derrive equivalent data used Luciernaga_Plots(). demonstrate , let’s first switch Luciernaga_QC() ExportType argument “fcs” store single-color output .fcs files within temporary folder specific folder can retrieve needed: can now proceed evaluate Luciernaga_FCSToReport(): can see, returned Luciernaga_QC() style output can now evaluate using Luciernaga_Plots() described :","code":"StorageLocation <- file.path(tempdir(), \"LuciernagaTemporaryExamples\")  if (!dir.exists(StorageLocation)) {   dir.create(StorageLocation) }  SingleColor_Data <- map(.x=MyGatingSet[c(1:22, 25:30)], .f=Luciernaga_QC, subsets=\"lymphocytes\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = FALSE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"fcs\", Brightness=TRUE, SignatureReturnNow = FALSE,                               outpath = StorageLocation, Increments=0.1,                               SecondaryPeaks=2, experiment = \"FirstExperiment\",                               condition = \"ILTPanel\", Subtraction = \"Internal\",                                CellAF=TheCellAF, SCData=\"subtracted\",                               NegativeType=\"default\")  TheLuciernagaOutputs_FCS <- list.files(StorageLocation, pattern=\"fcs\", full.names = TRUE) head(TheLuciernagaOutputs_FCS, 4) TheLuciernagaOutputs_CSV <- list.files(StorageLocation, pattern=\"csv\", full.names = TRUE) head(TheLuciernagaOutputs_CSV, 4) ReferencePath <- system.file(\"extdata\", package = \"Luciernaga\") PanelPath <- file.path(ReferencePath, \"Panel.csv\") #PanelNames <- read.csv(PanelPath, check.names = FALSE) #PanelNames <- PanelNames %>% pull(Fluorophore) %>% gsub(\"-A\", \"\", .)  ReportOutput <- Luciernaga_FCSToReport(path=StorageLocation, reference=PanelPath, stats=\"median\",                       RetainedType = \"normalized\", experiment=\"FirstExperiment\",                       condition=\"ILTExperiment\", TheSummary = TRUE) gt(head(ReportOutput, 10)) ThePlotReport <- Luciernaga_Plots(data=ReportOutput, RetainedType=\"normalized\", CellPopRatio=0.05,                                   outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"plots\",                                   LinePlots=FALSE, CosinePlots=FALSE, StackedBarPlots = FALSE,                                   HeatmapPlots = TRUE, reference = PanelPath) ThePlotReport[1]"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"luciernaga_brightness","dir":"Articles","previous_headings":"","what":"Luciernaga_Brightness","title":"Fluorescent Reports","text":"One advantage retrieving data LuciernagaQC() ExportType = “fcs” outputs can generate additional type plot look individual brightness cells clustered within isolated signatures. accomplished switching couple arguments Luciernaga_FCSToReport() passing intermediate Luciernaga_Brightness() function example, needed modify list exclude PacificBlue Fluorophore failed generate Luciernaga_QC(). Panel.CSV also mismatch (FITC instead AlexaFluor488) rename. version APC-Fire810 bugged. resolve fix vignette :( make easier work . resulting brightness plot geom_density plot showing MFI respective clustered signatures. can tell ggplot2 object, bunch signatures relatively dim, reflects case seen signatures.","code":"ReferencePath <- system.file(\"extdata\", package = \"Luciernaga\") PanelPath <- file.path(ReferencePath, \"Panel.csv\") PanelNames <- read.csv(PanelPath, check.names = FALSE)  PanelNames <- PanelNames %>% filter(!str_detect(Fluorophore, \"Pacific\")) PanelNames <- PanelNames %>% mutate(Fluorophore = case_when(     Fluorophore == \"FITC\" ~ \"AlexaFluor488\",     TRUE ~ Fluorophore  # Keep all other values unchanged   ))  PanelItems <- PanelNames %>% pull(Fluorophore) %>% gsub(\"-A\", \"\", .)   BrightnessOutput <- Luciernaga_FCSToReport(path=StorageLocation, reference=PanelNames, stats=\"median\",                       RetainedType = \"raw\", experiment=\"FirstExperiment\", condition=\"ILTExperiement\",                        TheSummary = FALSE)  PanelItems <- gsub(\".\", \"\", fixed=TRUE, PanelItems) PanelItems <- gsub(\" \", \"\", fixed=TRUE, PanelItems) #PanelItems <- gsub(\"-\", \"\", fixed=TRUE, PanelItems)  BrightnessOutput$Sample <- gsub(\".\", \"\", fixed=TRUE, BrightnessOutput$Sample) BrightnessOutput$Sample <- gsub(\" \", \"\", fixed=TRUE, BrightnessOutput$Sample) #BrightnessOutput$Sample <- gsub(\"-\", \"\", fixed=TRUE, BrightnessOutput$Sample)  BrightnessPlots <- map(.x=PanelItems[c(28:29)], .f=Luciernaga_Brightness, data=BrightnessOutput,                       reference=PanelNames, Scaled=TRUE) ThePlot <- BrightnessPlots[[8]] ThePlot plotly::ggplotly(ThePlot)"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"luciernaga_lists","dir":"Articles","previous_headings":"","what":"Luciernaga_Lists","title":"Fluorescent Reports","text":"Luciernaga_Lists() wrapper function allows us merge Luciernaga_Brightness() plots Luciernaga_Plots() plots generate complete view fluorescent signatures given samples. addition able return “pdf” plot, can also used generate “html” output interactive (cost storage space used computer)","code":"FinalPlots <- Luciernaga_Lists(ListOfList = TheMainPlots, SecondaryList = BrightnessPlots, thecolumns = 2,                                 therows = 3, width=9, height=7, ReturnFolder = ReferencePath,                                CurrentExperiment = \"Test\", PlotType = \"html\")"},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"visualizing-longitudinally","dir":"Articles","previous_headings":"","what":"Visualizing Longitudinally","title":"Fluorescent Reports","text":"functions focused work primarily context visualizing variation Luciernaga_QC() isolated fluorescent signatures within context single experiment. happens want look longitudinally across series experiments monitor tandem degradation antibody vial, pinpoint instrumental issue impacted fluorophore signatures particular day? following functions still active development, require little upfront coding part user ensure data.frame object tidy compatible, attach workflow .","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/FluorescentReports.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Fluorescent Reports","text":"concludes vignette covering visualize Luciernaga_QC() outputs leverage insight occuring within individual fluorophores given experiment across time. Thanks patience happy visualizing.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"instrument-qc","dir":"Articles","previous_headings":"","what":"Instrument QC","title":"Quality Control","text":"vignette covers Luciernaga functions involved assessing instrumental quality control. Currently, section tailored Cytek Aurora Northern Light (TM) spectral cytometers utilize SpectroFlo acquisition unmixing software. reason platform bias spectral cytometers authors home institution designing package. like help us remedy historical bias expand functions instruments, feel free reach via GitHub! :) following functions can work either Levy-Jennings Tracking Reports generated following automated instrument QC (exported .csv files) retrieving equivalent data stored keywords within .fcs files description collection .fcs files across timespan interest. Cytek Aurora instruments use fluorescent beads part daily quality control checks. beads complex signatures, beads peak detectors either Ultraviolet Yellow-Green Laser can seen . Using QC beads, gains instrument detectors power individual lasers adjusted maintain stable MFI across time. adjustments available individual users part QC report, underlying data available Levy-Jennings tracking tab, option download .csv file. Unfortunately, “tidy” data format, limiting ability easy exploratory data analysis. provide couple functions convert .csv output “tidy” format visualize data contained within. first step indicate saved .csv file containing Levy-Jennings tracking data cytometer stored. local computer, code look similar following: vignette, use one Levy-Jennings Tracking .csvs 5 Laser Cytek Aurora (UV16-V16-B14-YG10-R8), can found within Luciernaga’s extdata folder.","code":"library(Luciernaga) library(flowCore) library(flowWorkspace)  library(openCyto) library(ggcyto)   library(data.table) library(dplyr) library(purrr)  library(stringr) library(ggplot2) library(gt) library(plotly) library(htmltools) File_Location <- system.file(\"extdata\", package = \"Luciernaga\") fcs_files <- list.files(File_Location, pattern=\".fcs\", full.names = TRUE) QCBeadFile <- fcs_files[grep(\"After\", fcs_files)][[1]]  QCBead_CS <- load_cytoset_from_fcs(QCBeadFile, transformation = FALSE, truncate_max_range = FALSE) QCBead_GS <- GatingSet(QCBead_CS)  Data <- Luciernaga_QC(x=QCBead_GS[1], subsets=\"root\", sample.name=\"GUID\", SignatureReturnNow = TRUE, Verbose=TRUE,               unmixingcontroltype=\"beads\", Unstained=TRUE, removestrings=\".fcs\", stats=\"median\")  Data <- Data %>% mutate(Sample=\"QCBeads\") %>% relocate(Sample, .before=1)  QCBeads <- QC_WhatsThis(x=\"QCBeads\", data=Data, NumberHits=0, returnPlots=TRUE)  QCBeads[[2]] FileLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\",                           \"LevyJenningsTracking.csv\") File_Location <- system.file(\"extdata\", package = \"Luciernaga\") CSV_Pattern <- \"LJTrackingData.CSV$\" CSV_Files <- list.files(path=File_Location, pattern=CSV_Pattern,full.names=TRUE) CSV_Files  DailyQCPattern <- \"^DailyQC\" DailyQC <- list.files(path=File_Location, pattern=DailyQCPattern,full.names=TRUE) DailyQC"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_fileprep_ljtracking","dir":"Articles","previous_headings":"Instrument QC","what":"QC_FilePrep_LJTracking","title":"Quality Control","text":"Since .CSV file tidy format, read.csv() similar functions struggle import correctly. function, QC_FilePrep() reads row individually text, follows pre-processing “tidy” format. Individual rows individual QC reports, columns different parameters. Additionally, individual parameter exceeded variance allowed resulting QC failure, recorded corresponding Flag- column. data now “tidy”, can readily used R plot individual detector(s) might interest. Additionally, setting QC_FilePrep() TrackChange TRUE generate similar output QC report showing Change previous QC report can provide additional information instrument monitoring.","code":"TidyData <- QC_FilePrep_LJTracking(x=CSV_Files, DailyQC=DailyQC) gt(head(TidyData, 5)) TidyData_Track <- QC_FilePrep_LJTracking(CSV_Files, DailyQC=DailyQC) gt(head(TidyData_Track, 3))"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_plots","dir":"Articles","previous_headings":"Instrument QC","what":"QC_Plots","title":"Quality Control","text":"data, can visualize . can done QC_Plots() individual parameters interest, iterarting different columns generate plots. Since large number parameters contained individual columns, argument “MeasurementType” filter columns matching character values column names. selected rest data used downstream plotting. Setting FailedFlag = TRUE add red box graph showcase date particular detector failed automated QC check exceeding allowed variance set instrument. functions Luciernaga, CytekQCPlots() uses Utility_Patchwork() .pdf generation. layout arrangement can edited providing additional arguments generate desired layout desired page size.","code":"head(colnames(TidyData), 20) StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  AvailableBroadMeasurementTypes <- c(\"Gain\", \"rCV\", \"Laser Delay\",                                     \"Area Scaling Factor\") SinglePlot <- \"UV7-Gain\"  TheSinglePlot <- QC_Plots(x = TidyData, MeasurementType = SinglePlot,                           FailedFlag = TRUE, returntype=\"patchwork\",                           path=StorageLocation, filename=\"CytekAurora5L_QC\")  TheSinglePlot TodaysExample <- c(\"Gain\")  Plots <- QC_Plots(x = TidyData, MeasurementType = TodaysExample,                   FailedFlag = TRUE, returntype=\"patchwork\",                   path=StorageLocation, filename=\"CytekAurora5L_QC\") Plots[1]"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc-retrieval","dir":"Articles","previous_headings":"Instrument QC","what":"QC Retrieval","title":"Quality Control","text":"absence QC reports instrument, can use .fcs files acquired instrument desired period time retrieve information. thanks lot data stored description parameters within .fcs file. , use .fcs files consisting 3000 events acquired DailyQC part monitoring. first identify files interest, load GatingSet. files now loaded GatingSet, can retrieve information using QC_Retrieval function. generated data outputs, can now send QC_Plots visualization instrument gain, laser delay area scaling factors similar retrieved data Levy-Jennings Tracking .csv.","code":"File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) QCBeads <- FCS_Files[grep(\"Before\", FCS_Files)] head(QCBeads) MyCytoSet <- load_cytoset_from_fcs(QCBeads, truncate_max_range = FALSE,                                    transform = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGatingSet SingleSpecimen <- QC_Retrieval(x=MyGatingSet[[1]], sample.name=\"TUBENAME\")  gt(SingleSpecimen) AllSpecimens <- map(.x=MyGatingSet, .f=QC_Retrieval, sample.name=\"TUBENAME\") %>%   bind_rows()  gt(AllSpecimens) YellowExample <- c(\"YG\")  Plots <- QC_Plots(x = AllSpecimens, MeasurementType = YellowExample,                   FailedFlag = FALSE, returntype=\"patchwork\",                   path=StorageLocation, filename=\"CytekAurora5L_QC\",                   therows=3, thecolumns=1, width=7, height=9)  Plots[[1]]"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_gainmonitoring","dir":"Articles","previous_headings":"Instrument QC","what":"QC_GainMonitoring","title":"Quality Control","text":"QC_FilePrep() QC_Retrieval() provide two ways retrieving information individual detectors gains, tell part instrument story. Gains Lasers dynamically changed maintain stable MFI time. One way cytometry core set monitor acquiring 3000 QC beads immediately running daily QC, extracting visualizing MFI values combination gain parameters. /.fcs files processed QC_GainMonitoring() function. setup plots requires couple additional arguments. first Metadata designates column name comparison categories stored (case, Timepoint column, designations). second change plotType default “individual” “comparison” category. can see example, looking MFI can see daily QC, recorded MFI across bead samples recorded similar across time, thanks part changes individual gain depicted .","code":"QCBeads <- FCS_Files[grep(\"Before|After\", FCS_Files)] head(QCBeads)  BeforeAfter_CS <- load_cytoset_from_fcs(files=QCBeads, transform=FALSE, truncate_max_range = FALSE)  BeforeAfter <- map(.x=BeforeAfter_CS, .f=QC_GainMonitoring, sample.name = \"TUBENAME\", stats=\"median\") %>% bind_rows()  gt(head(BeforeAfter, 4)) MFIExample <- c(\"R1\")  Plots <- QC_Plots(x = BeforeAfter, MeasurementType = MFIExample,                   Metadata = \"Timepoint\", plotType = \"comparison\",                   FailedFlag = FALSE, returntype=\"patchwork\",                   path=StorageLocation, filename=\"CytekAurora5L_QC\") Plots[[1]]"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"library-reference-controls","dir":"Articles","previous_headings":"","what":"Library Reference Controls","title":"Quality Control","text":"Cytek instruments use SpectroFlo, able store unmixing controls library re-use across future experiments. can exported .XML files, re-imported instruments. Unfortunately, original acquisition, good way visualize signature stored library control . Whether library reference control accurate, contaminated autofluorescence, somewhere , left parse effect full-stained samples unmixing. following functions designed extract signature information .XML files allow visualization underlying normalized signatures. additionally can plotted vs. reference signatures compare closely match. individual user, first load required libraries, provide location exported .XML files stored. example provided . example today, accessing .XML files stored within Luciernaga packages extdata folder.","code":"library(Luciernaga) library(xml2) library(tidyr) library(purrr) library(dplyr) library(ggplot2) FolderLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\",                             \"LibraryControls5L\") StorageLocation <- file.path(FolderLocation, \"Visualized\") Folder_Location <- system.file(\"extdata\", package = \"Luciernaga\") XML_Pattern <- \".XML$\" XML_Files <- list.files(path = Folder_Location, pattern = XML_Pattern,                         full.names = TRUE, recursive = FALSE) XML_Files"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_libraryparse","dir":"Articles","previous_headings":"Library Reference Controls","what":"QC_LibraryParse","title":"Quality Control","text":"QC_LibraryParse() function convert .XML files “tidy” data, either plots dataframe. can either done individually, combination map() files. setting returntype “plots”, can return file ggplot object. combination Utility_Patchwork() can generate .pdf file assembled patchwork plot desired dimensions. Library Reference Controls featured acquired training workshop. may notice, library reference controls appear normal, others quality control issues. Profiling reference controls acquired institutions instruments, noticed location detector gate placed brightness detector plot ties whether y-axis peak max-value 1. misplaced, stored reference control peak greater 1. setting argument “references=TRUE”, can append reference signatures red existing library controls. attempted provide coverage fluorophores Cytek Aurora Northern Light Instruments. fluorophores present internal .csv, mismatch instrument specific fluorophore name can lead absence reference signature appended individual plot. can investigate case using QC_ReferenceLibrary() function. Alternatively QC_LibraryParse, can set returntype “dataframe” return “tidy” format. data extracted signatures can saved .csv file future reference. Please aware, .XML library controls imported originated different instruments (consequently different laser detector configurations), map() followed bind_rows() can occasionally fail produce desired output. workaround take map() outputted rows, sort based number columns, bind data.frames basis shared instruments laser detector configurations. example provided can adapted individual situation.","code":"SinglePlot <- QC_LibraryParse(XML_Files[2], returntype=\"plots\", references=FALSE)  ThePlots <- map(.x=XML_Files, .f=QC_LibraryParse, returntype=\"plots\",                 references=FALSE)  AssembledPlot <- Utility_Patchwork(x=ThePlots, filename=\"LibraryControls5L\",                   outfolder=NULL, returntype=\"patchwork\", thecolumns=3,                   therows = 3, width = 7, height = 9)  AssembledPlot[1] ThePlots <- map(.x=XML_Files, .f=QC_LibraryParse, returntype=\"plots\",                 references=TRUE)  AssembledPlot <- Utility_Patchwork(x=ThePlots, filename=\"LibraryControls5L\",                   outfolder=NULL, returntype=\"patchwork\", thecolumns=3,                   therows = 3, width = 7, height = 9)  AssembledPlot[1] QC_ReferenceLibrary(FluorNameContains = \"FITC\", NumberDetectors=64) LibraryData_Single <- QC_LibraryParse(XML_Files[2], returntype=\"dataframe\", references=FALSE)  LibraryData <- map(.x=XML_Files, .f=QC_LibraryParse, returntype=\"dataframe\", references=FALSE) %>% bind_rows() gt(head(LibraryData, 4)) StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\",                              \"LibraryControls5L\") FileName <- \"ReferenceData.csv\" StorageName <- file.path(StorageLocation, FileName) # write.csv(TheData, file=StorageName, row.names=FALSE) #Setting up example LibraryData <- map(.x=XML_Files, .f=QC_LibraryParse, returntype=\"dataframe\", references=FALSE)  LibraryData[[3]] <- LibraryData[[3]][, -ncol(LibraryData[[3]])]  ncol(LibraryData[[3]]) == ncol(LibraryData[[1]]) FirstItem <- ncol(LibraryData[[1]])  MisbehavingRows <- which(sapply(LibraryData, function(x) ncol(x) != FirstItem))  if(length(MisbehavingRows) != 0) {   TheData_filtered <- LibraryData[-MisbehavingRows] } else {TheData_filtered <- LibraryData}  TheData <- bind_rows(TheData_filtered)  #write.csv(TheData, file=StorageName, row.names=FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_userlibraries","dir":"Articles","previous_headings":"Library Reference Controls","what":"QC_UserLibraries","title":"Quality Control","text":"working XML files multiple users, assembled dataframe output QC_LibraryParse() can passed QC_UserLibraries function, filter individual library controls user, send Utility_Patchwork() create .pdf output desired specifications. can useful tool core staff quickly generate outputs instrument user, can sent decide need change existing library reference controls. saveCSV = TRUE argument additionally return .csv corresponding dataframe.","code":"TemporaryLocation <- file.path(tempdir(), \"LuciernagaTemporaryExamples\") if (!dir.exists(TemporaryLocation)) {dir.create(TemporaryLocation)}  TheIndividuals <- TheData %>% pull(Creator) %>% unique() TheIndividuals  IndividualUser <- QC_UserLibraries(x=TheIndividuals[[1]], Data=TheData,                                    NameAppend=\"_LibraryQC\", outpath=TemporaryLocation,                                    references = TRUE, thecolumns = 3, therows=4,                                    width=7, height=9, saveCSV=FALSE)  AllUsers <- map(.x=TheIndividuals[1:2], .f=QC_UserLibraries, Data=TheData,                  NameAppend=\"_LibraryQC\", outpath=TemporaryLocation,references = TRUE,                  thecolumns = 3, therows=4, width=7, height=9, saveCSV=FALSE)  ThePDF <- list.files(TemporaryLocation, pattern=\"_LibraryQC.pdf\") ThePDF"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"comparing-normalized-signatures","dir":"Articles","previous_headings":"","what":"Comparing Normalized Signatures","title":"Quality Control","text":"previously highlighted ability within QC_LibraryParse set reference=TRUE compare acquired library signatures reference signature. following functions provide additionally functionality, extending signatures derrived additional sources (including derrived .fcs files, covered extensively Vignette 04_Fluorescent Signatures). Let’s now continue using signature derrived Library controls highlighted : currently exist, additional columns required following functions, remove.","code":"LibraryData_Single <- QC_LibraryParse(XML_Files[2], returntype=\"dataframe\", references=FALSE) gt(LibraryData_Single) Data <- LibraryData_Single %>% select(-Sample, -Creator, -Date) %>% rename(Sample=Fluorochrome) gt(Data)"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_whatsthis","dir":"Articles","previous_headings":"Comparing Normalized Signatures","what":"QC_WhatsThis","title":"Quality Control","text":"QC_WhatsThis() functions takes output, search reference data fluorophores closest resembling signature Setting returnPlots = TRUE, additionally provide plotted signatures. combination ggplotly(), can quite useful. can see, acquired library signature differs reference signature.","code":"TheFluorophore <- Data %>% pull(Sample)  Results <- QC_WhatsThis(x=TheFluorophore, data=Data, NumberHits = 10, returnPlots=TRUE)  Results[[1]] plotly::ggplotly(Results[[2]])"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_similarfluorophores","dir":"Articles","previous_headings":"Comparing Normalized Signatures","what":"QC_SimilarFluorophores","title":"Quality Control","text":"Additionally, don’t even need provide signature compare , fluorophore present within reference dataset, can compare fluorophores present similarly visualize using QC_SimilarFluorophores() option.","code":"Results <- QC_SimilarFluorophores(TheFluorophore=\"Spark Blue 550\", NumberDetectors=64, NumberHits = 10, returnPlots=TRUE)  Results[[1]] plotly::ggplotly(Results[[2]])"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_referencelibrary","dir":"Articles","previous_headings":"Comparing Normalized Signatures","what":"QC_ReferenceLibrary","title":"Quality Control","text":"mismatch fluorophore named within reference data (absent), using QC_ReferenceLibrary() function useful correcting inputed name QC_SimilarFluorophores() output listed .","code":"QC_ReferenceLibrary(FluorNameContains = \"Spark\", NumberDetectors=64)"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"qc_prospectivefluorophores","dir":"Articles","previous_headings":"Comparing Normalized Signatures","what":"QC_ProspectiveFluorophores","title":"Quality Control","text":"finally, experimental function QC_ProspectiveFluorophores() leverage information existing panel (peak detectors fluorophore currently occupy) contrast reference library fluorophores find candidate fluorophores might potentially fit gaps. arguments provide function filepath panel.csv, NumberDetectors instrument (64 5L Aurora). TheCutoff corresponds cosine value two fluorophores compared , set cutoff 0.9 similarity. Rank Value comes base R’s kappa() error introduced spill factoring across fluorophore references matrix. Rough estimate relative complexity case. results indicate potential fluorophores Detectors currently occupied panel, cosine overlaps less TheCutoff (0.9). RankValue existing panel plus given fluorophore. panel design/exploratory purposes lab, search Fluorophore name using QC_SimilarFluorophores() identify similar fluorophores commercial vendors investigate. example list:","code":"OutPath <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  Folder_Location <- system.file(\"extdata\", package = \"Luciernaga\") ThePanelLocation <- list.files(Folder_Location, pattern=\"^Panel.csv\", full.names=TRUE) ThePanel <- read.csv(ThePanelLocation, check.names=FALSE) %>% select(Fluorophore) ProspectiveAdditions <- QC_ProspectiveAdditions(path=ThePanelLocation, NumberDetectors=64,                                                 TheCutoff=0.9, returnAll=FALSE, returnCSV=FALSE,                                                 filename=\"ProspectiveAdditions\", outpath=OutPath) gt(ProspectiveAdditions) Results <- QC_SimilarFluorophores(TheFluorophore=\"PE-Fire 744\", NumberDetectors=64, NumberHits = 10, returnPlots=TRUE) plotly::ggplotly(Results[[2]])"},{"path":"https://davidrach.github.io/Luciernaga/articles/QualityControl.html","id":"concluding-thoughts","dir":"Articles","previous_headings":"","what":"Concluding Thoughts","title":"Quality Control","text":"hope vignette walkthrough interest, can think ways implement within workflow. thought improve things, please reach ! particular fun section package work love continue improve existing functions future.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Unmixing with Luciernaga","text":"Unmixing black box many spectral flow cytometry users, adjust gates single color controls, provide full-stained samples, unmix evaluate outputs NxN plots. golden rules reference controls (1. Single Color Controls Bright Brighter Full-Stain Sample; 2. Unmixing Single Color fluorophore (even better manufacturer lot); 3. Single Color Controls autofluorescence subtracted matching/equivalent unstained sample; 4. enough events) useful guidepost obviously work mechanistic explanations behind . Building examples Jakob Theorell’s flowSpecs Christopher Hall’s flowUnmix package, implemented way take Luciernaga_QC() outputs purified fluorophore signatures unmix using ordinal least squares (OLS) working GatingSet objects, returning FCS 3.0 standard files. combination functional programming principles, leveraging understand variations fluorophore signature brightness impact unmixing full-stained samples. hope addditive contribution enables users push limits SFC uncover new insights, write ways handle issues arising relative heterogeneity individual immune cells unmixed combination outputs, spare future graduate students go write R package answer space-wormhole questions.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Unmixing with Luciernaga","text":"section uses generated purified flourophore signatures generated Luciernaga_QC() previous vignettes. Let’s first load required packages calling library. can find .fcs files stored within Luciernaga packages extdata folder sort respective type Now lets create GatingSet single-color cell unmixing controls Now lets create GatingSet unstained cell unmixing controls","code":"library(Luciernaga) library(flowCore) library(flowWorkspace) library(openCyto) library(ggcyto)   library(data.table) library(dplyr) library(purrr)  library(stringr) library(ggplot2) library(gt) library(plotly) library(htmltools) File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) head(FCS_Files[10:30], 20) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedBeads <- UnstainedFCSFiles[grep(\"Beads\", UnstainedFCSFiles)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)]  BeadFCSFiles <- FCS_Files[grep(\"Beads\", FCS_Files)] BeadSingleColors <- BeadFCSFiles[-grep(\"Unstained\", BeadFCSFiles)]  CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)] MyCytoSet <- load_cytoset_from_fcs(CellSingleColors,                                     truncate_max_range = FALSE,                                     transform = FALSE) MyCytoSet MyGatingSet <- GatingSet(MyCytoSet) MyGatingSet FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyGates <- fread(file.path(path = FileLocation, pattern = 'Gates.csv')) gt(MyGates) MyGatingTemplate <- gatingTemplate(MyGates) gt_gating(MyGatingTemplate, MyGatingSet) MyGatingSet[[1]] MyUnstainedCytoSet <- load_cytoset_from_fcs(UnstainedCells,                                     truncate_max_range = FALSE,                                     transform = FALSE) MyUnstainedCytoSet MyUnstainedGatingSet <- GatingSet(MyUnstainedCytoSet) MyUnstainedGatingSet FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") MyGates <- fread(file.path(path = FileLocation, pattern = 'Gates.csv')) gt(MyGates) MyGatingTemplate <- gatingTemplate(MyGates) gt_gating(MyGatingTemplate, MyUnstainedGatingSet) MyUnstainedGatingSet[[1]]"},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"generate-luciernaga_qc-outputs","dir":"Articles","previous_headings":"","what":"Generate Luciernaga_QC Outputs","title":"Unmixing with Luciernaga","text":"Now GatingSets re-established, let’s continue last vignette left processing fcs files Luciernaga_QC characterize fluorescent signatures within. Let’s first provision AFOverlap csv handle conflicts. next generate CellAF unstained signature can used fluorophore-autofluorescence overlap files encountered: Now let’s use Luciernaga_QC() ExportType = “fcs” export data individual .fcs files, set Brightness = TRUE save .csv files can used Luciernaga_Tree(). vignette, saving .fcs files temporary folder. workstation, save outputs folder can retrieve later providing file.path outpath argument. Let’s start processing single-color unmixing controls. let’s also process unstained unmixing control specimen also characterize autofluorescence present.","code":"FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern,                         full.names = TRUE) AFOverlap_CSV <- read.csv(AFOverlap, check.names = FALSE) AFOverlap_CSV # pData(MyUnstainedGatingSet[1]) removestrings <- c(\".fcs\")  TheCellAF <- map(.x=MyUnstainedGatingSet[1], .f=Luciernaga_QC, subsets=\"lymphocytes\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = TRUE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"data\", SignatureReturnNow = TRUE,                               outpath = TemporaryFolder, Increments=0.1,                               SecondaryPeaks=2, experiment = \"FirstExperiment\",                               condition = \"ILTPanel\", SCData=\"subtracted\",                               NegativeType=\"default\")  TheCellAF <- TheCellAF[[1]] #Removes list caused by map  gt(TheCellAF) #pData(MyGatingSet)  StorageLocation <- file.path(tempdir(), \"LuciernagaOutputs\")  if (!dir.exists(StorageLocation)) {   dir.create(StorageLocation) }  SingleColor_Data  <- map(.x=MyGatingSet, .f=Luciernaga_QC, subsets=\"nonDebris\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = FALSE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"fcs\", Brightness=TRUE, SignatureReturnNow = FALSE,                               outpath = StorageLocation, Increments=0.1,                               SecondaryPeaks=2, experiment = \"FirstExperiment\",                               condition = \"ILTPanel\", Subtraction = \"Internal\",                                CellAF=TheCellAF, SCData=\"subtracted\",                               NegativeType=\"default\", minimalfcscutoff=0.01)  TheLuciernagaOutputs_FCS <- list.files(StorageLocation, pattern=\"fcs\", full.names = TRUE) head(TheLuciernagaOutputs_FCS, 4) #pData(MyUnstainedGatingSet) Unstained_Data  <- map(.x=MyUnstainedGatingSet[1], .f=Luciernaga_QC, subsets=\"nonDebris\",                               removestrings=removestrings, sample.name=\"GUID\",                               unmixingcontroltype = \"cells\", Unstained = TRUE,                               ratiopopcutoff = 0.001, Verbose = FALSE,                               AFOverlap = AFOverlap, stats = \"median\",                               ExportType = \"fcs\", Brightness=TRUE, SignatureReturnNow = FALSE,                               outpath = StorageLocation, Increments=0.1,                               SecondaryPeaks=2, experiment = \"FirstExperiment\",                               condition = \"ILTPanel\", Subtraction = \"Internal\",                                CellAF=TheCellAF, SCData=\"subtracted\",                               NegativeType=\"default\", minimalfcscutoff=0.01)"},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"luciernaga_tree","dir":"Articles","previous_headings":"","what":"Luciernaga_Tree","title":"Unmixing with Luciernaga","text":"generate lot clusters Luciernaga_QC(). can visualize using report plotting functions described previous vignette, selecting individual candidate output .fcs use unmixing can tiresome confusing. Luciernaga_Tree() initial attempt reduce burden, instituting decision tree help filter many outputs return likely candidates work unmixing. relies Luciernaga_QC() Brightness=TRUE .csv outputs making decision. want upfront say developmental. recently created tools allow us query fluorophore brightness, signature, relative abundance impact unmixing full-stained samples. time delve outcomes depth like come grand unified theory perfect unmixing. --list postdoc/industry/whatever (hire interest want avoid working competitors). time, works well enough, occasional bugs final unmixing. highly encourage feedback tinkering decision trees step methodology order achieve consistent results. now, process works follows (detailed explanation logic). background way, let’s continue. scrolling returned selections, can screen based knowledge panel decide outcomes seem reasonable. also verify decisions correct reach unmixing process visualizing vs. reference signatures Luciernaga_SingleColors(). case wrong file output selected, much easier remove replace one .fcs file 30.","code":"ReferencePath <- system.file(\"extdata\", package = \"Luciernaga\") PanelPath <- file.path(ReferencePath, \"UnmixingPanel.csv\") UnmixingPanel <- read.csv(PanelPath, check.names=FALSE)  MoveThese <- Luciernaga_Tree(BrightnessFilePath = StorageLocation, PanelPath = PanelPath) gt(head(MoveThese, 5))"},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"luciernaga_move","dir":"Articles","previous_headings":"","what":"Luciernaga_Move","title":"Unmixing with Luciernaga","text":"Luciernaga_Tree() identified Luciernaga_QC() output .fcs files likely produce best unmixing outcome, absolutely brutal track within folder hundreds .fcs files repetition CCR4BUV615_UV6_10-V7_08-B3_04 nomenclature (believe , initially). Luciernaga_Move() takes Luciernaga_Tree() list ideal candidates, copies .fcs files designated folder, saving hassle, allowing simply point folder use functions mentioned . Continuing left Luciernaga_Tree() , example, create different temporary folder store selected .fcs files later use unmixing. steps completed, now ready proceed steps validate choice unmixing controls.","code":"SortedStorageLocation <- file.path(tempdir(), \"LuciernagaSelected\")  if (!dir.exists(SortedStorageLocation)) {   dir.create(SortedStorageLocation) }  UnmixingPanel <- read.csv(PanelPath, check.names=FALSE) TheseFluorophores <- UnmixingPanel %>% pull(Fluorophore) walk(.x=TheseFluorophores, .f=Luciernaga_Move, data=MoveThese, input=StorageLocation, output=SortedStorageLocation)  MovedFiles <- list.files(SortedStorageLocation, pattern=\"fcs\", full.names=TRUE) length(MovedFiles)"},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"luciernaga_linearslices","dir":"Articles","previous_headings":"","what":"Luciernaga_LinearSlices","title":"Unmixing with Luciernaga","text":"previously showcased Luciernaga_LinearSlices() ability take .fcs file, visualize variation signature based quantile splits MFI brightness. saw APC CD16 replicated : today, highlight Luciernaga_LinearSlices() ability also Luciernaga_QC() outputs. can see, exception cells 30 percentile brightness, variation signature saw original file, sorting within Luciernaga_QC() appears sorted cells similar signature regardless brightness. passing generated plots Utility_Patchwork(), can set returntype=“pdf” “patchwork” generate report fluorophores.","code":"#pData(MyGatingSet) APC_Example <- subset(MyGatingSet, str_detect(name, \"CD16_\"))  RawSlices <- Luciernaga_LinearSlices(x=APC_Example[1], subset=\"lymphocytes\",                                   sample.name=\"GUID\", removestrings=removestrings,                                   stats=\"median\", returntype=\"raw\",                                   probsratio=0.1, output=\"plot\", desiredAF=\"R1-A\")  plotly::ggplotly(RawSlices) #pData(MyGatingSet[6])  NormalizedSlices <- Luciernaga_LinearSlices(x=APC_Example[1], subset=\"lymphocytes\",                                   sample.name=\"GUID\", removestrings=removestrings,                                   stats=\"median\", returntype=\"normalized\",                                   probsratio=0.1, output=\"plot\", desiredAF=\"R1-A\")  plotly::ggplotly(NormalizedSlices) MovedFiles <- list.files(SortedStorageLocation, pattern=\"fcs\", full.names=TRUE) Selected_CS <- load_cytoset_from_fcs(MovedFiles, truncate_max_range = FALSE, transform = FALSE) Selected_GS <- GatingSet(Selected_CS)  pData(Selected_GS)  ThePlots <- map(.x=Selected_GS, .f=Luciernaga_LinearSlices, subset=\"root\", removestrings=\".fcs\",                 sample.name=\"GUID\", stats=\"median\", returntype=\"normalized\", output=\"plot\")  plotly::ggplotly(ThePlots[[1]]) PatchworkObjects <- Utility_Patchwork(ThePlots, filename = \"LinearSlices\", outfolder=ReferencePath, returntype = \"patchwork\") PatchworkObjects[1]"},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"luciernaga_singlecolors","dir":"Articles","previous_headings":"","what":"Luciernaga_SingleColors","title":"Unmixing with Luciernaga","text":"main purpose Luciernaga_SingleColors() generate reference matrix use unmixing full-stained samples. additionally provides mechanism can visualize signatures plan using compare reference signatures stored within Luciernaga. allows us screen potential issues single-color reference matrix proceed unmix full-stained specimens. begin, need generate either .csv file data.frame fluorophores present, specify cutoff point , dictated observations saw Luciernaga_LinearSlices(). example, R set intervals 0.4 1.0 across board. want fine-tune things , easier save output .csv file, modify , return R. important thing ensure correctly identify fluorophore ligand step, ensure names correct unmixed full-stained .fcs file. case, using keyword “TUBENAME” identify .fcs files. original name looks like: Luciernaga_SingleColors() automatically clean portion name “(Cells)” “(Beads)” present . However, leave final name “DR_CCR4 BUV615” converted Fluorophore = BUV615, Ligand = DR_CCR4. clean , remove authors initials (“DR_”) providing part list remove strings argument. case , set returntype = “plot” visualize outcome compared stored Reference Signatures within Luciernaga. Let’s see look like: can tell, provided signature originating output .fcs file closely resembles reference signature. can repeat fluorophores using Utility_Patchwork(), set returntype = “pdf” examine fluorophores spot issues. example, set argument “patchwork” visualize. particular case, can see generated signatures aligned references, .fcs files using BUV737 PacificBlue deviate substantially likely impact final unmixing. Within workflow, follow removing current output .fcs Selected Folder, replace another variant. highlights visualizing portion Luciernaga_SingleColors() lets go ahead generate reference matrix changing returntype = “data” , might well identify far cosine difference trouble Pacific Blue Fluorophore go correct : can tell, fluorophore closely resembles BV510 Pacific Blue appearing list hits. suggest returned fluorescent signature .fcs file mainly autofluorescence, used. Back topic, corrected Selected Folder, rerun Luciernaga_SingleColors() satisfied results, go ahead save results data.frame elsewhere reference, can edited correct typos format issues may missed creating unmixed .fcs files.","code":"UnmixingPanel <- read.csv(PanelPath, check.names=FALSE) ThePanelCuts <- UnmixingPanel %>% select(-Detector) %>% mutate(From=0.3) %>% mutate(To=1) head(ThePanelCuts, 5) #write.csv(ThePanelCuts, path=\"SaveHere.csv\", row.names=FALSE) keyword(Selected_GS[1], \"TUBENAME\") #pData(Selected_GS) removestrings=c(\"DR_\", \".fcs\") SCs <- map(.x=Selected_GS[1], .f=Luciernaga_SingleColors, sample.name=\"TUBENAME\",            removestrings=removestrings, subset=\"root\", PanelCuts=ThePanelCuts,            stats=\"median\", Verbose=TRUE, SignatureView=TRUE, returntype = \"plots\") plotly::ggplotly(SCs[[1]]) SCs <- map(.x=Selected_GS, .f=Luciernaga_SingleColors, sample.name=\"TUBENAME\",            removestrings=removestrings, subset=\"root\", PanelCuts=ThePanelCuts,            stats=\"median\", Verbose=TRUE, SignatureView=TRUE, returntype = \"plots\")  TheView <- Utility_Patchwork(x=SCs, filename=\"ReferenceMatches\",                              outfolder = ReferencePath, returntype = \"patchwork\")  TheView[3] SC_Reference <- map(.x=Selected_GS, .f=Luciernaga_SingleColors, sample.name=\"TUBENAME\",                     removestrings=removestrings, subset=\"root\", PanelCuts=ThePanelCuts,                     stats=\"median\", Verbose=FALSE, SignatureView=FALSE, returntype = \"data\") %>%                     bind_rows() head(SC_Reference, 4) PacificBlue <- SC_Reference %>% select(-Ligand) %>% rename(Sample=Fluorophore)  Results <- QC_WhatsThis(x=\"Pacific Blue\", data=PacificBlue, NumberHits=10,                         returnPlots = TRUE)  Results[[1]] plotly::ggplotly(Results[[2]]) SC_Reference <- SC_Reference %>%   mutate(Fluorophore = case_when(Fluorophore == \"Unstained\" ~ \"AF\", TRUE ~ Fluorophore))  TheSCReferences <- file.path(ReferencePath, \"UnmixingSCs.csv\")  write.csv(SC_Reference, TheSCReferences, row.names=FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"luciernaga_unmix","dir":"Articles","previous_headings":"","what":"Luciernaga_Unmix","title":"Unmixing with Luciernaga","text":"Luciernaga_Unmix() unmixing function implemented within Luciernaga package. mainly distinguishes R package implementations ordinary least squares unmixing works GatingSet level terms infrastructure (reducing active memory use) set way allow us rapidly iterate/modify/change inputs subsequently evaluate unmixed full-stained .fcs files impacts decisions unmixing. put effort ensuring subsequent unmixed files compatible various software typically used prefer use GUI flow data. involved changes done within newly produced .fcs files exprs, parameters description folder, ’s possible may missed something, encounter bug, please reach . previously stated, remains experimental, moment just intended tool allow querry brightness/signature/abundance individual single colors impacts full-unmixing. improve existing knowledge, quality inputs/outputs likely also improve figure things don’t yet know correct . consider work progress now, feel free reach know something don’t, want collaborate getting implemented . now, let’s identify raw full-stained files load GatingSet: Let’s identify Single Color Reference Data output Luciernaga_SingleColors() validated (correcting issues) finally, lets provide file.path panel (establish correct ordering fluorophores final file) pre-requisites prepared can go ahead. example, merge “GROUPNAME” “TUBENAME” form final name. final file, use addon argument append “_Unmixed” end. Ordinary Least Squares (OLS) returns values close 0, multiplier increases values across board, allows data resemble softwares bi-exponential transform applied.","code":"File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,                         full.names = TRUE, recursive = FALSE) RawFullStainedFCSFiles <- FCS_Files[grep(\"Tetramer\", FCS_Files)] RawFullStainedFCSFiles <- RawFullStainedFCSFiles[-grep(\"Unmixed\", RawFullStainedFCSFiles)]  UnmixCytoSet <- load_cytoset_from_fcs(RawFullStainedFCSFiles, truncate_max_range = FALSE, transform = FALSE) UnmixGatingSet <- GatingSet(UnmixCytoSet) ReferencePath <- system.file(\"extdata\", package = \"Luciernaga\") ValidatedSCReferenceData <- file.path(ReferencePath, \"ValidatedSCReferenceData.csv\") SingleColorReference <- read.csv(ValidatedSCReferenceData, check.names = FALSE) PanelPath <- file.path(ReferencePath, \"UnmixingPanel.csv\") PanelNames <- read.csv(PanelPath, check.names=FALSE) TheSampleName <- c(\"GROUPNAME\", \"TUBENAME\")  UnmixSuccess <- map(.x=UnmixGatingSet, .f=Luciernaga_Unmix, controlData=SingleColorReference,                     sample.name=TheSampleName, addon=\"_Unmixed\", subset=\"root\", removestrings=\".fcs\",                     multiplier=50000, outpath=UnmixedOutpath, PanelPath=PanelPath, Verbose=FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"luciernaga_iterativeunmix","dir":"Articles","previous_headings":"","what":"Luciernaga_IterativeUnmix","title":"Unmixing with Luciernaga","text":"function extension Luciernaga_Unmix() using inputs, added provision provide folder variant Luciernaga_QC() .fcs files single fluorophore interest. Luciernaga_IterativeUnmix() proceed one one files folder, process individually swap Reference Matrix, unmix full-stain samples, return variant unmixed full-stain files outfolder. repeat everything complete. subsequently, use Utility_UnityPlots() Utility_NxNPlots() workflow described Vignette 1 consolidate variant unmixed files evaluate variation iterated single-color impacted final unmixing.","code":"IterativePath <- file.path(ReferencePath, \"DifferentialPerCP\") removestrings <- c(\"DR_\", \".fcs\") iterate_removestrings <- c(\"DR_\", \"(Cells)\", \".fcs\", \" \", \"PerCP-Cy5.5\", \"CD26\", \"_\") TheSampleName <- c(\"GROUPNAME\", \"TUBENAME\")    Luciernaga_IterativeUnmixing(IterativePath=IterativePath, iterate_removestrings=iterate_removestrings,                                removestrings=removestrings, sample.name=TheSampleName, subset=\"root\",                                PanelCuts=ThePanelCuts, stats=\"median\", Verbose=FALSE, SignatureView=FALSE,                                FullStainedGS=UnmixGatingSet, controlData=SingleColorReference, multiplier=50000,                                outpath=UnmixedOutpath, PanelPath=PanelPath)"},{"path":"https://davidrach.github.io/Luciernaga/articles/Unmixing.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Unmixing with Luciernaga","text":", conclude tour current state unmixing functions within Luciernaga package. remain work progress, welcome contributions/insights/bug-reports continue improving . entire project arose curious placing positive gate single-color unmixing control alter unmixing file, sum Luciernaga’s functions geared allowing answer questions graduate student go horror “unmixed weird, idea ” 20 years now.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/Wetlab.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Wetlab Helper Functions","text":"following functions geared mainly toward pre-acquisition application within wetlab context. Since going effort write R package document vignette, including within Luciernaga. typical workflow involves thawing human cord peripheral blood mononuclear cells (CBMC PBMC respectively), spinning remove supernatant, resuspending. , take 5 uL, stain anti-CD45, anti-CD14, anti-CD19 evaluate cell concentration sample. go 6 hours rest 3x10^6 cells per ml, aliquoted individual stimulation conditions overnight. following three functions associated workflow detailed examples speed process along. hope provides ideas can modify fit within workflows reduce time spent bench trying remember long-forgotten course.","code":""},{"path":"https://davidrach.github.io/Luciernaga/articles/Wetlab.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Wetlab Helper Functions","text":"5 uL sample stained antibody mix (1uL CD45, 1uL CD14, 1.5uL CD19, 20 uL DPBS) 6 minutes, 480 uL PBS added (roughly 1:100 dilution). sample counted Cytek Aurora set acquire 30 uL tube high stopping. export .fcs files bring FlowJo (TM) work space set sort .fcs files groups set three instruments different laser configurations present core. copy-paste template, check gates, save .wsp. bring .wsp file R using CytoML. possible skip FlowJo portion workflow entirely using openCyto package combination Utility_GatingPlots() validate gate placement specimen, document time . saved .wsp file “CellCounts” two count .fcs files Luciernaga extdata example. First lets load required libraries.","code":"library(flowCore) library(flowWorkspace) library(CytoML) library(dplyr) library(purrr) library(lubridate) library(Luciernaga) library(shiny) library(DataEditR) library(gt) #library(ghibli) library(stringr) File_Location <- system.file(\"extdata\", package = \"Luciernaga\") WSP_File <- list.files(File_Location, pattern=\".wsp\", full.names = TRUE) ws <- open_flowjo_xml(WSP_File[1]) gs <- flowjo_to_gatingset(ws, name=1, path = File_Location) plot(gs) gs"},{"path":"https://davidrach.github.io/Luciernaga/articles/Wetlab.html","id":"wetlab_concentration","dir":"Articles","previous_headings":"Getting Started","what":"Wetlab_Concentration","title":"Wetlab Helper Functions","text":"Now .wsp file loaded GatingSet, can use Wetlab_Concentration() function derrive cell concentration sample. Luciernaga use count events present designated subset level, combination description keywords recorded acquisition software. case, samples present TotalVolume 1. code write data .csv included # symbols.","code":"nameKeyword <- c(\"GROUPNAME\", \"TUBENAME\")  TheData <- map(.x=gs, Wetlab_Concentration, subset = \"CD45+\",                nameKeyword=nameKeyword, DilutionMultiplier=100,                TotalVolume=1) %>% bind_rows()  TheData  #ComputerSpecific <- \"C:/Users/JohnDoe/\" #path <- file.path(ComputerSpecific, \"Desktop\", \"CellCounts\") #CSVName <- file.path(path, \"CellCounts.csv\") #write.csv(TheData, CSVName, row.names=FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/articles/Wetlab.html","id":"wetlab_rest","dir":"Articles","previous_headings":"Getting Started","what":"Wetlab_Rest","title":"Wetlab Helper Functions","text":"Now know concentration specimens, take information figure need re-suspend stock concentration one 3.0x10^6 cells per mL. actual practice, save data output .csv bring back R code seen : Next bring CellCounts, use Dillon’s Hammill’s DataEditR swap correct total volumes. case workflow, sometimes acquiring multiple specimens, TotalVolume initial resuspension differ differ specimens. One edit within outputted .csv file bringing R, another way use DataEditR edit within R using ’s ShinyApp. Example code provided # symbol avoid causing issues building vignette. Don’t forget synchronize ensure edits TotalVolume retained. TotalVolume column now correct, can proceed calculate re-suspension: concentration low, SpinDown set TRUE, additional row consisting volume needed resuspend removing supernatant placed immediately .","code":"#ComputerSpecific <- \"C:/Users/JohnDoe/\" #path <- file.path(ComputerSpecific, \"Desktop\", \"CellCounts\") #CSVFiles <- list.files(path, pattern=\".csv\") #FileInterest <- file.path(path, CSVFiles[1]) #TheData <- read.csv(FileInterest, check.names=FALSE) TheData EditableData <- TheData %>% select(-TotalScientific, -TimeSeconds) #NewData <- DataEditR::data_edit(EditableData) #Remove the first # to run NewData <- EditableData #Add a # here if running DataEditR. Updated <- NewData Updated #ComputerSpecific <- \"C:/Users/JohnDoe/\" #path <- file.path(ComputerSpecific, \"Desktop\", \"CellCounts\")  Test <- Wetlab_Rest(data=Updated, DesiredConcentration_MillionperML=3, MaxMLperTube=1, returntype=\"data\", outpath=path) gt(Test)"},{"path":"https://davidrach.github.io/Luciernaga/articles/Wetlab.html","id":"wetlab_decision","dir":"Articles","previous_headings":"Getting Started","what":"Wetlab_Decision","title":"Wetlab Helper Functions","text":"also need set desired color-palette.","code":"#Palette <- ghibli_palette(name=\"PonyoLight\", n=7, direction=1, type=\"discrete\") #ColorSelection <- Palette[5] #scales::show_col(ColorSelection)  Palette <- RColorBrewer::brewer.pal(n = 7, name = \"Pastel1\") ColorSelection <- Palette[1] scales::show_col(ColorSelection)"},{"path":"https://davidrach.github.io/Luciernaga/articles/Wetlab.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Wetlab Helper Functions","text":"Hope vignette useful proof--principle.","code":""},{"path":"https://davidrach.github.io/Luciernaga/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Rach. Author, maintainer.","code":""},{"path":"https://davidrach.github.io/Luciernaga/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rach D (2024). Luciernaga: Tools evaluation Spectral Flow Cytometry (SFC) unmixing controls. R package version 0.99.0, https://github.com/DavidRach/Luciernaga.","code":"@Manual{,   title = {Luciernaga: Tools for the evaluation of Spectral Flow Cytometry (SFC) unmixing controls},   author = {David Rach},   year = {2024},   note = {R package version 0.99.0},   url = {https://github.com/DavidRach/Luciernaga}, }"},{"path":[]},{"path":"https://davidrach.github.io/Luciernaga/index.html","id":"luciernaga-quality-checks-signature-interrogation-and-data-visualization-for-spectral-flow-cytometry-sfc-unmixing-controls","dir":"","previous_headings":"","what":"Luciernaga: Quality checks, signature interrogation, and data visualization for Spectral Flow Cytometry (SFC) unmixing controls.","title":"Tools for the evaluation of Spectral Flow Cytometry (SFC) unmixing controls","text":"Spectral flow cytometry (SFC) ability resolve similar fluorophores rapidly acquire large numbers cellular events combines beneficial aspects conventional flow cytometry (CFC) mass cytometry (MC). Proper unmixing controls (single-color unstained) essential ensure proper unmixing full-stained samples. Despite critical role, tools exist examine quality individual unmixing controls. Luciernaga R package containing tools allow individual researchers implement quality control checks, signature interrogation data visualization pre-unmixing stages make informed decisions, level individual .fcs files well across time.","code":""},{"path":"https://davidrach.github.io/Luciernaga/index.html","id":"installation","dir":"","previous_headings":"Luciernaga: Quality checks, signature interrogation, and data visualization for Spectral Flow Cytometry (SFC) unmixing controls.","what":"Installation","title":"Tools for the evaluation of Spectral Flow Cytometry (SFC) unmixing controls","text":"process getting Luciernaga ready submit Bioconductor. , please download package github.","code":"if(!require(\"remotes\")) install.packages(\"remotes\")  remotes::install_github(\"https://github.com/DavidRach/Luciernaga\")  library(Luciernaga)  # install.packages(\"BiocManager\") # BiocManager::install(\"Luciernaga\")"},{"path":"https://davidrach.github.io/Luciernaga/index.html","id":"get-started","dir":"","previous_headings":"Luciernaga: Quality checks, signature interrogation, and data visualization for Spectral Flow Cytometry (SFC) unmixing controls.","what":"Get Started","title":"Tools for the evaluation of Spectral Flow Cytometry (SFC) unmixing controls","text":"Please check -vignettes get started.","code":""},{"path":"https://davidrach.github.io/Luciernaga/index.html","id":"found-a-bug-report-it","dir":"","previous_headings":"Luciernaga: Quality checks, signature interrogation, and data visualization for Spectral Flow Cytometry (SFC) unmixing controls.","what":"Found a bug? Report it!","title":"Tools for the evaluation of Spectral Flow Cytometry (SFC) unmixing controls","text":"caught lot bugs, ’s still unknown ones haven’t encountered. find suspected bug, please report ","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://davidrach.github.io/Luciernaga/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://davidrach.github.io/Luciernaga/reference/AveragedSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a data.frame to desired stat — AveragedSignature","title":"Summarize a data.frame to desired stat — AveragedSignature","text":"Summarize data.frame desired stat","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/AveragedSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a data.frame to desired stat — AveragedSignature","text":"","code":"AveragedSignature(x, stats, normalize = FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/AveragedSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a data.frame to desired stat — AveragedSignature","text":"x data.frame containing double numeric data. stats Desired Stats \"mean\" \"median\" pass summarize_all normalize Default FALSE, TRUE peak detector normalizes.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/AveragedSignature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a data.frame to desired stat — AveragedSignature","text":"data.frame row summarized data","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/AveragedSignature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a data.frame to desired stat — AveragedSignature","text":"","code":"library(flowCore) library(flowWorkspace) #> As part of improvements to flowWorkspace, some behavior of #> GatingSet objects has changed. For details, please read the section #> titled \"The cytoframe and cytoset classes\" in the package vignette: #>  #>   vignette(\"flowWorkspace-Introduction\", \"flowWorkspace\") library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyCytoSet <- load_cytoset_from_fcs(UnstainedCells[1],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  PopulationInterest <- gs_pop_get_data(MyGatingSet[1], subset=\"lymphocytes\") TheDataValues <- exprs(PopulationInterest[[1]]) TheDataValues <- data.frame(TheDataValues, check.names=FALSE)  Signature <- AveragedSignature(TheDataValues, stats=\"median\")"},{"path":"https://davidrach.github.io/Luciernaga/reference/CytosetScreen.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks and filters .fcs files into compatible sublist to pass on to CytoSet without crashing out due to mismatch — CytosetScreen","title":"Checks and filters .fcs files into compatible sublist to pass on to CytoSet without crashing out due to mismatch — CytosetScreen","text":"Checks filters .fcs files compatible sublist pass CytoSet without crashing due mismatch","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/CytosetScreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks and filters .fcs files into compatible sublist to pass on to CytoSet without crashing out due to mismatch — CytosetScreen","text":"","code":"CytosetScreen(files)"},{"path":"https://davidrach.github.io/Luciernaga/reference/CytosetScreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks and filters .fcs files into compatible sublist to pass on to CytoSet without crashing out due to mismatch — CytosetScreen","text":"files list containing fcs files file.paths","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/CytosetScreen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks and filters .fcs files into compatible sublist to pass on to CytoSet without crashing out due to mismatch — CytosetScreen","text":"list containing lists compatible fcs file paths","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/HolisticToArchived.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts the extracted BeadData into the ArchivedData format needed to plot Gain/RCV fails — HolisticToArchived","title":"Converts the extracted BeadData into the ArchivedData format needed to plot Gain/RCV fails — HolisticToArchived","text":"Converts extracted BeadData ArchivedData format needed plot Gain/RCV fails","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/HolisticToArchived.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts the extracted BeadData into the ArchivedData format needed to plot Gain/RCV fails — HolisticToArchived","text":"","code":"HolisticToArchived(   data,   manufacturer = \"Cytek\",   baselinecutoffs,   returnTemplate = FALSE,   outpath = NULL,   gainmultiplier = 2 )"},{"path":"https://davidrach.github.io/Luciernaga/reference/HolisticToArchived.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts the extracted BeadData into the ArchivedData format needed to plot Gain/RCV fails — HolisticToArchived","text":"data data.frame object bead data manufacturer Options Cytek , basically whether use DailyQC CSV template baselinecutoffs DailyQC .csv template .csv associated file.path returnTemplate Returns DailyQC template can adjusted beyond Cytek settings outpath Default NULL, specifies returnTemplate .csv gainmultiplier Gain times value cutoff point Gain Fails","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/HolisticToArchived.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts the extracted BeadData into the ArchivedData format needed to plot Gain/RCV fails — HolisticToArchived","text":"updated data.frame containing necessary Flag columns plotting","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/InternalDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal for Utility_DensityOverlay — InternalDensity","title":"Internal for Utility_DensityOverlay — InternalDensity","text":"Internal Utility_DensityOverlay","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/InternalDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal for Utility_DensityOverlay — InternalDensity","text":"","code":"InternalDensity(x, cs, TheFill)"},{"path":"https://davidrach.github.io/Luciernaga/reference/InternalDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal for Utility_DensityOverlay — InternalDensity","text":"x passed x-axis name cs passed CytoSet TheFill passed factor fill plots ","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/InternalDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal for Utility_DensityOverlay — InternalDensity","text":"internal value","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Luciernaga: Tools for the evaluation of Spectral Flow Cytometry (SFC) unmixing controls — Luciernaga-package","title":"Luciernaga: Tools for the evaluation of Spectral Flow Cytometry (SFC) unmixing controls — Luciernaga-package","text":"learn using Luciernaga package, please start browsing vignettes:","code":""},{"path":[]},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Luciernaga: Tools for the evaluation of Spectral Flow Cytometry (SFC) unmixing controls — Luciernaga-package","text":"Maintainer: David Rach drach@som.umaryland.edu (ORCID)","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/LuciernagaClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal for UnstainedSignatures And SingleStainSignatures — LuciernagaClustering","title":"Internal for UnstainedSignatures And SingleStainSignatures — LuciernagaClustering","text":"Internal UnstainedSignatures SingleStainSignatures","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/LuciernagaClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal for UnstainedSignatures And SingleStainSignatures — LuciernagaClustering","text":"","code":"LuciernagaClustering(MyData, These, DetectorName)"},{"path":"https://davidrach.github.io/Luciernaga/reference/LuciernagaClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal for UnstainedSignatures And SingleStainSignatures — LuciernagaClustering","text":"MyData data.frame raw .fcs exprs values list columns corresponding local maxima peaks DetectorName brightest peak everything normalized .","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/LuciernagaClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal for UnstainedSignatures And SingleStainSignatures — LuciernagaClustering","text":"internal value","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Brightness.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize MFI of raw .fcs files to evaluate single color controls. — Luciernaga_Brightness","title":"Visualize MFI of raw .fcs files to evaluate single color controls. — Luciernaga_Brightness","text":"Visualize MFI raw .fcs files evaluate single color controls.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Brightness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize MFI of raw .fcs files to evaluate single color controls. — Luciernaga_Brightness","text":"","code":"Luciernaga_Brightness(   fluorophore.name,   data,   fluorophore.column,   cluster.column,   downsample = TRUE,   subsample = NULL,   detector = NULL,   reference = NULL,   clearance = 0.02,   Scaled = TRUE,   maxtik = 1e+06,   legend = \"right\" )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Brightness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize MFI of raw .fcs files to evaluate single color controls. — Luciernaga_Brightness","text":"fluorophore.name name fluorophore filter data data data.frame derrived Luciernaga_FolderBrightness, consisting fluorophore cluster metadata, raw detector values fluorophore.column name column containing fluorophore information cluster.column name column containing cluster information downsample Default TRUE, avoid large populations take entire y-axis. subsample downsample true, number cells cluster keep. default NULL select number cells found smallest cluster reference .csv path data.frame containing Fluorophore Detector information retrieve x-axis detector, use naming passed fluorophore argument x clearance buffer area multiplier xmin xmax scaled equals false Scaled Default set TRUE, returning log_10 transformed data, FALSE return raw MFI. maxtik Default 1e6 legend Default \"right\" Detector Default NULL, reference NULL sets detector plot x-axis","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Brightness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize MFI of raw .fcs files to evaluate single color controls. — Luciernaga_Brightness","text":"ggplot objects fluorophore containing various clusters","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Brightness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize MFI of raw .fcs files to evaluate single color controls. — Luciernaga_Brightness","text":"","code":"NULL #> NULL"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_BrigtnessOverTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes Cluster MFI over time, uses Luciernaga_QC output — Luciernaga_BrigtnessOverTime","title":"Visualizes Cluster MFI over time, uses Luciernaga_QC output — Luciernaga_BrigtnessOverTime","text":"Visualizes Cluster MFI time, uses Luciernaga_QC output","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_BrigtnessOverTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes Cluster MFI over time, uses Luciernaga_QC output — Luciernaga_BrigtnessOverTime","text":"","code":"Luciernaga_BrigtnessOverTime(   data,   columnname = \"Cluster\",   datename = \"Experiment\",   Detector = NULL,   plotType = \"line\" )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_BrigtnessOverTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes Cluster MFI over time, uses Luciernaga_QC output — Luciernaga_BrigtnessOverTime","text":"data LuciernagaQC data.frame style output raw detector values. columnname columnname Cluster, becomes categorical defining lines dots datename column name Experiment/Dates, becomes x-axis Detector Default NULL, specify detector, overrides y-axis plotType Something","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_BrigtnessOverTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizes Cluster MFI over time, uses Luciernaga_QC output — Luciernaga_BrigtnessOverTime","text":"ggplot2 object","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_BrigtnessOverTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizes Cluster MFI over time, uses Luciernaga_QC output — Luciernaga_BrigtnessOverTime","text":"","code":"library(Luciernaga)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Cosine.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates cosine comparison from a data.frame of fluorescent signatures — Luciernaga_Cosine","title":"Generates cosine comparison from a data.frame of fluorescent signatures — Luciernaga_Cosine","text":"Generates cosine comparison data.frame fluorescent signatures","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Cosine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates cosine comparison from a data.frame of fluorescent signatures — Luciernaga_Cosine","text":"","code":"Luciernaga_Cosine(   data,   returntype = \"plot\",   rearrange = TRUE,   colorlow = \"lightblue\",   colorhigh = \"red\",   limitlow = 0.4,   limithigh = 1,   legend = TRUE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Cosine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates cosine comparison from a data.frame of fluorescent signatures — Luciernaga_Cosine","text":"data data.frame single name column rest numeric columns returntype Default returns \"plot\", alternatively \"data\" underlying data rearrange Whether rearrange plot group similar signatures colorlow Default \"lightblue\" colorhigh Default \"orange\" limitlow Default 0.4 limithigh Default 1 legend Default TRUE","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Cosine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates cosine comparison from a data.frame of fluorescent signatures — Luciernaga_Cosine","text":"Either ggplot matrix object","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Cosine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates cosine comparison from a data.frame of fluorescent signatures — Luciernaga_Cosine","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:data.table': #>  #>     between, first, last #> The following object is masked from 'package:flowCore': #>  #>     filter #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyCytoSet <- load_cytoset_from_fcs(UnstainedCells[1],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  PopulationInterest <- gs_pop_get_data(MyGatingSet[1], subset=\"lymphocytes\") TheDataValues <- exprs(PopulationInterest[[1]]) TheDataValues <- data.frame(TheDataValues, check.names=FALSE) Signature <- AveragedSignature(TheDataValues, stats=\"median\") TheData1 <- Signature[,-grep(\"Time|FS|SC|SS|Original|W$|H$\", names(Signature))] TheData1 <- TheData1 %>% mutate(Sample=\"lymphocytes\") %>%  relocate(Sample, .before=1)  PopulationInterest <- gs_pop_get_data(MyGatingSet[1], subset=\"nonDebris\") TheDataValues <- exprs(PopulationInterest[[1]]) TheDataValues <- data.frame(TheDataValues, check.names=FALSE) Signature <- AveragedSignature(TheDataValues, stats=\"median\") TheData2 <- Signature[,-grep(\"Time|FS|SC|SS|Original|W$|H$\", names(Signature))] TheData2 <- TheData2 %>% mutate(Sample=\"nonDebris\") %>%  relocate(Sample, .before=1)  FinalData <- rbind(TheData1, TheData2)  Plot <- Luciernaga_Cosine(data=FinalData, returntype=\"plot\")"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FCSToReport.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize cosine similarity of raw .fcs files to evaluate single color controls. — Luciernaga_FCSToReport","title":"Visualize cosine similarity of raw .fcs files to evaluate single color controls. — Luciernaga_FCSToReport","text":"Visualize cosine similarity raw .fcs files evaluate single color controls.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FCSToReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize cosine similarity of raw .fcs files to evaluate single color controls. — Luciernaga_FCSToReport","text":"","code":"Luciernaga_FCSToReport(   path,   reference,   stats = \"median\",   LinePlots = TRUE,   CosinePlots = TRUE,   StackedBarPlots = TRUE,   HeatmapPlots = TRUE,   RetainedType,   experiment,   condition,   TheSummary = TRUE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FCSToReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize cosine similarity of raw .fcs files to evaluate single color controls. — Luciernaga_FCSToReport","text":"path location folder Luciernaga .fcs files stored reference path .csv file dataframe containing Fluorophore Detector column information panel. stats Whether use median mean fluorescent intensity. LinePlots Return kind plot, default set TRUE CosinePlots Return kind plot, default set TRUE StackedBarPlots Return kind plot, default set TRUE HeatmapPlots Return kind plot, default set TRUE RetainedType Whether data.frame contains \"raw\" \"normalized\" values experiment Provide directly experiment name (ex. \"JAN2024\") condition Provide directly experiment name (ex. \"JAN2024\") TheSummary Whether summarized (TRUE) individual cells (FALSE).","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FCSToReport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize cosine similarity of raw .fcs files to evaluate single color controls. — Luciernaga_FCSToReport","text":"data.frame compatible LuciernagaReport()","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FCSToReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize cosine similarity of raw .fcs files to evaluate single color controls. — Luciernaga_FCSToReport","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) library(purrr) #>  #> Attaching package: 'purrr' #> The following object is masked from 'package:data.table': #>  #>     transpose library(stringr)  StorageLocation <- file.path(tempdir(), \"LuciernagaFCSToReportExample\") if (!dir.exists(StorageLocation)) {dir.create(StorageLocation)}  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)] MyCytoSet <- load_cytoset_from_fcs(CellSingleColors[1:2],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\".fcs\", \"(\", \")\", \"Cells\")  FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern, full.names = TRUE)  SingleColor_Data <- map(.x=MyGatingSet[1:2], .f=Luciernaga_QC,  subsets=\"lymphocytes\", removestrings=removestrings, sample.name=\"GUID\",  unmixingcontroltype = \"cells\", Unstained = FALSE, ratiopopcutoff = 0.001,  Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = FALSE,outpath = StorageLocation,  Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",  condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,   SCData=\"subtracted\",NegativeType=\"default\")  TheLuciernagaOutputs_FCS <- list.files(StorageLocation, pattern=\"fcs\", full.names = TRUE) TheLuciernagaOutputs_CSV <- list.files(StorageLocation, pattern=\"csv\", full.names = TRUE) PanelPath <- file.path(File_Location, \"Panel.csv\")  ReportOutput <- Luciernaga_FCSToReport(path=StorageLocation, reference=PanelPath,  stats=\"median\", RetainedType = \"normalized\", experiment=\"FirstExperiment\",  condition=\"ILTExperiment\", TheSummary = TRUE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderBrightness.html","id":null,"dir":"Reference","previous_headings":"","what":"Sister function to FolderSignature, returns a density plot of brightness — Luciernaga_FolderBrightness","title":"Sister function to FolderSignature, returns a density plot of brightness — Luciernaga_FolderBrightness","text":"Sister function FolderSignature, returns density plot brightness","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderBrightness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sister function to FolderSignature, returns a density plot of brightness — Luciernaga_FolderBrightness","text":"","code":"Luciernaga_FolderBrightness(   FolderPath,   sample.name,   StringRemoval = NULL,   fluorophore.name,   Verbose = FALSE,   stats = \"median\",   PanelCuts = NULL,   normalize = FALSE,   detector,   returnType = \"data\",   maxtik = 1e+06,   legend = \"right\" )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderBrightness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sister function to FolderSignature, returns a density plot of brightness — Luciernaga_FolderBrightness","text":"FolderPath Location Luciernaga_QC .fcs file outputs stored sample.name Keyword .fcs corresponding samples name StringRemoval Default NULL, remove sample name fluorophore.name name fluorophore Verbose Default FALSE stats Default median PanelCuts Default NULL normalize Default FALSE, scale peak detector detector detector corresponding fluorophore, sets x-axis returnType Default data, providing plot returns Luciernaga_Brightness plot maxtik Default 1e6, plot return legend Default right, set none remove.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderBrightness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sister function to FolderSignature, returns a density plot of brightness — Luciernaga_FolderBrightness","text":"Either data.frame brightness values, plot","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderBrightness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sister function to FolderSignature, returns a density plot of brightness — Luciernaga_FolderBrightness","text":"","code":"A <- 2+2"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderSignatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a folder of Luciernaga_QC signatures and returns a data.frame of the signatures contained within, for use in downstream data analysis. — Luciernaga_FolderSignatures","title":"Takes a folder of Luciernaga_QC signatures and returns a data.frame of the signatures contained within, for use in downstream data analysis. — Luciernaga_FolderSignatures","text":"Takes folder Luciernaga_QC signatures returns  data.frame signatures contained within, use  downstream data analysis.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderSignatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a folder of Luciernaga_QC signatures and returns a data.frame of the signatures contained within, for use in downstream data analysis. — Luciernaga_FolderSignatures","text":"","code":"Luciernaga_FolderSignatures(   FolderPath,   sample.name,   StringRemoval = NULL,   fluorophore.name,   Verbose = FALSE,   stats = \"median\",   PanelCuts = NULL,   normalize = TRUE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderSignatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a folder of Luciernaga_QC signatures and returns a data.frame of the signatures contained within, for use in downstream data analysis. — Luciernaga_FolderSignatures","text":"FolderPath Location Luciernaga_QC .fcs outputs sample.name keyword identifying sample name can found StringRemoval Default NULL, provide remove items sample.name based values found keyword fluorophore.name Specify name fluorophore Verbose Default FALSE, provides info goes stats Whether use median mean PanelCuts Default NULL, provide c(0.5,1) argument specify brightness percentiles retrieve signature individual files normalize Default TRUE, whether return normalized raw averaged MFI signatures","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderSignatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a folder of Luciernaga_QC signatures and returns a data.frame of the signatures contained within, for use in downstream data analysis. — Luciernaga_FolderSignatures","text":"data.frame corresponding averaged signatures per file","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_FolderSignatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes a folder of Luciernaga_QC signatures and returns a data.frame of the signatures contained within, for use in downstream data analysis. — Luciernaga_FolderSignatures","text":"","code":"A <- 2 + 2"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_GroupHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"A group version of the heatmap option from Luciernaga_Plots — Luciernaga_GroupHeatmap","title":"A group version of the heatmap option from Luciernaga_Plots — Luciernaga_GroupHeatmap","text":"group version heatmap option Luciernaga_Plots","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_GroupHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A group version of the heatmap option from Luciernaga_Plots — Luciernaga_GroupHeatmap","text":"","code":"Luciernaga_GroupHeatmap(   reports,   nameColumn,   cutoff = 0.01,   returntype = \"plot\" )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_GroupHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A group version of the heatmap option from Luciernaga_Plots — Luciernaga_GroupHeatmap","text":"reports data.frame list Luciernaga_QC report data objects nameColumn name column differentiates reports cutoff Proportion cells least 1 report needs exceed retention. returntype Either \"plot\" underlying \"data\"","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_GroupHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A group version of the heatmap option from Luciernaga_Plots — Luciernaga_GroupHeatmap","text":"Either plot underlying data","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_GroupHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A group version of the heatmap option from Luciernaga_Plots — Luciernaga_GroupHeatmap","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) library(purrr) File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\", full.names = TRUE) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(   \"Beads\", UnstainedFCSFiles)] MyCytoSet <- load_cytoset_from_fcs(UnstainedCells[c(1,3,5)],                                    truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\") FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern, full.names = TRUE)  reports <- map(.x=MyGatingSet[1:3], .f=Luciernaga_QC, subsets=\"lymphocytes\",                removestrings=removestrings, sample.name=\"GROUPNAME\",                unmixingcontroltype = \"cells\", Unstained = TRUE,                ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap,                stats = \"median\", ExportType = \"data\", SignatureReturnNow = FALSE,                outpath = TemporaryFolder, Increments=0.1, SecondaryPeaks=2,                experiment = \"Lymphocytes\", condition = \"Ctrl\",                Subtraction = \"Internal\", SCData=\"subtracted\",                NegativeType=\"default\")  plot <- Luciernaga_GroupHeatmap(reports=reports, nameColumn=\"Sample\",  cutoff=0.02, returntype = \"plot\")"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_IterativeUnmixing.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterates over single color variant .fcs files, passing the generated signature to unmix full-stain sample — Luciernaga_IterativeUnmixing","title":"Iterates over single color variant .fcs files, passing the generated signature to unmix full-stain sample — Luciernaga_IterativeUnmixing","text":"Iterates single color variant .fcs files, passing generated signature unmix full-stain sample","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_IterativeUnmixing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterates over single color variant .fcs files, passing the generated signature to unmix full-stain sample — Luciernaga_IterativeUnmixing","text":"","code":"Luciernaga_IterativeUnmixing(   IterativePath,   IterativeSampleName,   Iterativeremovestrings,   fluorophore.name,   PanelCuts = NULL,   stats = \"median\",   samplecolumn = \"Sample\",   controlData,   FullStainedGS,   sample.name,   removestrings,   subset = \"root\",   returnType = \"fcs\",   outpath = outpath,   PanelPath )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_IterativeUnmixing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterates over single color variant .fcs files, passing the generated signature to unmix full-stain sample — Luciernaga_IterativeUnmixing","text":"IterativePath File path folder containing variant single color .fcs files PanelCuts data.frame containing cuts, see Luciernaga_Unmixing. stats Whether use \"median\" \"mean\" derrive average signatures controlData Luciernaga_SingleColors output used combination iterated variant FullStainedGS GatingSet containing full-stained samples want see effect unmixing sample.name Keyword storage name removestrings Regular string values remove match single color name controlData subset population pass GatingSet, default root. outpath Desired storage location PanelPath Path reference panel ordering column markers unmixed file iterate_removestrings String values remove variant .fcs files name Verbose TRUE returns steps SignatureView Whether visualize SCs returntype Default set \"fcs\" iteration arguments","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_IterativeUnmixing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterates over single color variant .fcs files, passing the generated signature to unmix full-stain sample — Luciernaga_IterativeUnmixing","text":"Iterated versions full-stained sample","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_IterativeUnmixing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterates over single color variant .fcs files, passing the generated signature to unmix full-stain sample — Luciernaga_IterativeUnmixing","text":"","code":"NULL #> NULL"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_LinearSlices.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a Lucierna SingleColorQC .fcs, splits into percentiles, and plots the results. — Luciernaga_LinearSlices","title":"Takes a Lucierna SingleColorQC .fcs, splits into percentiles, and plots the results. — Luciernaga_LinearSlices","text":"Takes Lucierna SingleColorQC .fcs, splits percentiles, plots results.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_LinearSlices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a Lucierna SingleColorQC .fcs, splits into percentiles, and plots the results. — Luciernaga_LinearSlices","text":"","code":"Luciernaga_LinearSlices(   x,   subset,   sample.name,   removestrings,   stats,   returntype,   probsratio = 0.1,   output,   desiredAF = NULL,   legend = TRUE,   droplowest = TRUE,   titlename = NULL,   returncutplot = FALSE,   titleplot = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_LinearSlices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a Lucierna SingleColorQC .fcs, splits into percentiles, and plots the results. — Luciernaga_LinearSlices","text":"x GatingSet object subset desired gating hierarchy level look data sample.name Keyword sample name stored removestrings list values remove name stats Whether use \"mean\" \"median\" returntype Whether return \"raw\" \"normalized\" value lineplot. probsratio Ratio increments break quantiles , default set 0.1. output Whether return \"plot\" \"data\" desiredAF Peak detector(ex. \"V7-\") want filter cells slicing, argument used override main peak detector .fcs file single peak detector, default set NULL legend Returns legend, default TRUE. droplowest Removes lowest bin (percentile 0), default TRUE titlename Default NULL, otherwise provide alternate title. returncutplot Default FALSE, true returns histogram plot locations percentile slice occured. titleplot Default NULL, sets returncutplot title","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_LinearSlices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a Lucierna SingleColorQC .fcs, splits into percentiles, and plots the results. — Luciernaga_LinearSlices","text":"Either ggplots summarized data.frame object preceding","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_LinearSlices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes a Lucierna SingleColorQC .fcs, splits into percentiles, and plots the results. — Luciernaga_LinearSlices","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) library(purrr) library(stringr)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)]  APC_Example <- CellSingleColors[grep(\"CD16_\", CellSingleColors)]  MyCytoSet <- load_cytoset_from_fcs(APC_Example,   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <- c(\".fcs\")  NormalizedSlices <- Luciernaga_LinearSlices(x=MyGatingSet[1],  subset=\"lymphocytes\",sample.name=\"GUID\", removestrings=removestrings,  stats=\"median\", returntype=\"normalized\", probsratio=0.1, output=\"plot\",  desiredAF=\"R1-A\")"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Luciernaga plot outputs from List of List — Luciernaga_Lists","title":"Generate Luciernaga plot outputs from List of List — Luciernaga_Lists","text":"Generate Luciernaga plot outputs List List","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Luciernaga plot outputs from List of List — Luciernaga_Lists","text":"","code":"Luciernaga_Lists(   ListOfList,   SecondaryList = NULL,   PlotType,   thecolumns = 2,   therows = 3,   width = 7,   height = 9,   ReturnFolder,   CurrentExperiment )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Luciernaga plot outputs from List of List — Luciernaga_Lists","text":"ListOfList list containing returns Luciernaga_Plots plot option. SecondaryList Default NULL, given list incorporate plot . PlotType Whether \"html\" \"pdf\" thecolumns number columns per page therows number rows per page width Desired page width height Desired page height ReturnFolder Location store file CurrentExperiment Name Current Experiment","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Luciernaga plot outputs from List of List — Luciernaga_Lists","text":"file containing bound Luciernaga plots specified format","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Luciernaga plot outputs from List of List — Luciernaga_Lists","text":"","code":"NULL #> NULL"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Move.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer the .fcs files selected by LuciernagaTree to a new location — Luciernaga_Move","title":"Transfer the .fcs files selected by LuciernagaTree to a new location — Luciernaga_Move","text":"Transfer .fcs files selected LuciernagaTree new location","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer the .fcs files selected by LuciernagaTree to a new location — Luciernaga_Move","text":"","code":"Luciernaga_Move(x, data, input, output)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer the .fcs files selected by LuciernagaTree to a new location — Luciernaga_Move","text":"x vector containing fluorophore names found within data. data data.frame output LuciernagaTree listing files moved. input path current storage location .fcs files. output path desired future storage location selected files.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer the .fcs files selected by LuciernagaTree to a new location — Luciernaga_Move","text":"return, .fcs files moved desired folder.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Move.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer the .fcs files selected by LuciernagaTree to a new location — Luciernaga_Move","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) library(purrr) library(stringr)  StorageLocation <- file.path(tempdir(), \"LuciernagaTreeExample\") if (!dir.exists(StorageLocation)) {dir.create(StorageLocation)}  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)] MyCytoSet <- load_cytoset_from_fcs(CellSingleColors,   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished.  UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyUnstainedCytoSet <- load_cytoset_from_fcs(UnstainedCells[1],   truncate_max_range = FALSE,transformation = FALSE) MyUnstainedGatingSet <- GatingSet(MyUnstainedCytoSet) gt_gating(MyGatingTemplate, MyUnstainedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished.  removestrings <-  c(\".fcs\", \"(\", \")\", \"Cells\") FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern, full.names = TRUE)  TheCellAF  <- Luciernaga_QC(x=MyUnstainedGatingSet[[1]], subsets=\"nonDebris\",  removestrings=removestrings, sample.name=\"GUID\", unmixingcontroltype = \"cells\",  Unstained = TRUE, ratiopopcutoff = 0.001, Verbose = FALSE,  AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = TRUE, outpath = StorageLocation,  Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",  condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,  SCData=\"subtracted\",NegativeType=\"default\", minimalfcscutoff=0.01) #> Normalizing Data for Signature Comparison   MyGatingSet <- subset(MyGatingSet, !str_detect(name, \"CD14\"))  SingleColor_Data <- map(.x=MyGatingSet, .f=Luciernaga_QC,  subsets=\"lymphocytes\", removestrings=removestrings, sample.name=\"GUID\",  unmixingcontroltype = \"cells\", Unstained = FALSE, ratiopopcutoff = 0.001,  Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = FALSE,outpath = StorageLocation,  Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",  condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,   SCData=\"subtracted\",NegativeType=\"default\", minimalfcscutoff=0.02) #> No second peak #> No second peak #> No second peak #> Only a single detector present. If this was not an autofluorescence overlap #>               fluourophore, it would suggest there was no antibody staining, or everything #>               was overstained. Please investigate further. #> No second peak #> No second peak #> No second peak  Unstained_Data  <- map(.x=MyUnstainedGatingSet, .f=Luciernaga_QC,  subsets=\"nonDebris\", removestrings=removestrings, sample.name=\"GUID\",  unmixingcontroltype = \"cells\", Unstained = TRUE, ratiopopcutoff = 0.001,  Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = FALSE, outpath = StorageLocation,   Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",   condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,    SCData=\"subtracted\",NegativeType=\"default\", minimalfcscutoff=0.01)  PanelPath <- file.path(File_Location, \"UnmixingPanel.csv\") MoveThese <- Luciernaga_Tree(BrightnessFilePath = StorageLocation,  PanelPath = PanelPath) #> No Fluorophore for Pacific Blue was found #> No Fluorophore for Alexa Fluor 488 was found #> No Fluorophore for Spark Blue 550 was found #> No Fluorophore for Alexa Fluor 647 was found #> No Fluorophore for Zombie NIR was found #> No Fluorophore for APC-Fire 750 was found #> No Fluorophore for APC-Fire 810 was found  SortedStorageLocation <- file.path(tempdir(), \"LuciernagaSelected\") if (!dir.exists(SortedStorageLocation)) {dir.create(SortedStorageLocation)}  UnmixingPanel <- read.csv(PanelPath, check.names=FALSE) TheseFluorophores <- UnmixingPanel %>% pull(Fluorophore)  walk(.x=TheseFluorophores, .f=Luciernaga_Move, data=MoveThese,  input=StorageLocation, output=SortedStorageLocation) #> Error in map(.x, .f, ..., .progress = .progress): ℹ In index: 9. #> Caused by error in `str_detect()` at Luciernaga/R/Luciernaga_Move.R:118:3: #> ! Can't recycle `string` (size 226) to match `pattern` (size 0). MovedFiles <- list.files(SortedStorageLocation, pattern=\"fcs\", full.names=TRUE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts the Luciernaga outputs into .pdf plots — Luciernaga_Plots","title":"Converts the Luciernaga outputs into .pdf plots — Luciernaga_Plots","text":"Converts Luciernaga outputs .pdf plots","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts the Luciernaga outputs into .pdf plots — Luciernaga_Plots","text":"","code":"Luciernaga_Plots(   data,   RetainedType,   CellPopRatio,   outfolder,   filename,   LinePlots = TRUE,   CosinePlots = TRUE,   StackedBarPlots = TRUE,   HeatmapPlots = TRUE,   returntype = \"patchwork\",   reference = NULL,   thecolumns = 2,   therows = 2,   width = 9,   height = 7 )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts the Luciernaga outputs into .pdf plots — Luciernaga_Plots","text":"data data.frame output LuciernagaQC RetainedType Whether data.frame contains \"raw\" \"normalized\" values CellPopRatio mininum ratio needed retain cluster. outfolder location want save .pdf output . filename name want save .pdf file . LinePlots Passed Utility_Patchwork \"pdf\" \"patchwork\" \"plots\" CosinePlots Return kind plot, default set TRUE StackedBarPlots Return kind plot, default set TRUE HeatmapPlots Return kind plot, default set TRUE returntype Return \"pdf\", \"patchwork\" \"plots\" reference path data.frame containing Fluorophore column ordering thecolumns number columns per page therows number rows per page width Desired page width height Desired page height","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts the Luciernaga outputs into .pdf plots — Luciernaga_Plots","text":"value determined later","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts the Luciernaga outputs into .pdf plots — Luciernaga_Plots","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) library(purrr) library(stringr)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)] MyCytoSet <- load_cytoset_from_fcs(CellSingleColors[1:2],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern, full.names = TRUE)  SingleColor_Data <- map(.x=MyGatingSet[1:2], .f=Luciernaga_QC, subsets=\"lymphocytes\",  removestrings=removestrings, sample.name=\"GUID\", unmixingcontroltype = \"cells\",  Unstained = FALSE, ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap,  stats = \"median\", ExportType = \"data\", SignatureReturnNow = FALSE,  outpath = TemporaryFolder, Increments=0.1, SecondaryPeaks=2,  experiment = \"FirstExperiment\", condition = \"ILTPanel\", Subtraction = \"Internal\",  CellAF=TheCellAF, SCData=\"subtracted\", NegativeType=\"default\") %>% bind_rows()  pattern = \"^Panel.csv\" CSV <- list.files(path=FileLocation, pattern=pattern, full.names=TRUE) TheFluorophoreOrder <- read.csv(CSV, check.names = FALSE)  ThePlots <- Luciernaga_Plots(data=SingleColor_Data, RetainedType=\"normalized\",  CellPopRatio=0.05, outfolder=NULL, filename=\"LuciernagaReport\", returntype=\"plots\",  LinePlots=FALSE, CosinePlots=FALSE, StackedBarPlots = FALSE, HeatmapPlots = TRUE,  reference = TheFluorophoreOrder) #> names not matching, no reorderring according to panel order"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_QC.html","id":null,"dir":"Reference","previous_headings":"","what":"Main Luciernaga Function, normalized on individual cell level — Luciernaga_QC","title":"Main Luciernaga Function, normalized on individual cell level — Luciernaga_QC","text":"Main Luciernaga Function, normalized individual cell level","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_QC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main Luciernaga Function, normalized on individual cell level — Luciernaga_QC","text":"","code":"Luciernaga_QC(   x,   subsets,   sample.name,   removestrings = NULL,   Verbose = FALSE,   experiment = NULL,   experiment.name = NULL,   condition = NULL,   condition.name = NULL,   AFOverlap,   unmixingcontroltype = \"both\",   Unstained = FALSE,   ratiopopcutoff = 0.01,   stats = \"median\",   Subtraction = \"Internal\",   desiredAF = NULL,   BeadAF = NULL,   BeadMainAF = NULL,   CellAF = NULL,   CellMainAF = NULL,   SignatureReturnNow = FALSE,   Increments,   LocalMaximaRatio = 0.15,   SecondaryPeaks = 2,   Brightness = FALSE,   RetainedType = \"raw\",   ExportType,   minimalfcscutoff = 0.05,   SCData = \"subtracted\",   NegativeType = \"default\",   TotalNegatives = 500,   outpath,   inverse.transform = FALSE,   Consolidate = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_QC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main Luciernaga Function, normalized on individual cell level — Luciernaga_QC","text":"x Gating Set object (ex. gs gs[[1]]) subsets Gating Hierarchy level sampling sample.name Keyword variable samples stored (ex. \"GUID\") removestrings string character values remove sample.name Verbose Whether print outputs go. experiment Provide directly experiment name (ex. \"JAN2024\") experiment.name Keyword variable experiment information stored (ex. \"TUBENAME\") condition Provide directly experiment name (ex. \"JAN2024\") condition.name Keyword variable experiment information stored (ex. \"TUBENAME\") AFOverlap data.frame filepath CSV containing Autofluorescence overlap individual fluorophores exclusion unmixingcontroltype Whether inputs \"cells\", \"beads\" \"\" Unstained Set True running unstained samples Unstained Name ratiopopcutoff numeric ratio peak detector inclusion, default set 0.01 startingcells stats Whether take \"mean\" \"median\" Subtraction Whether single color controls use \"Internal\", \"Internal_General\" \"External\" autofluorescence desiredAF Main Autofluorescence Detector (ex. \"V7-\") BeadAF passed data.frame row containing reference bead unstained. BeadMainAF detector corresponds \"main\" bead AF, albeit dim. CellAF passed data.frame row containing reference cell unstained. CellMainAF detector corresponds \"main\" cell AF. SignatureReturnNow Short circuits function returns signature specified autofluorescence. Increments Rounding parameter, default set 0.1 LocalMaximaRatio Height peaks proceed SecondaryPeaks Number Secondary Peaks, default set 2. Brightness Whether sum detectors returned. RetainedType Whether return \"raw\" \"normalized\" values lineplots. ExportType Whether return \"fcs\", \"data\" minimalfcscutoff ratio determining number cells needed .fcs export SCData Whether return \"subtracted\" \"raw\" data single colors NegativeType Whether append negative pop .fcs file, \"default\", \"artifical\" \"samples\" TotalNegatives setting NegativeType \"artificial\" \"sample\", many events add. outpath Location created .fcs .csv files sent inverse.transform Passed flowWorkspace, data transformed wish return raw values, set TRUE. Consolidate Default NULL, alternative Cluster character string partly match consolidate fcs_export","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_QC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main Luciernaga Function, normalized on individual cell level — Luciernaga_QC","text":"Additional information added","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_QC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main Luciernaga Function, normalized on individual cell level — Luciernaga_QC","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) library(purrr) library(stringr)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)] MyCytoSet <- load_cytoset_from_fcs(CellSingleColors[1:2],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern, full.names = TRUE)  SingleColor_Data <- map(.x=MyGatingSet[1:2], .f=Luciernaga_QC, subsets=\"lymphocytes\",  removestrings=removestrings, sample.name=\"GUID\", unmixingcontroltype = \"cells\",  Unstained = FALSE, ratiopopcutoff = 0.001, Verbose = FALSE, AFOverlap = AFOverlap,  stats = \"median\", ExportType = \"data\", SignatureReturnNow = FALSE,  outpath = TemporaryFolder, Increments=0.1, SecondaryPeaks=2,  experiment = \"FirstExperiment\", condition = \"ILTPanel\", Subtraction = \"Internal\",  CellAF=TheCellAF, SCData=\"subtracted\", NegativeType=\"default\") %>% bind_rows()"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SignatureExternalUnstained.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for LuciernagaQC for large scale profiling. Matches unstained with single colors for respective dates, extracts signature and plots, returns data.frame and list of patchwork objects. — Luciernaga_SignatureExternalUnstained","title":"Wrapper for LuciernagaQC for large scale profiling. Matches unstained with single colors for respective dates, extracts signature and plots, returns data.frame and list of patchwork objects. — Luciernaga_SignatureExternalUnstained","text":"Wrapper LuciernagaQC large scale profiling. Matches unstained single colors respective dates, extracts signature plots, returns data.frame list patchwork objects.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SignatureExternalUnstained.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for LuciernagaQC for large scale profiling. Matches unstained with single colors for respective dates, extracts signature and plots, returns data.frame and list of patchwork objects. — Luciernaga_SignatureExternalUnstained","text":"","code":"Luciernaga_SignatureExternalUnstained(   x,   UnstainedList,   FluorophoreList,   Multiple = FALSE,   GateTemplatePath,   removestrings = \".fcs\",   AFOverlap,   controlType,   subsets )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SignatureExternalUnstained.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for LuciernagaQC for large scale profiling. Matches unstained with single colors for respective dates, extracts signature and plots, returns data.frame and list of patchwork objects. — Luciernaga_SignatureExternalUnstained","text":"x list Dates UnstainedList list file.paths unstained files FluorophoreList list file.paths fluorophore files Multiple Default FALSE, expecting multiple single color controls per unstained set TRUE GateTemplatePath File.path openCyto gating template .csv removestrings Default \".fcs\", removes name AFOverlap File.path LuciernagaQC AFOverlap .csv handle exceptions. controlType Either \"beads\" \"cells\" (selects respective external AF protocol) subsets desired openCyto gating population extract signature ","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SignatureExternalUnstained.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for LuciernagaQC for large scale profiling. Matches unstained with single colors for respective dates, extracts signature and plots, returns data.frame and list of patchwork objects. — Luciernaga_SignatureExternalUnstained","text":"data.frame list patchwork plots","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SignatureExternalUnstained.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for LuciernagaQC for large scale profiling. Matches unstained with single colors for respective dates, extracts signature and plots, returns data.frame and list of patchwork objects. — Luciernaga_SignatureExternalUnstained","text":"","code":"library(Luciernaga)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SingleColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the single color control matrix for a given quantile cutoffs and a given statistic — Luciernaga_SingleColors","title":"Calculates the single color control matrix for a given quantile cutoffs and a given statistic — Luciernaga_SingleColors","text":"Calculates single color control matrix given quantile cutoffs given statistic","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SingleColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the single color control matrix for a given quantile cutoffs and a given statistic — Luciernaga_SingleColors","text":"","code":"Luciernaga_SingleColors(   x,   sample.name,   removestrings,   subset,   PanelCuts,   stats,   SignatureView,   Verbose = FALSE,   returntype = \"data\" )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SingleColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the single color control matrix for a given quantile cutoffs and a given statistic — Luciernaga_SingleColors","text":"x Gating Set Object sample.name Keyword Fluorophore Name stored removestrings Values remove name subset desired Gating Hierarchy level cells filter PanelCuts .csv dataframe containing columns Fluorophore, Fluorophore name match sample.name style stats Whether use \"mean\" \"median\" SignatureView Whether also return normalized signature plot. Verbose Provides debugging removestrings returntype Allows modify default \"data\" instead return \"plots\"","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SingleColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the single color control matrix for a given quantile cutoffs and a given statistic — Luciernaga_SingleColors","text":"tibble row flow object containing summarized data.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_SingleColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the single color control matrix for a given quantile cutoffs and a given statistic — Luciernaga_SingleColors","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) library(purrr) library(stringr)  StorageLocation <- file.path(tempdir(), \"LuciernagaTreeExample\") if (!dir.exists(StorageLocation)) {dir.create(StorageLocation)}  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)] MyCytoSet <- load_cytoset_from_fcs(CellSingleColors,   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished.  UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyUnstainedCytoSet <- load_cytoset_from_fcs(UnstainedCells[1],   truncate_max_range = FALSE,transformation = FALSE) MyUnstainedGatingSet <- GatingSet(MyUnstainedCytoSet) gt_gating(MyGatingTemplate, MyUnstainedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished.  removestrings <-  c(\".fcs\", \"(\", \")\", \"Cells\") FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern, full.names = TRUE)  TheCellAF  <- Luciernaga_QC(x=MyUnstainedGatingSet[[1]], subsets=\"nonDebris\",  removestrings=removestrings, sample.name=\"GUID\", unmixingcontroltype = \"cells\",  Unstained = TRUE, ratiopopcutoff = 0.001, Verbose = FALSE,  AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = TRUE, outpath = StorageLocation,  Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",  condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,  SCData=\"subtracted\",NegativeType=\"default\", minimalfcscutoff=0.01) #> Normalizing Data for Signature Comparison   MyGatingSet <- subset(MyGatingSet, !str_detect(name, \"CD14\"))  SingleColor_Data <- map(.x=MyGatingSet, .f=Luciernaga_QC,  subsets=\"lymphocytes\", removestrings=removestrings, sample.name=\"GUID\",  unmixingcontroltype = \"cells\", Unstained = FALSE, ratiopopcutoff = 0.001,  Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = FALSE,outpath = StorageLocation,  Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",  condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,   SCData=\"subtracted\",NegativeType=\"default\", minimalfcscutoff=0.02) #> No second peak #> No second peak #> No second peak #> Only a single detector present. If this was not an autofluorescence overlap #>               fluourophore, it would suggest there was no antibody staining, or everything #>               was overstained. Please investigate further. #> No second peak #> No second peak #> No second peak  Unstained_Data  <- map(.x=MyUnstainedGatingSet, .f=Luciernaga_QC,  subsets=\"nonDebris\", removestrings=removestrings, sample.name=\"GUID\",  unmixingcontroltype = \"cells\", Unstained = TRUE, ratiopopcutoff = 0.001,  Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = FALSE, outpath = StorageLocation,   Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",   condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,    SCData=\"subtracted\",NegativeType=\"default\", minimalfcscutoff=0.01)  PanelPath <- file.path(File_Location, \"UnmixingPanel.csv\") MoveThese <- Luciernaga_Tree(BrightnessFilePath = StorageLocation,  PanelPath = PanelPath) #> No Fluorophore for Pacific Blue was found #> No Fluorophore for Alexa Fluor 488 was found #> No Fluorophore for Spark Blue 550 was found #> No Fluorophore for Alexa Fluor 647 was found #> No Fluorophore for Zombie NIR was found #> No Fluorophore for APC-Fire 750 was found #> No Fluorophore for APC-Fire 810 was found  SortedStorageLocation <- file.path(tempdir(), \"LuciernagaSelected\") if (!dir.exists(SortedStorageLocation)) {dir.create(SortedStorageLocation)}  UnmixingPanel <- read.csv(PanelPath, check.names=FALSE) TheseFluorophores <- UnmixingPanel %>% pull(Fluorophore)  walk(.x=TheseFluorophores, .f=Luciernaga_Move, data=MoveThese,  input=StorageLocation, output=SortedStorageLocation) #> Error in map(.x, .f, ..., .progress = .progress): ℹ In index: 9. #> Caused by error in `str_detect()` at Luciernaga/R/Luciernaga_Move.R:118:3: #> ! Can't recycle `string` (size 226) to match `pattern` (size 0). MovedFiles <- list.files(SortedStorageLocation, pattern=\"fcs\", full.names=TRUE)  UnmixingPanel <- read.csv(PanelPath, check.names=FALSE) ThePanelCuts <- UnmixingPanel %>% select(-Detector) %>%  mutate(From=0.3) %>% mutate(To=1)  MovedFiles <- list.files(SortedStorageLocation,   pattern=\"fcs\", full.names=TRUE) Selected_CS <- load_cytoset_from_fcs(MovedFiles[1],   truncate_max_range = FALSE, transform = FALSE) Selected_GS <- GatingSet(Selected_CS)  removestrings=c(\"DR_\", \".fcs\")  SCs <- map(.x=Selected_GS[1], .f=Luciernaga_SingleColors,  sample.name=\"TUBENAME\", removestrings=removestrings,  subset=\"root\", PanelCuts=ThePanelCuts, stats=\"median\",  Verbose=TRUE, SignatureView=TRUE, returntype = \"plots\") #> After removestrings cleanup the name is CCR4 BUV615 #> The Fluorophore is BUV615 and the ligand is CCR4"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Select candidate Luciernaga output .fcs files for future use in unmixing. — Luciernaga_Tree","title":"Select candidate Luciernaga output .fcs files for future use in unmixing. — Luciernaga_Tree","text":"Select candidate Luciernaga output .fcs files future use unmixing.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select candidate Luciernaga output .fcs files for future use in unmixing. — Luciernaga_Tree","text":"","code":"Luciernaga_Tree(BrightnessFilePath, PanelPath)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select candidate Luciernaga output .fcs files for future use in unmixing. — Luciernaga_Tree","text":"BrightnessFilePath path folder individual brightness files . PanelPath path .csv file containing panel information. include fluorophores captured BrightnessFiles","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select candidate Luciernaga output .fcs files for future use in unmixing. — Luciernaga_Tree","text":"data.frame listing candidate .fcs files future unmixing use.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select candidate Luciernaga output .fcs files for future use in unmixing. — Luciernaga_Tree","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr) library(purrr) library(stringr)  StorageLocation <- file.path(tempdir(), \"LuciernagaTreeExample\") if (!dir.exists(StorageLocation)) {dir.create(StorageLocation)}  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) CellSingleColorFiles <- FCS_Files[grep(\"Cells\", FCS_Files)] CellSingleColors <- CellSingleColorFiles[!str_detect(\"Unstained\", CellSingleColorFiles)] MyCytoSet <- load_cytoset_from_fcs(CellSingleColors[1:2],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished.  UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyUnstainedCytoSet <- load_cytoset_from_fcs(UnstainedCells[1],   truncate_max_range = FALSE,transformation = FALSE) MyUnstainedGatingSet <- GatingSet(MyUnstainedCytoSet) gt_gating(MyGatingTemplate, MyUnstainedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished.  removestrings <-  c(\".fcs\", \"(\", \")\", \"Cells\") FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") pattern = \"AutofluorescentOverlaps.csv\" AFOverlap <- list.files(path=FileLocation, pattern=pattern, full.names = TRUE)  SingleColor_Data <- map(.x=MyGatingSet[1:2], .f=Luciernaga_QC,  subsets=\"lymphocytes\", removestrings=removestrings, sample.name=\"GUID\",  unmixingcontroltype = \"cells\", Unstained = FALSE, ratiopopcutoff = 0.001,  Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = FALSE,outpath = StorageLocation,  Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",  condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,   SCData=\"subtracted\",NegativeType=\"default\")  Unstained_Data  <- map(.x=MyUnstainedGatingSet[1], .f=Luciernaga_QC,  subsets=\"nonDebris\", removestrings=removestrings, sample.name=\"GUID\",  unmixingcontroltype = \"cells\", Unstained = TRUE, ratiopopcutoff = 0.001,  Verbose = FALSE, AFOverlap = AFOverlap, stats = \"median\", ExportType = \"fcs\",  Brightness=TRUE, SignatureReturnNow = FALSE, outpath = StorageLocation,   Increments=0.1, SecondaryPeaks=2, experiment = \"FirstExperiment\",   condition = \"ILTPanel\", Subtraction = \"Internal\", CellAF=TheCellAF,    SCData=\"subtracted\",NegativeType=\"default\", minimalfcscutoff=0.01)  PanelPath <- file.path(File_Location, \"UnmixingPanel.csv\") MoveThese <- Luciernaga_Tree(BrightnessFilePath = StorageLocation,  PanelPath = PanelPath) #> No Fluorophore for Pacific Blue was found #> No Fluorophore for Alexa Fluor 488 was found #> No Fluorophore for Spark Blue 550 was found #> No Fluorophore for Alexa Fluor 647 was found #> No Fluorophore for Zombie NIR was found #> No Fluorophore for APC-Fire 750 was found #> No Fluorophore for APC-Fire 810 was found"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Unmix.html","id":null,"dir":"Reference","previous_headings":"","what":"OLS unmixing of a Gating Set object — Luciernaga_Unmix","title":"OLS unmixing of a Gating Set object — Luciernaga_Unmix","text":"OLS unmixing Gating Set object","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Unmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OLS unmixing of a Gating Set object — Luciernaga_Unmix","text":"","code":"Luciernaga_Unmix(   x,   controlData,   sample.name,   removestrings,   Verbose,   addon,   subset = \"root\",   outpath,   PanelPath,   returnType = \"fcs\" )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Unmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OLS unmixing of a Gating Set object — Luciernaga_Unmix","text":"x Gating Set object controlData matrix single color controls generated Luciernaga sample.name keyword containing fcs file name removestrings list values remove name Verbose troubleshooting name removestrings addon Additional addon append new .fcs file name subset gating hierarchy level sort cells , expression values retrieved outpath return folder .fcs files PanelPath Location panel.csv containing correct order fluorophores returnType Whether return \"fcs\" \"flowframe\"","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Unmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OLS unmixing of a Gating Set object — Luciernaga_Unmix","text":"new .fcs file new columns appended","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Luciernaga_Unmix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OLS unmixing of a Gating Set object — Luciernaga_Unmix","text":"","code":"NULL #> NULL"},{"path":"https://davidrach.github.io/Luciernaga/reference/MarginClean.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds openCyto boundary gates at designated location, selectively cleaning out margin events that mess with various algorithms. Can return template for redo editing, as well as returns plots for troubleshooting. — MarginClean","title":"Adds openCyto boundary gates at designated location, selectively cleaning out margin events that mess with various algorithms. Can return template for redo editing, as well as returns plots for troubleshooting. — MarginClean","text":"Adds openCyto boundary gates designated location, selectively cleaning margin events mess various algorithms. Can return template redo editing, well returns plots troubleshooting.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/MarginClean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds openCyto boundary gates at designated location, selectively cleaning out margin events that mess with various algorithms. Can return template for redo editing, as well as returns plots for troubleshooting. — MarginClean","text":"","code":"MarginClean(   gs,   desiredCols = NULL,   subset = \"root\",   themin = NULL,   themax,   returnTemplate = FALSE,   importTemplate = FALSE,   returnPlots = FALSE,   Verbose = FALSE,   inpath = NULL,   outpath = NULL,   filename = NULL,   yaxis = NULL,   sample.name = NULL,   inverse.transform = FALSE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/MarginClean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds openCyto boundary gates at designated location, selectively cleaning out margin events that mess with various algorithms. Can return template for redo editing, as well as returns plots for troubleshooting. — MarginClean","text":"gs GatingSet object want clean margins desiredCols Provide vector fluorophore names clean margins (see colnames(gs)), default NULL cleans margins fluorophores subset Subset start margin cleanup, default root. themin Default NULL, provide numeric value establish lower boundary clean small debris. themax Provide numeric value set upper boundary exclude margin events. returnTemplate Default FALSE, returns assembled openCyto gating template allowing adjustments can brought importTemplate inpath importTemplate Default FALSE, TRUE, retrieves previous returnTemplate .csv inpath location uses openCyto gating returnPlots Default FALSE, TRUE, returns pdf margin clean events outpath verify cut population interest. Verbose Default FALSE, print console frequency retained cells margin cleanup specimen inpath Default NULL, alternatively file.path template.csv imported openCyto gating outpath Default NULL, provide file.path desired location store either returnTemplate returnPlot objects filename Default NULL, alternatively set name returnTemplate returnPlot objects yaxis Sets yaxis fluorophore returnPlots, default NULL utilizes first fluorophore panel sample.name Used returningPlots, default NULL uses TUBENAME keyword value provided retrieving sample name plot titles. inverse.transform Default FALSE, retaining input GatingSet transformation setting","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/MarginClean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds openCyto boundary gates at designated location, selectively cleaning out margin events that mess with various algorithms. Can return template for redo editing, as well as returns plots for troubleshooting. — MarginClean","text":"margin cleaned GatingSet, alternatively openCyto template visualized cleaned data","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/NameCleanUp.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorten a variable name — NameCleanUp","title":"Shorten a variable name — NameCleanUp","text":"Shorten variable name","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/NameCleanUp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorten a variable name — NameCleanUp","text":"","code":"NameCleanUp(name, removestrings, substitutestrings)"},{"path":"https://davidrach.github.io/Luciernaga/reference/NameCleanUp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorten a variable name — NameCleanUp","text":"name variable wish shorten. removestrings list strings sequentially removed name. example: removestrings = c(\"ReferenceGroup_\", \".fcs\") substitutestrings data.frame containing two columns, Original Substitute.  row Original recognized, replaced substitute value.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/NameCleanUp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorten a variable name — NameCleanUp","text":"shortened variable","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/NameCleanUp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorten a variable name — NameCleanUp","text":"","code":"name <- \"DR BUV496 CD8 (Cells).fcs\" removestrings <- c(\"DR\", \"(Cells)\", \".fcs\", \" \") Cleaned_Name <- NameCleanUp(name, removestrings)"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Amalgamate.html","id":null,"dir":"Reference","previous_headings":"","what":"Taking a Luciernaga_Slices (or similar data.frame) with an added Counts column, expands each row by the count, takes the median, and then returns either data or a plot showing how different the average signature is from the individual ones — QC_Amalgamate","title":"Taking a Luciernaga_Slices (or similar data.frame) with an added Counts column, expands each row by the count, takes the median, and then returns either data or a plot showing how different the average signature is from the individual ones — QC_Amalgamate","text":"Taking Luciernaga_Slices (similar data.frame) added Counts column, expands row count, takes median, returns either data plot showing different average signature individual ones","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Amalgamate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taking a Luciernaga_Slices (or similar data.frame) with an added Counts column, expands each row by the count, takes the median, and then returns either data or a plot showing how different the average signature is from the individual ones — QC_Amalgamate","text":"","code":"QC_Amalgamate(   data,   samplecolumn = \"Percentiles\",   normalize = FALSE,   countcolumn = \"Count\",   returnType = \"plot\",   titlename = NULL,   linecolor = \"red\",   legend = TRUE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Amalgamate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taking a Luciernaga_Slices (or similar data.frame) with an added Counts column, expands each row by the count, takes the median, and then returns either data or a plot showing how different the average signature is from the individual ones — QC_Amalgamate","text":"data modified data.frame containing sample, count normalized detector columns samplecolumn column name correspondoing sample column, default Percentiles countcolumn column name corresponding count column, default Count returnType Whether return plot (default) data titlename Default NULL, specify title desired linecolor Default red, specify alternate color Average signature legend Whether return legend, default TRUE","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Amalgamate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taking a Luciernaga_Slices (or similar data.frame) with an added Counts column, expands each row by the count, takes the median, and then returns either data or a plot showing how different the average signature is from the individual ones — QC_Amalgamate","text":"Either plot underlying data","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Amalgamate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taking a Luciernaga_Slices (or similar data.frame) with an added Counts column, expands each row by the count, takes the median, and then returns either data or a plot showing how different the average signature is from the individual ones — QC_Amalgamate","text":"","code":"A <- 2+2"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_DailyQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts Cytek Aurora Daily QC report into a data frame. — QC_FilePrep_DailyQC","title":"Converts Cytek Aurora Daily QC report into a data frame. — QC_FilePrep_DailyQC","text":"Converts Cytek Aurora Daily QC report data frame.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_DailyQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts Cytek Aurora Daily QC report into a data frame. — QC_FilePrep_DailyQC","text":"","code":"QC_FilePrep_DailyQC(x)"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_DailyQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts Cytek Aurora Daily QC report into a data frame. — QC_FilePrep_DailyQC","text":"x Takes Daily QC CSV file, converts \"tidyed\" dataframe plotting. Currently works 3L, 4L, 5L Auroras.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_DailyQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts Cytek Aurora Daily QC report into a data frame. — QC_FilePrep_DailyQC","text":"dataframe.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_DailyQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts Cytek Aurora Daily QC report into a data frame. — QC_FilePrep_DailyQC","text":"","code":"File_Location <- system.file(\"extdata\", package = \"Luciernaga\") CSV_Pattern <- \".CSV$\" CSV_Files <- list.files(path=File_Location, pattern=CSV_Pattern,                        full.names=TRUE) TidyData <- QC_FilePrep_DailyQC(CSV_Files) #> Error in strsplit(String, \"_\")[[1]]: subscript out of bounds"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_LJTracking.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts the Cytek Aurora (TM)'s QC report into a data frame. — QC_FilePrep_LJTracking","title":"Converts the Cytek Aurora (TM)'s QC report into a data frame. — QC_FilePrep_LJTracking","text":"Converts Cytek Aurora (TM)'s QC report data frame.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_LJTracking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts the Cytek Aurora (TM)'s QC report into a data frame. — QC_FilePrep_LJTracking","text":"","code":"QC_FilePrep_LJTracking(x, DailyQC)"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_LJTracking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts the Cytek Aurora (TM)'s QC report into a data frame. — QC_FilePrep_LJTracking","text":"x Takes Levy-Jennings QC tracking report saved .csv file, converts \"tidyed\" dataframe plotting. Currently works 3L, 4L, 5L Auroras. Please reach find issue, .csv export varies bit want continue improve code handle odd exceptions. DailyQC single DailyQCReport .csv file, used import baseline settings.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_LJTracking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts the Cytek Aurora (TM)'s QC report into a data frame. — QC_FilePrep_LJTracking","text":"dataframe.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_FilePrep_LJTracking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts the Cytek Aurora (TM)'s QC report into a data frame. — QC_FilePrep_LJTracking","text":"","code":"File_Location <- system.file(\"extdata\", package = \"Luciernaga\") CSV_Pattern <- \".CSV$\" CSV_Files <- list.files(path=File_Location, pattern=CSV_Pattern,                        full.names=TRUE) TidyData <- QC_FilePrep(x=CSV_Files, DailyQC=DailyQC) #> Error in QC_FilePrep(x = CSV_Files, DailyQC = DailyQC): could not find function \"QC_FilePrep\""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_GainMonitoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes Before After QC .fcs files of QC beads run on assay settings, returns the gains and average measurement in a data.frame to allow for plotting to assess stability over time. — QC_GainMonitoring","title":"Takes Before After QC .fcs files of QC beads run on assay settings, returns the gains and average measurement in a data.frame to allow for plotting to assess stability over time. — QC_GainMonitoring","text":"Takes QC .fcs files QC beads run assay settings, returns gains average measurement data.frame allow plotting assess stability time.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_GainMonitoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes Before After QC .fcs files of QC beads run on assay settings, returns the gains and average measurement in a data.frame to allow for plotting to assess stability over time. — QC_GainMonitoring","text":"","code":"QC_GainMonitoring(   x,   sample.name,   stats,   subsets = NULL,   inverse.transform = FALSE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_GainMonitoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes Before After QC .fcs files of QC beads run on assay settings, returns the gains and average measurement in a data.frame to allow for plotting to assess stability over time. — QC_GainMonitoring","text":"x CytoSet (mapped) individual cytoset, example (x=MyCytoSet[[1]]) sample.name keyword value distinguishes individual .fcs files stats Whether summarize MFIs \"mean\" \"median\" subsets provided GatingSet, selects subset provide Cytoset inverse.transform Default FALSE.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_GainMonitoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes Before After QC .fcs files of QC beads run on assay settings, returns the gains and average measurement in a data.frame to allow for plotting to assess stability over time. — QC_GainMonitoring","text":"data.frame row","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_GainMonitoring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes Before After QC .fcs files of QC beads run on assay settings, returns the gains and average measurement in a data.frame to allow for plotting to assess stability over time. — QC_GainMonitoring","text":"","code":"library(dplyr) library(purrr) library(flowWorkspace)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern, full.names = TRUE, recursive = FALSE) QCBeads <- FCS_Files[grep(\"Before|After\", FCS_Files)] BeforeAfter_CS <- load_cytoset_from_fcs(files=QCBeads, transformation=FALSE, truncate_max_range = FALSE) BeforeAfter <- map(.x=BeforeAfter_CS[1:2], .f=QC_GainMonitoring,  sample.name = \"TUBENAME\", stats=\"median\") %>% bind_rows()"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_LibraryParse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses Library Reference Control .XML files and returns — QC_LibraryParse","title":"Parses Library Reference Control .XML files and returns — QC_LibraryParse","text":"Parses Library Reference Control .XML files returns","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_LibraryParse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses Library Reference Control .XML files and returns — QC_LibraryParse","text":"","code":"QC_LibraryParse(   x,   returntype,   references = TRUE,   myfactor = \"Fluorophore\",   namefactor = \"Sample\" )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_LibraryParse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses Library Reference Control .XML files and returns — QC_LibraryParse","text":"x .XML file returntype return \"data\" \"plots\" references Plot argument, adds red reference signature myfactor Plot argument, data column group plotting. Default \"Fluorophore\". namefactor Plot argument, data column name added Plot Title.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_LibraryParse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses Library Reference Control .XML files and returns — QC_LibraryParse","text":"TBD","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_LibraryParse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parses Library Reference Control .XML files and returns — QC_LibraryParse","text":"","code":"Folder_Location <- system.file(\"extdata\", package = \"Luciernaga\") XML_Pattern <- \".XML$\" XML_Files <- list.files(path = Folder_Location, pattern = XML_Pattern,                         full.names = TRUE, recursive = FALSE) SinglePlot <- QC_LibraryParse(XML_Files[2], returntype=\"plots\", references=FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes the dataframe generated from CytekQCFilePrep and returns all the QC plots — QC_Plots","title":"Takes the dataframe generated from CytekQCFilePrep and returns all the QC plots — QC_Plots","text":"Takes dataframe generated CytekQCFilePrep returns QC plots","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes the dataframe generated from CytekQCFilePrep and returns all the QC plots — QC_Plots","text":"","code":"QC_Plots(   x,   FailedFlag,   MeasurementType = NULL,   Metadata = NULL,   plotType = \"individual\",   returntype,   path,   filename,   thecolumns = 1,   therows = 3,   width = 7,   height = 9,   strict = FALSE,   YAxisLabel = NULL,   RepairVisits = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes the dataframe generated from CytekQCFilePrep and returns all the QC plots — QC_Plots","text":"x data frame object Aurora QC data generated CytekQCFilePrep FailedFlag Whether show red flags detectors \"--Range\" TRUE MeasurementType list containing character values, select present column names plotting Metadata optional character column use ggplot factor. plotType Whether return \"individual\" plots \"comparison\" plots (provide Metadata name!) returntype Whether return pdf, patchwork plots. path Location path return pdf filename File name save . thecolumns number columns per page therows number rows per page width Desired page width height Desired page height strict Default FALSE, TRUE, parameters must exact match MeasurementType rather simply containing character strings. YAxisLabel Character string y-axis label. RepairVisits Passed data.frame engineer visits vertical lines, default NULL.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes the dataframe generated from CytekQCFilePrep and returns all the QC plots — QC_Plots","text":"pdf /plots.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes the dataframe generated from CytekQCFilePrep and returns all the QC plots — QC_Plots","text":"","code":"library(ggplot2)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") CSV_Pattern <- \".CSV$\" CSV_Files <- list.files(path=File_Location, pattern=CSV_Pattern,                        full.names=TRUE) TidyData <- QC_FilePrep(CSV_Files, TrackChange = FALSE) #> Error in QC_FilePrep(CSV_Files, TrackChange = FALSE): could not find function \"QC_FilePrep\"  StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  SinglePlot <- \"UV7-Gain\"  TheSinglePlot <- QC_Plots(x = TidyData, MeasurementType = SinglePlot,                          FailedFlag = TRUE, returntype=\"patchwork\",                          path=StorageLocation, filename=\"CytekAurora5L_QC\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'colnames': object 'TidyData' not found"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ProspectiveAdditions.html","id":null,"dir":"Reference","previous_headings":"","what":"From existing panel, figures out open detectors, and returns potential fluorophores that might fit between the existing ones — QC_ProspectiveAdditions","title":"From existing panel, figures out open detectors, and returns potential fluorophores that might fit between the existing ones — QC_ProspectiveAdditions","text":"existing panel, figures open detectors, returns potential  fluorophores might fit existing ones","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ProspectiveAdditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From existing panel, figures out open detectors, and returns potential fluorophores that might fit between the existing ones — QC_ProspectiveAdditions","text":"","code":"QC_ProspectiveAdditions(   path,   NumberDetectors,   TheCutoff = 0.9,   returnAll = FALSE,   filename,   outpath,   returnCSV )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ProspectiveAdditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From existing panel, figures out open detectors, and returns potential fluorophores that might fit between the existing ones — QC_ProspectiveAdditions","text":"path Filepath panel .csv NumberDetectors Number detectors instrument pull references TheCutoff Default 0.9, cosine matrix value returnAll Whether return variants, default FALSE filename Desired name output .csv outpath Path Location store output .csv returnCSV Whether return csv designated outpath filename, TRUE/FALSE","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ProspectiveAdditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From existing panel, figures out open detectors, and returns potential fluorophores that might fit between the existing ones — QC_ProspectiveAdditions","text":"csv containing selected fluorophores","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ProspectiveAdditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"From existing panel, figures out open detectors, and returns potential fluorophores that might fit between the existing ones — QC_ProspectiveAdditions","text":"","code":"Folder_Location <- system.file(\"extdata\", package = \"Luciernaga\") ThePanelLocation <- list.files(Folder_Location, pattern=\"^Panel.csv\",  full.names=TRUE) OutPath <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  ProspectiveAdditions <- QC_ProspectiveAdditions(path=ThePanelLocation, NumberDetectors=64, TheCutoff=0.9, returnAll=FALSE, returnCSV=FALSE, filename=\"ProspectiveAdditions\", outpath=OutPath)"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ReferenceLibrary.html","id":null,"dir":"Reference","previous_headings":"","what":"Queries the available reference library for available fluorophores (and their naming conventions) — QC_ReferenceLibrary","title":"Queries the available reference library for available fluorophores (and their naming conventions) — QC_ReferenceLibrary","text":"Queries available reference library available fluorophores (naming conventions)","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ReferenceLibrary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Queries the available reference library for available fluorophores (and their naming conventions) — QC_ReferenceLibrary","text":"","code":"QC_ReferenceLibrary(   FluorNameContains,   NumberDetectors,   returnPlots = FALSE,   plotlinecolor = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ReferenceLibrary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Queries the available reference library for available fluorophores (and their naming conventions) — QC_ReferenceLibrary","text":"FluorNameContains character string pattern match, example \"APC\" NumberDetectors number detectors instrument contains. Cytek Instruments 5L = 64, 4L_UV = 54, 4L_YG = 48, 3L=38, 2L_VB=30, 2L_BR=22, 1L=14 BD S8=78, S6=\"48_S\", A5=\"48_A\" Sony ID7000 7L=184, 6L_DUV=\"182_DUV\", 5L=147, 4L=112, 3L=86 ThermoFisher BigFoot 7L_488-561=55, 7L_532-594=\"52_7L\", 6L_445=\"52_6L\", 6L_785=51 returnPlots Whether return signature plot well. Default FALSE. plotlinecolor Default NULL, otherwise single line provide desired color","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ReferenceLibrary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Queries the available reference library for available fluorophores (and their naming conventions) — QC_ReferenceLibrary","text":"dataframe column containing matching Fluorophores querry","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ReferenceLibrary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Queries the available reference library for available fluorophores (and their naming conventions) — QC_ReferenceLibrary","text":"","code":"QC_ReferenceLibrary(FluorNameContains = \"FITC\", NumberDetectors=64) #>       Fluorophore #> 1            FITC #> 2       FITC Plus #> 3 Vio Bright FITC"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Retrieval.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns Detector Gains, Laser Delay and Scalings from individual .fcs files in a CytoSet. — QC_Retrieval","title":"Returns Detector Gains, Laser Delay and Scalings from individual .fcs files in a CytoSet. — QC_Retrieval","text":"Returns Detector Gains, Laser Delay Scalings individual .fcs files CytoSet.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Retrieval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns Detector Gains, Laser Delay and Scalings from individual .fcs files in a CytoSet. — QC_Retrieval","text":"","code":"QC_Retrieval(x, sample.name)"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Retrieval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns Detector Gains, Laser Delay and Scalings from individual .fcs files in a CytoSet. — QC_Retrieval","text":"x CytoSet (mapped) individual cytoset, example (x=MyCytoSet[[1]]) sample.name keyword value distinguishes individual .fcs files","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Retrieval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns Detector Gains, Laser Delay and Scalings from individual .fcs files in a CytoSet. — QC_Retrieval","text":"dataframe row","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_Retrieval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns Detector Gains, Laser Delay and Scalings from individual .fcs files in a CytoSet. — QC_Retrieval","text":"","code":"library(flowWorkspace)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Pattern <- \".fcs$\" FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern, full.names = TRUE, recursive = FALSE) QCBeads <- FCS_Files[grep(\"Before\", FCS_Files)] MyCytoSet <- load_cytoset_from_fcs(QCBeads[1], truncate_max_range = FALSE, transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet)  SingleSpecimen <- QC_Retrieval(x=MyGatingSet[[1]], sample.name=\"TUBENAME\")"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_SimilarFluorophores.html","id":null,"dir":"Reference","previous_headings":"","what":"Queries fluorophore and returns similar fluorophores. — QC_SimilarFluorophores","title":"Queries fluorophore and returns similar fluorophores. — QC_SimilarFluorophores","text":"Queries fluorophore returns similar fluorophores.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_SimilarFluorophores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Queries fluorophore and returns similar fluorophores. — QC_SimilarFluorophores","text":"","code":"QC_SimilarFluorophores(   TheFluorophore,   NumberDetectors,   returnSynonyms = FALSE,   NumberHits = 10,   returnPlots = FALSE,   plotlinecolor = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_SimilarFluorophores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Queries fluorophore and returns similar fluorophores. — QC_SimilarFluorophores","text":"TheFluorophore name Fluorophore compare, see QC_ReferenceLibrary NumberDetectors Number detectors instrument returnSynonyms Something NumberHits Number similar fluorophores cosine returnPlots Whether also return signature plots, default set FALSE plotlinecolor Default NULL, otherwise single line provide desired color returnSynonymns Returns fluorophores > 0.98 cosine value, default FALSE","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_SimilarFluorophores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Queries fluorophore and returns similar fluorophores. — QC_SimilarFluorophores","text":"dataframe similar fluorophores","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_SimilarFluorophores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Queries fluorophore and returns similar fluorophores. — QC_SimilarFluorophores","text":"","code":"Results <- QC_SimilarFluorophores(TheFluorophore=\"Spark Blue 550\",  NumberDetectors=64, returnSynonymns=FALSE, NumberHits = 10, returnPlots=FALSE) #> Error in QC_SimilarFluorophores(TheFluorophore = \"Spark Blue 550\", NumberDetectors = 64,     returnSynonymns = FALSE, NumberHits = 10, returnPlots = FALSE): unused argument (returnSynonymns = FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_UserLibraries.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes data.frame of QC_LibraryParse, and iterating over individual users returns plots — QC_UserLibraries","title":"Takes data.frame of QC_LibraryParse, and iterating over individual users returns plots — QC_UserLibraries","text":"Takes data.frame QC_LibraryParse, iterating individual users returns plots","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_UserLibraries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes data.frame of QC_LibraryParse, and iterating over individual users returns plots — QC_UserLibraries","text":"","code":"QC_UserLibraries(   x,   Data,   NameAppend,   outpath,   references = TRUE,   thecolumns = 3,   therows = 4,   width = 7,   height = 9,   saveCSV = TRUE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_UserLibraries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes data.frame of QC_LibraryParse, and iterating over individual users returns plots — QC_UserLibraries","text":"x Mapped individual name present within Creator Column Data data.frame object working NameAppend Name add end file outpath Desired storage location references Whether include red reference signatures thecolumns Passed Patchwork, desired number columns therows Passed Patchwork, desired number rows width Passed Patchwork, page width height Passed Patchwork, page height saveCSV Whether return .csv underlying data, default TRUE","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_UserLibraries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes data.frame of QC_LibraryParse, and iterating over individual users returns plots — QC_UserLibraries","text":"pdf plots maybe csv","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_UserLibraries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes data.frame of QC_LibraryParse, and iterating over individual users returns plots — QC_UserLibraries","text":"","code":"library(purrr) library(dplyr)  StorageLocation <- file.path(tempdir(), \"LuciernagaTemporaryExamples\") if (!dir.exists(StorageLocation)) {dir.create(StorageLocation)}  Folder_Location <- system.file(\"extdata\", package = \"Luciernaga\") XML_Pattern <- \".XML$\" XML_Files <- list.files(path = Folder_Location, pattern = XML_Pattern,                         full.names = TRUE, recursive = FALSE) Data <- map(.x=XML_Files[1:4], .f=QC_LibraryParse,   returntype=\"dataframe\", references=FALSE) %>% bind_rows()  TheIndividuals <- Data %>% pull(Creator) %>% unique()  JohnDoesLibrary <- walk(.x=TheIndividuals[1], .f=QC_UserLibraries, Data=Data,   NameAppend=\"_LibraryQC\", outpath=StorageLocation, references = TRUE,    thecolumns = 3, therows=4, width=7, height=9, saveCSV=FALSE) #> Error in map(.x, .f, ..., .progress = .progress): ℹ In index: 1. #> Caused by error in `arrange()`: #> ℹ In argument: `..1 = Fluorochrome`. #> Caused by error: #> ! object 'Fluorochrome' not found  ThePDF <- list.files(StorageLocation, pattern=\"_LibraryQC.pdf\")"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ViewSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes the Signature for given row in an averaged signature data.frame. — QC_ViewSignature","title":"Visualizes the Signature for given row in an averaged signature data.frame. — QC_ViewSignature","text":"Visualizes Signature given row averaged signature  data.frame.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ViewSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes the Signature for given row in an averaged signature data.frame. — QC_ViewSignature","text":"","code":"QC_ViewSignature(   x,   columnname = \"Sample\",   data,   Normalize = TRUE,   TheFormat = \"wider\",   detectorcolumn = NULL,   valuecolumn = NULL,   legend = TRUE,   plotname = NULL,   plotlinecolor = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ViewSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes the Signature for given row in an averaged signature data.frame. — QC_ViewSignature","text":"x Name Sample column want filter columnname Default Sample, specifies column name x filtered data data.frame object QC_LibraryParse containing  Fluorophore name column numeric detector columns. Normalize Whether normalize data based peak detector value, default TRUE TheFormat Default wider detectors columns, specify longer providing detectors rows detectorcolumn Default NULL, TheFormat=\"longer\" specify detector column name valuecolumn Default NULL, TheFormat=\"longer\" specify value column name legend Default TRUE, alternately removes plot legend plotname Default NULL, alternately specifies plot title plotlinecolor Default NULL, alternatively provide color single line","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ViewSignature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualizes the Signature for given row in an averaged signature data.frame. — QC_ViewSignature","text":"dataframe similar fluorophores","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_ViewSignature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualizes the Signature for given row in an averaged signature data.frame. — QC_ViewSignature","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyCytoSet <- load_cytoset_from_fcs(UnstainedCells[1],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  PopulationInterest <- gs_pop_get_data(MyGatingSet[1], subset=\"lymphocytes\") TheDataValues <- exprs(PopulationInterest[[1]]) TheDataValues <- data.frame(TheDataValues, check.names=FALSE) Signature <- AveragedSignature(TheDataValues, stats=\"median\") TheData <- Signature[,-grep(\"Time|FS|SC|SS|Original|W$|H$\", names(Signature))] TheData <- TheData |> mutate(Sample=\"TestSignature\") |>  relocate(Sample, .before=1)  Plot <- QC_ViewSignature(x=\"TestSignature\", data=TheData, Normalize=TRUE) #> Normalizing Data for Signature Comparison"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_WhatsThis.html","id":null,"dir":"Reference","previous_headings":"","what":"Querries reference signatures and returns most similar fluorophores by cosine similarity. — QC_WhatsThis","title":"Querries reference signatures and returns most similar fluorophores by cosine similarity. — QC_WhatsThis","text":"Querries reference signatures returns similar fluorophores cosine similarity.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_WhatsThis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Querries reference signatures and returns most similar fluorophores by cosine similarity. — QC_WhatsThis","text":"","code":"QC_WhatsThis(   x,   columnname = \"Sample\",   data,   NumberHits,   NumberDetectors = NULL,   Normalize = TRUE,   returnPlots = FALSE,   TheFormat = \"wider\",   detectorcolumn = NULL,   valuecolumn = NULL,   plotlinecolor = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_WhatsThis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Querries reference signatures and returns most similar fluorophores by cosine similarity. — QC_WhatsThis","text":"x Name Sample column want filter columnname Designating column filter x argument data data.frame object QC_LibraryParse containing Fluorophore name column numeric detector columns. NumberHits Number similar fluorophores cosine. NumberDetectors Default NULL, estimated number numeric columns passed data. Normalize Default TRUE, needed ReferenceLibrary comparison. returnPlots Whether return signature plots, default set FALSE. TheFormat Default wider detectors columns, specify longer providing detectors rows detectorcolumn Default NULL, TheFormat=\"longer\" specify detector column name valuecolumn Default NULL, TheFormat=\"longer\" specify value column name plotlinecolor Default NULL, otherwise single line provide desired color","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_WhatsThis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Querries reference signatures and returns most similar fluorophores by cosine similarity. — QC_WhatsThis","text":"dataframe similar fluorophores ggplot2 object","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/QC_WhatsThis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Querries reference signatures and returns most similar fluorophores by cosine similarity. — QC_WhatsThis","text":"","code":"library(dplyr) Folder_Location <- system.file(\"extdata\", package = \"Luciernaga\") XML_Pattern <- \".XML$\" XML_Files <- list.files(path = Folder_Location, pattern = XML_Pattern,                         full.names = TRUE, recursive = FALSE) Data <- QC_LibraryParse(XML_Files[2], returntype=\"data\", references=FALSE) TheFluorophore <- Data |> pull(Sample)  Results <- QC_WhatsThis(x=TheFluorophore, columnname=\"Sample\", data=Data, NumberHits = 10, returnPlots=FALSE) #> Combining character columns #> Normalizing Data for Signature Comparison"},{"path":"https://davidrach.github.io/Luciernaga/reference/RCVfromFCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the RCV value for each marker for a specified GatingSet subset — RCVfromFCS","title":"Calculate the RCV value for each marker for a specified GatingSet subset — RCVfromFCS","text":"Calculate RCV value marker specified GatingSet subset","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/RCVfromFCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the RCV value for each marker for a specified GatingSet subset — RCVfromFCS","text":"","code":"RCVfromFCS(x, subset, sample.name, experiment.name, condition.name)"},{"path":"https://davidrach.github.io/Luciernaga/reference/RCVfromFCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the RCV value for each marker for a specified GatingSet subset — RCVfromFCS","text":"x Gating Set object iterated subset Gating Set subset population interest sample.name keyword corresponding samples name experiment.name Something condition.name Something","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/RCVfromFCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the RCV value for each marker for a specified GatingSet subset — RCVfromFCS","text":"data.frame row marker RCVs proportion.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/RetrievalMerge.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal for QC_Retrieval — RetrievalMerge","title":"Internal for QC_Retrieval — RetrievalMerge","text":"Internal QC_Retrieval","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/RetrievalMerge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal for QC_Retrieval — RetrievalMerge","text":"","code":"RetrievalMerge(x, y, TheData)"},{"path":"https://davidrach.github.io/Luciernaga/reference/RetrievalMerge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal for QC_Retrieval — RetrievalMerge","text":"x Passed argument 1 y Passed argument 2 TheData datset","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/RetrievalMerge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal for QC_Retrieval — RetrievalMerge","text":"internal value","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Subplots.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal for Luciernaga_Lists — Subplots","title":"Internal for Luciernaga_Lists — Subplots","text":"Internal Luciernaga_Lists","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Subplots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal for Luciernaga_Lists — Subplots","text":"","code":"Subplots(i, data)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Subplots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal for Luciernaga_Lists — Subplots","text":"Passed Indicies data Transposed List Lists","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Subplots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal for Luciernaga_Lists — Subplots","text":"internal value","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/TransformationCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the transformation settings to visualize .fcs files — TransformationCheck","title":"Check the transformation settings to visualize .fcs files — TransformationCheck","text":"Check transformation settings visualize .fcs files","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/TransformationCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the transformation settings to visualize .fcs files — TransformationCheck","text":"","code":"TransformationCheck(   x,   thesecolumns = NULL,   TransformationChoice = \"flowjo_biexp\",   channelRange = 256,   maxValue = 1e+06,   pos = 4.5,   neg = 1,   widthBasis = -500,   Multiple = FALSE,   returnType = \"NxN\",   optionalY = \"BUV805-A\",   optionalX = \"BUV496-A\",   optionalOutpath = NULL,   optionalBins = 100,   optionalName = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/TransformationCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the transformation settings to visualize .fcs files — TransformationCheck","text":"x Iterated GatingSet object thesecolumns Choice channels transform TransformationChoice Default flowjo_biexp_trans channelRange Argument maxValue Argument pos Argument neg Argument widthBasis Argument Multiple Argument returnType Argument optionalY Something optionalX Something optionalOutpath Something optionalBins Something optionalName Something","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/TransformationCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the transformation settings to visualize .fcs files — TransformationCheck","text":"visualization check transformation setting","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/TransformationCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the transformation settings to visualize .fcs files — TransformationCheck","text":"","code":"path <- system.file(\"extdata\", package = \"Luciernaga\") files <- list.files(path, pattern=\".fcs\", full.names=TRUE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/UnstainedSignatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal to LuciernagaQC — UnstainedSignatures","title":"Internal to LuciernagaQC — UnstainedSignatures","text":"Internal LuciernagaQC","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/UnstainedSignatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal to LuciernagaQC — UnstainedSignatures","text":"","code":"UnstainedSignatures(   x,   WorkAround1,   alternatename,   ColsN,   StartNormalizedMergedCol,   EndNormalizedMergedCol,   Increments,   Verbose = FALSE,   LocalMaximaRatio = 0.15,   SecondaryPeaks )"},{"path":"https://davidrach.github.io/Luciernaga/reference/UnstainedSignatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal to LuciernagaQC — UnstainedSignatures","text":"x passed detector used filtering WorkAround1 passed data.frame ColsN Indicated end Raw Value Columns StartNormalizedMergedCol Indicated Start Normalized Columns EndNormalizedMergedCol Indicated End Normalized Columns Increments numeric round normalized bins . Default 0.1 Verbose Whether return intermediate objects via print plot progress monitoring LocalMaximaRatio Height peaks proceed SecondaryPeaks Number Secondary Peaks, default set 2.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/UnstainedSignatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal to LuciernagaQC — UnstainedSignatures","text":"internal value","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ColAppend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Dimensionality Visualized parameters to raw .fcs files — Utility_ColAppend","title":"Add Dimensionality Visualized parameters to raw .fcs files — Utility_ColAppend","text":"Add Dimensionality Visualized parameters raw .fcs files","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ColAppend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Dimensionality Visualized parameters to raw .fcs files — Utility_ColAppend","text":"","code":"Utility_ColAppend(ff, DF, columnframe, shift = FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ColAppend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Dimensionality Visualized parameters to raw .fcs files — Utility_ColAppend","text":"ff realized_view object flowWorkspace DF maybe downsampled exprs columnframe dimensionality visualized data.frame object added shift Whether shift values non-zero, default set FALSE,","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ColAppend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Dimensionality Visualized parameters to raw .fcs files — Utility_ColAppend","text":"new flow_frame object.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ColAppend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Dimensionality Visualized parameters to raw .fcs files — Utility_ColAppend","text":"","code":"library(BiocGenerics) #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:dplyr': #>  #>     combine, intersect, setdiff, union #> The following object is masked from 'package:flowCore': #>  #>     normalize #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min library(flowCore) library(flowWorkspace) library(openCyto) library(data.table) library(dplyr)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  ff <- gs_pop_get_data(UnmixedGatingSet[1], subsets=\"live\", inverse.transform = FALSE) BeforeParameters <- ff[[1, returnType = \"flowFrame\"]] MainDataFrame <- as.data.frame(exprs(ff[[1]]), check.names = FALSE) NewData <- MainDataFrame %>% mutate(ExposureStatus = sample(1:3, n(), replace = TRUE)) NewData <- NewData %>% select(ExposureStatus) AfterParameters <- Utility_ColAppend(ff=ff, DF=MainDataFrame, columnframe = NewData)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Concatinate.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate a gs based on subset and optional subsample — Utility_Concatinate","title":"Concatenate a gs based on subset and optional subsample — Utility_Concatinate","text":"Concatenate gs based subset optional subsample","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Concatinate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate a gs based on subset and optional subsample — Utility_Concatinate","text":"","code":"Utility_Concatinate(   gs,   sample.name,   removestrings,   subsets,   subsample = NULL,   ReturnType,   newName,   outpath = NULL,   export = FALSE,   inverse.transform,   metadataCols = NULL,   Override = FALSE,   DataOverride = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Concatinate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate a gs based on subset and optional subsample — Utility_Concatinate","text":"gs gating set object sample.name Keyword specifying sample name removestrings Value removed sample name subsets gating hierarchy subset want include subsample Default set NULL. -sample desired, Total number events subsample specimen ReturnType Whether return \"data.frame\", \"flow.frame\", export \"fcs\" file outpath location newName File Name Concatenate File outpath Location store concatenated file export Whether export .fcs file. inverse.transform Whether reverse GatingSet Transform data, default set FALSE. metadataCols column names pData append metadata .fcs, default NULL Override Testing purposes default FALSE DataOverride Testing Purpose default NULL","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Concatinate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate a gs based on subset and optional subsample — Utility_Concatinate","text":"concatenated data.frame, flow.frame fcs file, reference .csv specimen information","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Concatinate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate a gs based on subset and optional subsample — Utility_Concatinate","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1:2] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1:2],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  ConcatinatedReturn <- Utility_Concatinate(gs=UnmixedGatingSet,   sample.name = \"GROUPNAME\", removestrings=removestrings,   subsets=\"live\", subsample = 2000, ReturnType = \"flow.frame\",   newName = \"MyConcatinatedFile\", outpath = StorageLocation,    export = FALSE, inverse.transform=TRUE) #> INF071 has been processed #> INF149 has been processed"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_DensityOverlay.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates an overlay plot containing all objects in the GatingSet — Utility_DensityOverlay","title":"Generates an overlay plot containing all objects in the GatingSet — Utility_DensityOverlay","text":"Generates overlay plot containing objects GatingSet","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_DensityOverlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates an overlay plot containing all objects in the GatingSet — Utility_DensityOverlay","text":"","code":"Utility_DensityOverlay(   gs,   subset,   inverse.transform = FALSE,   TheX = NULL,   TheFill,   returntype,   outpath,   filename,   therows = 3,   thecolumns = 3,   width = 7,   height = 9 )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_DensityOverlay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates an overlay plot containing all objects in the GatingSet — Utility_DensityOverlay","text":"gs GatingSet object subset desired Gating Hierarchy node (ex. \"lymphocytes\") inverse.transform Default FALSE, reverses transformation applied GatingSet converted CytoSet TheX desired marker plot, leave NULL markers TheFill desired marker color individual specimens (named pData) returntype Whether return \"pdf\", \"patchwork\" \"plots\" outpath Desired storage location filename file name new .pdf therows desired number rows per page thecolumns desired number columns per page width desired page width height desired page height","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_DensityOverlay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates an overlay plot containing all objects in the GatingSet — Utility_DensityOverlay","text":"pdf file ggplot object","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_DensityOverlay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates an overlay plot containing all objects in the GatingSet — Utility_DensityOverlay","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1:2] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1:2],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  Condition <- data.frame(Condition=c(\"Ctrl\", \"Ctrl\")) pd <- pData(UnmixedGatingSet) new_pd <- cbind(pd, Condition) pData(UnmixedGatingSet) <- new_pd  Plot <- Utility_DensityOverlay(gs=UnmixedGatingSet, subset=\"lymphocytes\",   TheX=\"APC-Fire 810-A\",TheFill=\"Condition\", returntype=\"plots\",   outpath=\"C:/Users/JohnDoe/Desktop/\", filename=\"CD38_Expression\")"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Downsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsample a gs based on subset — Utility_Downsample","title":"Downsample a gs based on subset — Utility_Downsample","text":"Downsample gs based subset","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Downsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsample a gs based on subset — Utility_Downsample","text":"","code":"Utility_Downsample(   x,   sample.name,   removestrings,   subsets,   subsample = NULL,   inverse.transform,   internal = FALSE,   export = FALSE,   outpath = NULL,   metadataCols = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Downsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsample a gs based on subset — Utility_Downsample","text":"x gating set object sample.name Keyword specifying sample name removestrings Value removed sample name subsets gating hierarchy subset want include subsample Total number events sub-sample specimen. value 0 1, grabs equivalent proportion total cells. inverse.transform Whether reverse GatingSet Transform data, default set FALSE. internal Whether return data.frame (vs. flow frame .fcs file) export Default set FALSE, TRUE (internal = FALSE) returns .fcs file outpath. outpath export true, file.path want .fcs file stored. metadataCols column names pData append metadata .fcs, default NULL","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Downsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsample a gs based on subset — Utility_Downsample","text":"Either data.frame, flow.frame .fcs file depending selected options","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Downsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsample a gs based on subset — Utility_Downsample","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1:2] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1:2],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <- c(\"DTR_2023_ILT_15_Tetramers-\",\"-Ctrl_Tetramer_Unmixed\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  CountData <- gs_pop_get_count_fast(UnmixedGatingSet) Counts_Specimen <- CountData %>%  filter(Population %in% \"/singletsFSC/singletsSSC/singletsSSCB/nonDebris/lymphocytes/live\") %>%  select(name, Count)  SingleSample <- Utility_Downsample(UnmixedGatingSet[1],  sample.name = \"GROUPNAME\", removestrings=removestrings,  subsets = \"live\", subsample = 2500, internal = FALSE,  export = FALSE, inverse.transform=TRUE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_GatingPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Check gate placement for individual .fcs files in a GatingSet — Utility_GatingPlots","title":"Check gate placement for individual .fcs files in a GatingSet — Utility_GatingPlots","text":"Check gate placement individual .fcs files GatingSet","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_GatingPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check gate placement for individual .fcs files in a GatingSet — Utility_GatingPlots","text":"","code":"Utility_GatingPlots(   x,   sample.name,   removestrings,   subset = \"root\",   gtFile = NULL,   DesiredGates = NULL,   outpath = NULL,   filename = NULL,   returnType,   bins = 270,   therows = 2,   thecolumns = 2,   width = 7,   height = 9,   clearance = 0.2,   optionalX = NULL,   optionalY = NULL,   optionalGate = NULL,   ... )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_GatingPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check gate placement for individual .fcs files in a GatingSet — Utility_GatingPlots","text":"x GatingSet object sample.name .fcs keyword contains unique name sample removestrings string character values remove sample.name subset GatingSet subset want visualize data plotting, \"root\" default. gtFile data.table imported .csv file containing gating template. DesiredGates vector gates want plotted, example Desired <- c(\"nonDebris, \"lymphocytes\") outpath Location store generated .pdf file filename Default NULL, overrides name returnType Whether return \"pdf\", \"patchwork\" \"plots\". bins Argument geom_hex number bins visualize plotted data density. therows Number desired rows .pdf file thecolumns Number desired columns .pdf file width Desired page width height Desired page height clearance buffer area around plot edge optionalX gtFile NULL, provides x-axis argument subset gated population optionalY gtFile NULL, provides y-axis argument subset gated population optionalGate Default NULL, using optional arguments correct X Y, gate arg ... Additional Arguments NameForSample derive filename.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_GatingPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check gate placement for individual .fcs files in a GatingSet — Utility_GatingPlots","text":"Additional information added","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_GatingPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check gate placement for individual .fcs files in a GatingSet — Utility_GatingPlots","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyCytoSet <- load_cytoset_from_fcs(UnstainedCells[1],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  IndividualPlot <- Utility_GatingPlots(x=MyGatingSet[[1]],   sample.name = \"GUID\",removestrings = removestrings,   gtFile = MyGates, DesiredGates = NULL,   outpath = StorageLocation, filename=NULL,    returnType = \"patchwork\") #> Error in Luciernaga:::NameForSample(x = x, sample.name = sample.name,     removestrings = removestrings, ...): unused argument (filename = NULL)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_IterativeGating.html","id":null,"dir":"Reference","previous_headings":"","what":"Return individual plots for specified node for specimens within a GatingSet. — Utility_IterativeGating","title":"Return individual plots for specified node for specimens within a GatingSet. — Utility_IterativeGating","text":"Return individual plots specified node specimens within GatingSet.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_IterativeGating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return individual plots for specified node for specimens within a GatingSet. — Utility_IterativeGating","text":"","code":"Utility_IterativeGating(   x,   subset,   gate,   xValue,   yValue,   sample.name,   removestrings,   bins = 270 )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_IterativeGating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return individual plots for specified node for specimens within a GatingSet. — Utility_IterativeGating","text":"x Gating Set Object subset Desired node cells plot gate Desired gate show plot subset, else NULL xValue Desired x axis yValue Desired y axis sample.name Keyword sample name stored removestrings Character values remove name bins Geo_hex bins dots","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_IterativeGating.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return individual plots for specified node for specimens within a GatingSet. — Utility_IterativeGating","text":"list ggplot objects","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_IterativeGating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return individual plots for specified node for specimens within a GatingSet. — Utility_IterativeGating","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyCytoSet <- load_cytoset_from_fcs(UnstainedCells[1],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  SingleSpecimen <- Utility_IterativeGating(x=MyGatingSet[1],  sample.name = \"GUID\", removestrings = removestrings,  subset = \"nonDebris\", gate = \"lymphocytes\", xValue = \"FSC-A\",   yValue = \"SSC-A\", bins = 270)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_NbyNPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate NxN plots for one or all fluorophores. — Utility_NbyNPlots","title":"Generate NxN plots for one or all fluorophores. — Utility_NbyNPlots","text":"Generate NxN plots one fluorophores.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_NbyNPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate NxN plots for one or all fluorophores. — Utility_NbyNPlots","text":"","code":"Utility_NbyNPlots(   x,   sample.name,   removestrings,   experiment = NULL,   experiment.name = NULL,   condition = NULL,   condition.name = NULL,   marginsubset,   gatesubset,   ycolumn,   bins,   clearance,   gatelines,   reference = NULL,   outpath,   returntype,   width = 9,   height = 7,   filename = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_NbyNPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate NxN plots for one or all fluorophores. — Utility_NbyNPlots","text":"x GatingSet object (ex. gs gs[[1]]) sample.name Keyword samples names stored (ex. \"GUID\") removestrings string characters remove name ( ex. c(\"DR_ILT_2023_\", \"Cord\")) experiment Provide directly experiment name (ex. \"Jan2024\") experiment.name Keyword experiment name stored ( ex. \"GROUPNAME\") condition Provide condition name condition.name keyword .fcs file storing condition.name marginsubset Gating Hierarchy level values used estimate plot margins (ex. \"nonDebris\") gatesubset Gating Hierarchy level cells want see plotted (ex. \"lymph\") ycolumn ycolumn want see everything plotted (ex. \"APC-\") see comparisons bins Bins plotted cells divided providing granularity clearance additional ratio added margins avoid clipping main population exclude outliers. gatelines Whether add estimated gate cutoff lines reference Reference gate cutoff lines outpath Location store generated .pdf returntype Whether return \"pdf\", \"patchwork\" \"plots\" width Desired page width pdf, default 9 inches. height Desired page height pdf, default 7 inches filename Default NULL, provide name set filename.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_NbyNPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate NxN plots for one or all fluorophores. — Utility_NbyNPlots","text":"value determined later","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_NbyNPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate NxN plots for one or all fluorophores. — Utility_NbyNPlots","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  IndividualNxN <- Utility_NbyNPlots(x=UnmixedGatingSet[[1]],   sample.name = \"GROUPNAME\", removestrings = removestrings,   marginsubset = \"lymphocytes\", gatesubset = \"live\",   ycolumn = \"Spark Blue 550-A\", bins = 70, clearance = 0.2,   gatelines = FALSE, reference = NULL, outpath = StorageLocation,   returntype=\"patchwork\") #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ParallelNbyNPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlay plot two .fcs files from two different gs. — Utility_ParallelNbyNPlots","title":"Overlay plot two .fcs files from two different gs. — Utility_ParallelNbyNPlots","text":"Overlay plot two .fcs files two different gs.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ParallelNbyNPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlay plot two .fcs files from two different gs. — Utility_ParallelNbyNPlots","text":"","code":"Utility_ParallelNbyNPlots(   x,   y,   sample.name,   removestrings,   Override = FALSE,   marginsubset,   gatesubset,   ycolumn,   bins,   clearance,   colorX,   colorY,   gatelines,   reference = NULL,   outpath,   pdf )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ParallelNbyNPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlay plot two .fcs files from two different gs. — Utility_ParallelNbyNPlots","text":"x first gs object y second gs object sample.name keyword sample names stored removestrings list values remove sample names Override Exclude raw columns -$ marginsubset gs subset defines plot margin gatesubset gs subset interest ycolumn desired y-column comparisons bins Desired number hex bins clearance multiplication factor margin wiggle room (0.2) colorX Color x gs colorY Color y gs gatelines Whether plot .csv specified gate lines reference Reference .csv specified gate lines outpath Location store output pdf Whether return pdf","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ParallelNbyNPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overlay plot two .fcs files from two different gs. — Utility_ParallelNbyNPlots","text":"Either list ggplot objects pdf object","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ParallelNbyNPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlay plot two .fcs files from two different gs. — Utility_ParallelNbyNPlots","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1:2] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1:2],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  Plot <- Utility_ParallelNbyNPlots(x=UnmixedGatingSet[1], y = UnmixedGatingSet[2],  sample.name = \"GROUPNAME\", removestrings = \".fcs\", Override = FALSE,  marginsubset = \"lymphocytes\", gatesubset = \"live\", ycolumn = \"Spark Blue 550-A\",   bins = 120, clearance = 0.2, colorX = \"lightblue\", colorY = \"orange\", gatelines = FALSE,   reference = NULL, outpath = StorageLocation,pdf = FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Patchwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the plots into a single pdf — Utility_Patchwork","title":"Generate the plots into a single pdf — Utility_Patchwork","text":"Generate plots single pdf","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Patchwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the plots into a single pdf — Utility_Patchwork","text":"","code":"Utility_Patchwork(   x,   filename,   outfolder,   thecolumns = 2,   therows = 3,   width = 7,   height = 9,   returntype = \"pdf\",   NotListofList = TRUE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Patchwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the plots into a single pdf — Utility_Patchwork","text":"x list plots filename Name save .pdf outfolder Location save .pdf thecolumns number columns per page therows number rows per page width Desired page width height Desired page height returntype Whether return \"pdf\" (desired location) \"patchwork\" (R) NotListofList Internal default True, touch.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Patchwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the plots into a single pdf — Utility_Patchwork","text":"additional value edit","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_Patchwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the plots into a single pdf — Utility_Patchwork","text":"","code":"library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) UnstainedFCSFiles <- FCS_Files[grep(\"Unstained\", FCS_Files)] UnstainedCells <- UnstainedFCSFiles[-grep(\"Beads\", UnstainedFCSFiles)] MyCytoSet <- load_cytoset_from_fcs(UnstainedCells[1:3],   truncate_max_range = FALSE,transformation = FALSE) MyGatingSet <- GatingSet(MyCytoSet) MyGates <- fread(file.path(path = File_Location, pattern = 'Gates.csv')) MyGatingTemplate <- gatingTemplate(MyGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes gt_gating(MyGatingTemplate, MyGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> finished. removestrings <-  c(\"DR_\", \"Cells\", \".fcs\", \"-\", \" \") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  AllSpecimens <- Utility_IterativeGating(x=MyGatingSet[1:3],  sample.name = \"GUID\", removestrings = removestrings,  subset = \"nonDebris\", gate = \"lymphocytes\", xValue = \"FSC-A\",   yValue = \"SSC-A\", bins = 270)  Patchwork <- Utility_Patchwork(AllSpecimens, \"LymphocyteGates\",  outfolder=StorageLocation, thecolumns=2, therows=2,   width = 7, height = 9, returntype=\"patchwork\")"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_RidgePlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Ridge Plots for comparison — Utility_RidgePlots","title":"Draw Ridge Plots for comparison — Utility_RidgePlots","text":"Draw Ridge Plots comparison","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_RidgePlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Ridge Plots for comparison — Utility_RidgePlots","text":"","code":"Utility_RidgePlots(   gs,   subset,   TheX = NULL,   TheY,   TheFill,   inverse.transform = FALSE,   outpath,   returntype,   therows = 2,   thecolumns = 1,   width = 7,   height = 9,   filename )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_RidgePlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Ridge Plots for comparison — Utility_RidgePlots","text":"gs Gating Set Object subset desired gate node, ie \"lymphocytes\" TheX Optional, can pass list column markers plot. desired Y-axis parameter (named pData) TheFill desired fill color (named pData) inverse.transform Default FALSE, reverts transformation going GatingSet CytoSet object outpath Desired storage location returntype Whether return \"pdf\", \"patchwork\" \"plots\" therows desired number rows per page thecolumns desired number columns per page width desired page width height desired page height filename file name new .pdf","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_RidgePlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Ridge Plots for comparison — Utility_RidgePlots","text":"pdf file","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_RidgePlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Ridge Plots for comparison — Utility_RidgePlots","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1:2] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1:2],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  Condition <- data.frame(Condition=c(\"Ctrl\", \"Ctrl\")) pd <- pData(UnmixedGatingSet) new_pd <- cbind(pd, Condition) pData(UnmixedGatingSet) <- new_pd  SinglePlot <- Utility_RidgePlots(gs=UnmixedGatingSet, subset=\"live\",   TheFill=\"Condition\",TheX = \"APC-Fire 810-A\", TheY=\"name\",   returntype=\"plots\", outpath=StorageLocation, filename=\"RidgePlot_Condition\") #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ThirdColorPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight the location of a particular cell population on a given bi-exponential axis. — Utility_ThirdColorPlots","title":"Highlight the location of a particular cell population on a given bi-exponential axis. — Utility_ThirdColorPlots","text":"Highlight location particular cell population given bi-exponential axis.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ThirdColorPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight the location of a particular cell population on a given bi-exponential axis. — Utility_ThirdColorPlots","text":"","code":"Utility_ThirdColorPlots(   x,   subset,   xaxis,   yaxis,   zaxis,   splitpoint = 100,   thecolor = \"red\",   sample.name,   removestrings,   tilesize = 0.7,   FactorNames = NULL,   reference = NULL )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ThirdColorPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight the location of a particular cell population on a given bi-exponential axis. — Utility_ThirdColorPlots","text":"x GatingSet Object subset Desired Gate Interest xaxis X-axis Marker yaxis Y-axis Marker zaxis Marker want visible splitpoint Point denotes positive negative marker. thecolor color positive cells sample.name keyword determines specimens name removestrings list string characters remove name tilesize Equivalent bin, determines height width tile dots. FactorNames Provide factor names splitpoint equals categorical reference Provide Coereba reference splitpoint equals crossreference","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ThirdColorPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlight the location of a particular cell population on a given bi-exponential axis. — Utility_ThirdColorPlots","text":"ggplot object z-axis cells highlighted background cells","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_ThirdColorPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight the location of a particular cell population on a given bi-exponential axis. — Utility_ThirdColorPlots","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  SinglePlot <-  Utility_ThirdColorPlots(x=UnmixedGatingSet[1],   subset = \"live\", xaxis=\"BUV496-A\", yaxis = \"Spark Blue 550-A\",   zaxis =\"BUV805-A\", splitpoint = \"continuous\", sample.name = \"GROUPNAME\",   removestrings = removestrings,thecolor = \"blue\") #> Splitpoint is a continuous"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_tSNE.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs tSNE (Rtsne implementation) — Utility_tSNE","title":"Runs tSNE (Rtsne implementation) — Utility_tSNE","text":"Runs tSNE (Rtsne implementation)","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_tSNE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs tSNE (Rtsne implementation) — Utility_tSNE","text":"","code":"Utility_tSNE(   x,   sample.name,   removestrings,   subset,   columns = NULL,   notcolumns = NULL,   subsample = NULL,   export = FALSE,   outpath = NULL,   max_iter = 1000,   perplexity = 30,   ... )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_tSNE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs tSNE (Rtsne implementation) — Utility_tSNE","text":"x gating set object sample.name Keyword sample name stored removestrings list things remove sample.name subset subset interest gating hierarchy columns columns use. combinable notcolumns, use one . notcolumns columns use. combinable columns, use one . subsample downsampling wanted. export set TRUE returns fcs files specified outpath. outpath Location store new .fcs files max_iter Rtsne argument, default set 1000 perplexity Rtsne argument, default set 30 ... Arguments pass Rtsne","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_tSNE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs tSNE (Rtsne implementation) — Utility_tSNE","text":"tSNE axes bound flowframe fcs file","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_tSNE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs tSNE (Rtsne implementation) — Utility_tSNE","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] SubsetMarkers <- c(\"BUV496-A\", \"BUV805-A\", \"Pacific Blue-A\", \"BV711-A\",   \"BV786-A\", \"Spark Blue 550-A\", \"PE-A\", \"APC-Fire 750-A\")  tSNE_Output <- Utility_tSNE(x=UnmixedGatingSet[[1]], sample.name = \"TUBENAME\",  removestrings=removestrings, subset = \"live\", columns=SubsetMarkers, export=FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs UMAP (uwot implementation) — Utility_UMAP","title":"Runs UMAP (uwot implementation) — Utility_UMAP","text":"Runs UMAP (uwot implementation)","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs UMAP (uwot implementation) — Utility_UMAP","text":"","code":"Utility_UMAP(   x,   sample.name,   removestrings,   subset,   columns = NULL,   notcolumns = NULL,   subsample = NULL,   export = FALSE,   outpath = NULL,   metric = \"euclidean\",   n_neighbors = 15,   min_dist = 0.5,   ... )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs UMAP (uwot implementation) — Utility_UMAP","text":"x gating set object sample.name Keyword sample name stored removestrings list things remove sample.name subset subset interest gating hierarchy columns columns use. combinable notcolumns, use one . notcolumns columns use. combinable columns, use one . subsample downsampling wanted. export set TRUE returns fcs files specified outpath. outpath Location store new .fcs files metric umap Argument, default set \"euclidean\" n_neighbors umap Argument, default set 15 min_dist umap Argument, default set 0.5 ... arguments pass umap()","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs UMAP (uwot implementation) — Utility_UMAP","text":"UMAP axes bound flowframe fcs file","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UMAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs UMAP (uwot implementation) — Utility_UMAP","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] SubsetMarkers <- c(\"BUV496-A\", \"BUV805-A\", \"Pacific Blue-A\", \"BV711-A\",   \"BV786-A\", \"Spark Blue 550-A\", \"PE-A\", \"APC-Fire 750-A\")  UMAP_Output <- Utility_UMAP(x=UnmixedGatingSet[[1]], sample.name=\"GUID\",   removestrings=c(\"_Cells\", \".fcs\"), subset=\"nonDebris\",   columns=KeptMarkers, export=FALSE)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UnityPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare the plots for given parameters for all specimens in the gating set. — Utility_UnityPlot","title":"Compare the plots for given parameters for all specimens in the gating set. — Utility_UnityPlot","text":"Compare plots given parameters specimens gating set.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UnityPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare the plots for given parameters for all specimens in the gating set. — Utility_UnityPlot","text":"","code":"Utility_UnityPlot(   x,   y,   GatingSet,   marginsubset,   gatesubset,   sample.name,   removestrings,   clearance,   bins,   gatelines,   reference,   returntype,   outpath,   filename = NULL,   cartesian = TRUE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UnityPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare the plots for given parameters for all specimens in the gating set. — Utility_UnityPlot","text":"x desired x-axis parameter y desired y-axis parameter GatingSet Gating Set contains specimens marginsubset desired gate margins gatesubset desired gate cells want plot sample.name keyword designates different specimens removestrings Values remove plot titles pdf clearance value clearance multiplied margin bins many bins class cells gatelines Whether plot reference lines reference Reference gate cutoff lines returntype Whether return \"pdf\", \"patchwork\" \"plots\" outpath desired location send assembled pdf filename Default NULL, provide name set filename. cartesian Default TRUE, set false remove cartesian_coord centering","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UnityPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare the plots for given parameters for all specimens in the gating set. — Utility_UnityPlot","text":"ggplots specimens, well optional .pdf","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Utility_UnityPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare the plots for given parameters for all specimens in the gating set. — Utility_UnityPlot","text":"","code":"library(BiocGenerics) library(flowCore) library(flowWorkspace) library(openCyto) library(data.table)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") FCS_Files <- list.files(path = File_Location, pattern = \".fcs\",   full.names = TRUE) Unmixed_FullStained <- FCS_Files[grep(\"Unmixed\", FCS_Files)] UnmixedFCSFiles <- Unmixed_FullStained[1:2] UnmixedCytoSet <- load_cytoset_from_fcs(UnmixedFCSFiles[1:2],   truncate_max_range = FALSE,transformation = FALSE) UnmixedGatingSet <- GatingSet(UnmixedCytoSet) Markers <- colnames(UnmixedCytoSet) KeptMarkers <- Markers[-grep(\"Time|FS|SC|SS|Original|-W$|-H$|AF\", Markers)] MyBiexponentialTransform <- flowjo_biexp_trans(channelRange = 256,   maxValue = 1000000,pos = 4.5, neg = 0, widthBasis = -1000) TransformList <- transformerList(KeptMarkers, MyBiexponentialTransform) UnmixedGatingSet <- flowWorkspace::transform(UnmixedGatingSet, TransformList) FileLocation <- system.file(\"extdata\", package = \"Luciernaga\") UnmixedGates <- fread(file.path(path = FileLocation, pattern = 'GatesUnmixed.csv')) UnmixedGating <- gatingTemplate(UnmixedGates) #> Adding population:singletsFSC #> Adding population:singletsSSC #> Adding population:singletsSSCB #> Adding population:nonDebris #> Adding population:lymphocytes #> Adding population:live gt_gating(UnmixedGating, UnmixedGatingSet) #> Gating for 'singletsFSC' #> done! #> done. #> Gating for 'singletsSSC' #> done! #> done. #> Gating for 'singletsSSCB' #> done! #> done. #> Gating for 'nonDebris' #> done! #> done. #> Gating for 'lymphocytes' #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust #> done! #> done. #> Gating for 'live' #> done! #> done. #> finished.  removestrings <-  c(\"DTR_\", \".fcs\") StorageLocation <- file.path(\"C:\", \"Users\", \"JohnDoe\", \"Desktop\")  SingleUnityPlot <- Utility_UnityPlot(x=\"Spark Blue 550-A\", y=\"BUV805-A\", GatingSet=UnmixedGatingSet, sample.name=\"GROUPNAME\", bins=100, clearance=0.2, removestrings=removestrings, marginsubset=\"lymphocytes\", gatesubset=\"live\", gatelines=FALSE, reference=NULL, returntype=\"patchwork\",outpath=StorageLocation) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Concentration.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes gated .fcs files and returns concentration and other info useful for Wetlab users. — Wetlab_Concentration","title":"Takes gated .fcs files and returns concentration and other info useful for Wetlab users. — Wetlab_Concentration","text":"Takes gated .fcs files returns concentration info useful Wetlab users.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Concentration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes gated .fcs files and returns concentration and other info useful for Wetlab users. — Wetlab_Concentration","text":"","code":"Wetlab_Concentration(x, subset, nameKeyword, DilutionMultiplier, TotalVolume)"},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Concentration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes gated .fcs files and returns concentration and other info useful for Wetlab users. — Wetlab_Concentration","text":"x mapped gating set object subset Desired population node derrive counts nameKeyword Keyword containing samples name (ex. \"GROUPNAME\" c(\"GROUPNAME\", \"TUBENAME\")) DilutionMultiplier dilution multiplier sample TotalVolume Volume specimen resuspended .","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Concentration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes gated .fcs files and returns concentration and other info useful for Wetlab users. — Wetlab_Concentration","text":"data.frame useful information","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Concentration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes gated .fcs files and returns concentration and other info useful for Wetlab users. — Wetlab_Concentration","text":"","code":"library(flowCore) library(flowWorkspace) library(CytoML) library(dplyr) library(purrr)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") WSP_File <- list.files(File_Location, pattern=\".wsp\", full.names = TRUE) ws <- open_flowjo_xml(WSP_File[1]) gs <- flowjo_to_gatingset(ws, name=1, path = File_Location) nameKeyword <- c(\"GROUPNAME\", \"TUBENAME\")  TheData <- map(.x=gs, Wetlab_Concentration, subset = \"CD45+\",   nameKeyword=nameKeyword, DilutionMultiplier=100, TotalVolume=1) %>%    bind_rows()"},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Decision.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes Rest output, and referencing TheCondition csv makes decision for culture resuspensions — Wetlab_Decision","title":"Takes Rest output, and referencing TheCondition csv makes decision for culture resuspensions — Wetlab_Decision","text":"Takes Rest output, referencing TheCondition csv makes decision culture resuspensions","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Decision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes Rest output, and referencing TheCondition csv makes decision for culture resuspensions — Wetlab_Decision","text":"","code":"Wetlab_Decision(   data,   FinalConcentration_MillionperML,   MillionCellsPerTube,   TheConditions,   ReturnLeftover = TRUE )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Decision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes Rest output, and referencing TheCondition csv makes decision for culture resuspensions — Wetlab_Decision","text":"data Wetlab_Rest output FinalConcentration_MillionperML Desired Final Concentration Millions MillionCellsPerTube Desired number cells Tube TheConditions filepath data.frame TheCondition csv ReturnLeftover Whether return leftover cells line","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Decision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes Rest output, and referencing TheCondition csv makes decision for culture resuspensions — Wetlab_Decision","text":"data.frame object","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Decision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes Rest output, and referencing TheCondition csv makes decision for culture resuspensions — Wetlab_Decision","text":"","code":"NULL #> NULL"},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Rest.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes Concentration output, returns re-suspension amounts for Wetlab users. — Wetlab_Rest","title":"Takes Concentration output, returns re-suspension amounts for Wetlab users. — Wetlab_Rest","text":"Takes Concentration output, returns re-suspension amounts Wetlab users.","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Rest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes Concentration output, returns re-suspension amounts for Wetlab users. — Wetlab_Rest","text":"","code":"Wetlab_Rest(   data,   DesiredConcentration_MillionperML,   MaxMLperTube,   returntype,   outpath = NULL,   filename = \"CellResuspensions\" )"},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Rest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes Concentration output, returns re-suspension amounts for Wetlab users. — Wetlab_Rest","text":"data Wetlab_Concentration output (modified correct Total mL amounts) DesiredConcentration_MillionperML Final desired concentration (ex. 1, 3, etc.) MaxMLperTube Final Volume rest tube returntype Whether return \"data\", \"plot\" \"\" outpath File path location store table filename File name store table ","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Rest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes Concentration output, returns re-suspension amounts for Wetlab users. — Wetlab_Rest","text":"data.frame resuspension measurements get desired parameters","code":""},{"path":"https://davidrach.github.io/Luciernaga/reference/Wetlab_Rest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes Concentration output, returns re-suspension amounts for Wetlab users. — Wetlab_Rest","text":"","code":"library(flowCore) library(flowWorkspace) library(CytoML) library(dplyr) library(purrr)  File_Location <- system.file(\"extdata\", package = \"Luciernaga\") WSP_File <- list.files(File_Location, pattern=\".wsp\", full.names = TRUE) ws <- open_flowjo_xml(WSP_File[1]) gs <- flowjo_to_gatingset(ws, name=1, path = File_Location) nameKeyword <- c(\"GROUPNAME\", \"TUBENAME\")  TheData <- map(.x=gs, Wetlab_Concentration, subset = \"CD45+\",   nameKeyword=nameKeyword, DilutionMultiplier=100, TotalVolume=1) %>%    bind_rows()  UpdatedData <- TheData %>% select(-TotalScientific, -TimeSeconds)  Results <- Wetlab_Rest(data=UpdatedData, DesiredConcentration_MillionperML=3,  MaxMLperTube=1, returntype=\"data\", outpath=path)"}]
